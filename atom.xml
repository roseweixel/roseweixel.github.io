<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[code.life]]></title>
  <link href="http://roseweixel.github.io/atom.xml" rel="self"/>
  <link href="http://roseweixel.github.io/"/>
  <updated>2015-08-06T22:38:59-04:00</updated>
  <id>http://roseweixel.github.io/</id>
  <author>
    <name><![CDATA[Rose Weixel]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The Journey of Nested Params Through a Rails App]]></title>
    <link href="http://roseweixel.github.io/blog/2015/07/08/the-journey-of-nested-params-through-a-rails-app/"/>
    <updated>2015-07-08T14:54:28-04:00</updated>
    <id>http://roseweixel.github.io/blog/2015/07/08/the-journey-of-nested-params-through-a-rails-app</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://roseweixel.github.io/images/params-journey-1.png" width="800" height="800" title="image" alt="images"></p>

<p><img class="center" src="http://roseweixel.github.io/images/params-journey-2.png" width="800" height="800" title="image" alt="images"></p>

<p><img class="center" src="http://roseweixel.github.io/images/params-journey-3.png" width="800" height="800" title="image" alt="images"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Integrating Ajax and Rails: A Simple Todo List App]]></title>
    <link href="http://roseweixel.github.io/blog/2015/07/05/integrating-ajax-and-rails-a-simple-todo-list-app/"/>
    <updated>2015-07-05T16:59:51-04:00</updated>
    <id>http://roseweixel.github.io/blog/2015/07/05/integrating-ajax-and-rails-a-simple-todo-list-app</id>
    <content type="html"><![CDATA[<p>This post is based on a tutorial I created to teach students at <a href="http://www.flatironschool.com">The Flatiron School</a> the basics of integrating Ajax with Rails. This guide is appropriate for beginners who have already learned the basics of Rails and jQuery.</p>

<p>It will walk you through the process of adding Ajax to a very simple rails app for creating todo lists. First we&rsquo;ll go through the basics of setting up the Rails app, then adding jQuery and Ajax to add items without reloading the page. Finally, we&rsquo;ll refactor with <code>remote: true</code>. Feel free to code along!</p>

<h2>The Basic Rails Todo App</h2>

<p>Before getting to Ajax, here are the steps to create the basic rails todo app we&rsquo;ll be building on:</p>

<p>1) <code>rails new todo_app</code></p>

<p>2) <code>rails g resource todo</code></p>

<p>3) In the migration file (located in <code>db/migrate</code>):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">CreateTodos</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Migration</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">change</span>
</span><span class='line'>    <span class="n">create_table</span> <span class="ss">:todos</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">string</span> <span class="ss">:description</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">string</span> <span class="ss">:priority</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">timestamps</span> <span class="ss">null</span><span class="p">:</span> <span class="kp">false</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>4) In <code>app/controllers/todos_controller.rb</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">TodosController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>    <span class="vi">@todos</span> <span class="o">=</span> <span class="no">Todo</span><span class="o">.</span><span class="n">all</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>    <span class="no">Todo</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="n">todo_params</span><span class="p">)</span>
</span><span class='line'>    <span class="n">redirect_to</span> <span class="n">root_path</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">destroy</span>
</span><span class='line'>    <span class="n">todo</span> <span class="o">=</span> <span class="no">Todo</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="n">todo</span><span class="o">.</span><span class="n">destroy</span>
</span><span class='line'>    <span class="n">redirect_to</span> <span class="n">root_path</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">todo_params</span>
</span><span class='line'>      <span class="n">params</span><span class="o">.</span><span class="n">require</span><span class="p">(</span><span class="ss">:todo</span><span class="p">)</span><span class="o">.</span><span class="n">permit</span><span class="p">(</span><span class="ss">:description</span><span class="p">,</span> <span class="ss">:priority</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>5) In <code>config/routes.rb</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">routes</span><span class="o">.</span><span class="n">draw</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">root</span> <span class="s1">&#39;todos#index&#39;</span>
</span><span class='line'>  <span class="n">resources</span> <span class="ss">:todos</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>6) Create <code>views/todos/index.html.erb</code> with a basic form and list of todos:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;h1&gt;</span>My Todos<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;</span>%= form_for Todo.new do |f| %&gt;
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;form-group&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="err">&lt;</span>%= f.text_field :description, placeholder:
</span><span class='line'>    &quot;what needs doing?&quot; %&gt;
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;form-group&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="err">&lt;</span>%= f.text_field :priority, placeholder: &quot;priority level&quot; %&gt;
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;form-group&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="err">&lt;</span>%= f.submit %&gt;
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="err">&lt;</span>% end %&gt;
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;ul&gt;</span>
</span><span class='line'><span class="err">&lt;</span>% @todos.each do |todo| %&gt;
</span><span class='line'>  <span class="nt">&lt;li&gt;</span>
</span><span class='line'>    <span class="err">&lt;</span>%= todo.description %&gt;<span class="nt">&lt;br&gt;</span>
</span><span class='line'>    <span class="nt">&lt;strong&gt;</span>priority: <span class="nt">&lt;/strong&gt;</span><span class="err">&lt;</span>%= todo.priority %&gt;<span class="nt">&lt;br&gt;</span>
</span><span class='line'>    <span class="err">&lt;</span>%= link_to &quot;done&quot;, todo_path(todo), method: &#39;delete&#39; %&gt;
</span><span class='line'>  <span class="nt">&lt;/li&gt;</span>
</span><span class='line'><span class="err">&lt;</span>% end %&gt;
</span><span class='line'><span class="nt">&lt;/ul&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>7) Before starting up the rails server: <code>rake db:migrate</code></p>

<p>Now we can create new todos and destroy them. This is as functional as our app needs to be. Except for one thing. Since this is a single page app, it would be really nice if we could add and remove todos without reloading the page. Enter Ajax!</p>

<h2>Posting New Todos with Ajax</h2>

<p>Now we are going to &ldquo;ajaxify&rdquo; the process of creating todos. Since we are entering JavaScript land, we&rsquo;ll go into <code>app/assets/javascripts</code>. You&rsquo;ll see a file called <code>todos.coffee</code> or <code>todos.js.coffee</code>. We will not be using CoffeeScript, so rename it to <code>todos.js</code>.</p>

<p>Here&rsquo;s what we are going to implement:</p>

<p>When the &ldquo;Create Todo&rdquo; button is clicked, we will stop the default form submission behavior from happening, and send an Ajax request instead. To break this down further, here are the steps we&rsquo;ll need to follow:</p>

<ol>
<li>Create an event listener for the &lsquo;click&rsquo; event (or for the submission of the form) that loads when the document is ready and prevents the default behavior from happening (stops the page from reloading).</li>
<li>Grab some information from the form to use in our Ajax request.</li>
<li>Make the Ajax request.</li>
<li>Handle the response and add the new todo to the page.</li>
</ol>


<h3>Create an Event Listener</h3>

<p>In <code>app/assets/javascripts/todos.js</code>:</p>

<p>1) Make sure the document is ready before doing anything else.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// This is shorthand for $( document ).ready(function() { })</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>2) Listen for the submission of the form.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;form&quot;</span><span class="p">).</span><span class="nx">submit</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="c1">// this debugger should be hit when you click the submit button!</span>
</span><span class='line'>    <span class="kr">debugger</span><span class="p">;</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>3) Prevent the default behavior (the form submitting and the page reloading).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;form&quot;</span><span class="p">).</span><span class="nx">submit</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">event</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// this debugger should be hit when you click the submit button!</span>
</span><span class='line'>    <span class="kr">debugger</span><span class="p">;</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Grab Information From the Form</h3>

<p>In order to make the Ajax request, we&rsquo;ll need to give the request the correct action and method to take us to the create action in the todos controller. If we <code>rake routes</code>, we&rsquo;ll see this:</p>

<p><code>POST   /todos(.:format)          todos#create</code></p>

<p>So we know we will be making a &lsquo;post&rsquo; request to &lsquo;/todos&rsquo;. We could hard code this in our Ajax request, but what if our routes change later on? Our request would no longer work. In order to make our code more robust, we&rsquo;ll get the correct action and method directly from the form itself. Basicaly, we&rsquo;ll ask the form where it was going by extracting the information with jQuery.</p>

<p>The <code>debugger</code> we threw into our code above will be really useful in figuring out the jQuery code for pulling out the information we need. With your server running and your JavaScript console open, fill in the form and hit the submit button. When the debugger gets hit, what is <code>this</code>?</p>

<p><img src="http://roseweixel.github.io/images/js-console-1.png" alt="`this` in the console" /></p>

<p>Since our debugger is inside the function that&rsquo;s attached to the form submission, <code>this</code> is the form itself, and the action and method we need are right there! Let&rsquo;s use jQuery to grab them, using the handy <a href="https://api.jquery.com/attr/">.attr()</a> method.</p>

<p><img src="http://roseweixel.github.io/images/js-console-2.png" alt="`.attr()` in the console" /></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;form&quot;</span><span class="p">).</span><span class="nx">submit</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">event</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">action</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;action&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">method</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;method&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Of course, we also need the text we entered into the form for the todo description and priority level. If we open up the form element and all the divs that live inside of it in our console, we see that Rails gave our inputs some nice ids that we can use to select them with. Specifically, there&rsquo;s an input with an id of &ldquo;todo_description&rdquo; and an input with an id of &ldquo;todo_priority&rdquo;. Lets grab these using the jQuery <a href="https://api.jquery.com/find/">.find()</a> method.</p>

<p><img src="http://roseweixel.github.io/images/js-console-3.png" alt=".find() in the console" /></p>

<p>We don&rsquo;t see the values that we typed into the form yet, but we can pull them out using the jQuery <a href="https://api.jquery.com/val/">.val()</a> method.</p>

<p><img src="http://roseweixel.github.io/images/js-console-4.png" alt=".val() in the console" /></p>

<p>Great! Let&rsquo;s store these values as variables so we can pass them in to our Ajax request.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;form&quot;</span><span class="p">).</span><span class="nx">submit</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">event</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">action</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;action&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">method</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;method&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">description</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;#todo_description&#39;</span><span class="p">).</span><span class="nx">val</span><span class="p">();</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">priority</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;#todo_priority&#39;</span><span class="p">).</span><span class="nx">val</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>We are ready for the next step!</p>

<h3>Make the Ajax Request</h3>

<p>We are going to make an Ajax request that will deliver a JavaScript response to the create action in the todos controller.</p>

<p>The <a href="http://api.jquery.com/jquery.ajax/">jQuery documentation for writing Ajax requests</a> is really nice, so here&rsquo;s some code I pulled from there:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">method</span><span class="o">:</span> <span class="s2">&quot;POST&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">url</span><span class="o">:</span> <span class="s2">&quot;some.php&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">data</span><span class="o">:</span> <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;John&quot;</span><span class="p">,</span> <span class="nx">location</span><span class="o">:</span> <span class="s2">&quot;Boston&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>If we change the method, url, and data to the variables we created, we should be good to go! Our todos.js should now look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;form&quot;</span><span class="p">).</span><span class="nx">submit</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">event</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">action</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;action&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">method</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;method&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">description</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;#todo_description&#39;</span><span class="p">).</span><span class="nx">val</span><span class="p">();</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">priority</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;#todo_priority&#39;</span><span class="p">).</span><span class="nx">val</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">method</span><span class="o">:</span> <span class="nx">method</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">url</span><span class="o">:</span> <span class="nx">action</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">data</span><span class="o">:</span> <span class="p">{</span> <span class="nx">description</span><span class="o">:</span> <span class="nx">description</span><span class="p">,</span> <span class="nx">priority</span><span class="o">:</span> <span class="nx">priority</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since we&rsquo;re expecting this Ajax request to hit the create action in the todos controller, let&rsquo;s put a <code>binding.pry</code> in there (make sure you&rsquo;ve added <code>gem 'pry'</code> to your Gemfile and run bundle install first):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>  <span class="c1"># if our ajax request works, we&#39;ll hit this binding at take a look at params!</span>
</span><span class='line'>  <span class="nb">binding</span><span class="o">.</span><span class="n">pry</span>
</span><span class='line'>  <span class="no">Todo</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="n">todo_params</span><span class="p">)</span>
</span><span class='line'>  <span class="n">redirect_to</span> <span class="n">root_path</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here&rsquo;s what you&rsquo;ll see when that binding gets hit:</p>

<p><img src="http://roseweixel.github.io/images/pry-1.png" alt="params in pry" /></p>

<p>Success! The Ajax request went where we wanted it to go and it sent the params through the way we told it to. But params is not quite right. Since we&rsquo;re using strong params, we need a nested structure where &ldquo;todo&rdquo; is a top level key. By changing our Ajax request to include <code>data: { todo: {description: description, priority: priority} }</code> this problem is solved, but there&rsquo;s actually a jQuery method, <a href="https://api.jquery.com/serializeArray/">.serializeArray()</a>, that will take care of turning all our form data into a nicely structured object (nesting included!) that we can use in our Ajax call. Here&rsquo;s how it looks in our code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// .serializeArray() can be called on any form element (and here, $(this) is our form)</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">serializeArray</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">method</span><span class="o">:</span> <span class="nx">method</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">url</span><span class="o">:</span> <span class="nx">action</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">data</span><span class="o">:</span> <span class="nx">data</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now our params will be structured the way Rails expects them to be, and we can move on to the next step!</p>

<h3>Handle the Response</h3>

<p>We&rsquo;re still in the todos controller create action, and we&rsquo;re now able to instantiate new todos using the nicely structured params that we sent via Ajax. Currently, after creating the new Todo, we are just redirecting to the root_path. But the whole point of using Ajax is <em>not</em> to redirect. By default, a rails controller action handles responses that are sent in as html strings. We now want to tell it to respond to JavaScript:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>  <span class="no">Todo</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="n">todo_params</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">respond_to</span> <span class="k">do</span> <span class="o">|</span><span class="nb">format</span><span class="o">|</span>
</span><span class='line'>    <span class="c1"># if the response fomat is html, redirect as usual</span>
</span><span class='line'>    <span class="nb">format</span><span class="o">.</span><span class="n">html</span> <span class="p">{</span> <span class="n">redirect_to</span> <span class="n">root_path</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># if the response format is javascript, do something else...</span>
</span><span class='line'>    <span class="nb">format</span><span class="o">.</span><span class="n">js</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Before going further into what Rails will do with this JavaScript response, there&rsquo;s one more problem with our Ajax request. We did not tell it to send back JavaScript! Let&rsquo;s do that now, and our Ajax call should look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">method</span><span class="o">:</span> <span class="nx">method</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">url</span><span class="o">:</span> <span class="nx">action</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">data</span><span class="o">:</span> <span class="nx">data</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// this line makes the response format JavaScript and not html.</span>
</span><span class='line'>  <span class="nx">dataType</span><span class="o">:</span> <span class="s1">&#39;script&#39;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>So now that we&rsquo;re getting the response we want, what is <code>format.js { }</code> actually doing?</p>

<p>When Rails sees that line of code, it will automatically look for a file with the path <code>app/views/&lt;controller name&gt;/&lt;action name&gt;.js.erb</code>. In our example, it&rsquo;s looking for app/views/todos/create.js.erb.</p>

<p>Make that file and throw a debugger in there to confirm that it&rsquo;s actually where we land when we get out of the create action.</p>

<p><img src="http://roseweixel.github.io/images/create-js-erb-1.png" alt="new create.js.erb file" />
<img src="http://roseweixel.github.io/images/js-console-5.png" alt="debugger in create.js.erb" /></p>

<p>That worked! So now that we are in create.js.erb, we have access to any instance variables we created in the controller action that led us there, and we can write JavaScript and ERB (embedded Ruby) code to do whatever we want with our view. We should probably save our newly created todo in an instance variable for just that purpose.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>  <span class="vi">@todo</span> <span class="o">=</span> <span class="no">Todo</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="n">todo_params</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">respond_to</span> <span class="k">do</span> <span class="o">|</span><span class="nb">format</span><span class="o">|</span>
</span><span class='line'>    <span class="nb">format</span><span class="o">.</span><span class="n">html</span> <span class="p">{</span> <span class="n">redirect_to</span> <span class="n">root_path</span> <span class="p">}</span>
</span><span class='line'>    <span class="nb">format</span><span class="o">.</span><span class="n">js</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>So what do we want to do next? In create.js.erb, we want to use JavaScript (or jQuery) to append the new todo to the <code>&lt;ul&gt;</code> where the todos live on the page.</p>

<p>We could do something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">html</span> <span class="o">=</span> <span class="s2">&quot;&lt;li&gt;&lt;%= @todo.description %&gt;&lt;br&gt;&lt;strong&gt;priority: &lt;/strong&gt; &lt;%= @todo.priority %&gt;&lt;br&gt;&lt;%= escape_javascript link_to &#39;done&#39;, todo_path(@todo), method: &#39;delete&#39; %&gt;&lt;/li&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;ul&#39;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span><span class="nx">html</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, when we enter a new todo description and priority and hit the submit button, it appears on the page and no reloading happens! That&rsquo;s great, but it could use some refactoring.</p>

<ol>
<li>It&rsquo;s not DRY: we basically copied and pasted code from our index.html.erb. If the way we want to render todos ever changes, we now have to change it in two places.</li>
<li>It&rsquo;s ugly. That html string is pretty hard to read, and what&rsquo;s that <code>escape_javascript</code> doing in there? We need that or the <code>link_to</code> will be evaluated as JavaScript and the whole thing breaks.</li>
</ol>


<p>The solution to this? A partial. Extract the code for displaying a single todo out of index.html.erb and place it in  a new file at <code>app/views/todos/_todo.html.erb</code>:</p>

<p><img src="http://roseweixel.github.io/images/todo-partial.png" alt="todo partial" /></p>

<p>Now you can use Rails magic to render the <code>@todos</code> collection in index.html.erb:</p>

<p><img src="http://roseweixel.github.io/images/index-with-render-collection.png" alt="index using todo partial" /></p>

<p>Finally, replace the html string we had in create.js.erb with code for rendering the partial, passing in <code>@todo</code> as a local variable:</p>

<p><img src="http://roseweixel.github.io/images/create-js-erb-2.png" alt="create.js.erb using partial" /></p>

<p>And we&rsquo;re done creating todos with Ajax! In the next section, we&rsquo;ll refactor our code by using <code>remote: true</code>.</p>

<h2>Refactoring with <code>remote: true</code></h2>

<p>In Rails, both <code>form_for</code> and <code>link_to</code> helpers can take an argument of <code>remote: true</code>:</p>

<h3>Example: <code>link_to</code> with <code>remote: true</code></h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;%=</span> <span class="n">link_to</span> <span class="s1">&#39;Show Something&#39;</span><span class="p">,</span> <span class="n">something_path</span><span class="p">(</span><span class="vi">@something</span><span class="p">),</span> <span class="ss">remote</span><span class="p">:</span> <span class="kp">true</span> <span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the case of our todo list app, we will add <code>remote: true</code> to our form for creating a new todo (the only change here is on the first line of the form):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sx">%= form_for Todo.new, remote: true do |f| %&gt;</span>
</span><span class='line'><span class="sx">  &lt;div class=</span><span class="s2">&quot;form-group&quot;</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="sx">%= f.text_field :description, placeholder: </span>
</span><span class='line'><span class="sx">    &quot;what needs doing?&quot; %&gt;</span>
</span><span class='line'><span class="sx">  &lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sx">  &lt;div class=</span><span class="s2">&quot;form-group&quot;</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="sx">%= f.text_field :priority, placeholder: &quot;priority level&quot; %&gt;</span>
</span><span class='line'><span class="sx">  &lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sx">  &lt;div class=</span><span class="s2">&quot;form-group&quot;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">submit</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">  &lt;/div&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sx">% end </span><span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, what does <code>remote: true</code> do for you? In short, it adds a <code>data-remote="true"</code> attribute to the generated html form as seen <a href="http://guides.rubyonrails.org/working_with_javascript_in_rails.html#form-for">here</a>, and submits the form via Ajax automagically. As with everything in Rails, there&rsquo;s metaprogramming going on under the hood. In this case, the JavaScript code that we wrote to hijack the submit event and make the appropriate Ajax request is all generated for you behind the scenes. If you&rsquo;re feeling extra curious, check out the <a href="https://github.com/rails/jquery-ujs/blob/148571ded762f22ccca84db38d4b4d56853ab395/src/rails.js">Rails.js source code</a>.</p>

<p>Here&rsquo;s a small snippet from the source code linked to above. Not so surprisingly, it looks a lot like the code we wrote (especially lines 2-4!):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">element</span><span class="p">.</span><span class="nx">is</span><span class="p">(</span><span class="s1">&#39;form&#39;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">method</span> <span class="o">=</span> <span class="nx">element</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;method&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">url</span> <span class="o">=</span> <span class="nx">element</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;action&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">data</span> <span class="o">=</span> <span class="nx">element</span><span class="p">.</span><span class="nx">serializeArray</span><span class="p">();</span>
</span><span class='line'>  <span class="c1">// memoized value from clicked submit button</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">button</span> <span class="o">=</span> <span class="nx">element</span><span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="s1">&#39;ujs:submit-button&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">button</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">data</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">button</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">element</span><span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="s1">&#39;ujs:submit-button&#39;</span><span class="p">,</span> <span class="kc">null</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Because Rails is providing all of this JavaScript for us, now that we&rsquo;ve added <code>remote: true</code> to the form, we can get rid of everything in our todos.js file.</p>

<h3>Before adding <code>remote: true</code>:</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// app/assets/javascripts/todos.js</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;form&quot;</span><span class="p">).</span><span class="nx">submit</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">event</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">action</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;action&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">method</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;method&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">serializeArray</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">method</span><span class="o">:</span> <span class="nx">method</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">url</span><span class="o">:</span> <span class="nx">action</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">data</span><span class="o">:</span> <span class="nx">data</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">dataType</span><span class="o">:</span> <span class="s1">&#39;script&#39;</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>After adding <code>remote: true</code>:</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// app/assets/javascripts/todos.js</span>
</span></code></pre></td></tr></table></div></figure>


<p>Just like when we manually wrote out the Ajax call, when the form is submitted the default behavior will be prevented and a JavaScript response will be sent to the create action in the todos controller. The controller will then send us to app/views/todos/create.js.erb, just as it did before. We will leave the rest of our code as is, and we are done with our refactoring!</p>

<h2>Deleting todos with <code>remote: true</code></h2>

<p>Now that we&rsquo;ve seen the beautiful simplicity of <code>remote: true</code>, let&rsquo;s see how quick and easy it is to remove todos from the database and the DOM with no refreshing needed:</p>

<p>1) In <code>views/todos/index.html.erb</code>, we have a link that hits the <code>destroy</code> action in the <code>TodosController</code>. Simply add <code>remote: true</code> to it.</p>

<p><strong>Note: At this point it&rsquo;s also important to give each <code>&lt;li&gt;</code> an <code>id</code> that will help us remove the correct item from the DOM after deleting it.</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;h1&gt;</span>My Todos<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'>...
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;ul&gt;</span>
</span><span class='line'><span class="err">&lt;</span>% @todos.each do |todo| %&gt;
</span><span class='line'>  <span class="c">&lt;!-- This `id` attribute will help us find the correct element to remove using jQuery --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;li</span> <span class="na">id=</span><span class="s">&quot;&lt;%= todo.id %&gt;&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="err">&lt;</span>%= todo.description %&gt;<span class="nt">&lt;br&gt;</span>
</span><span class='line'>    <span class="nt">&lt;strong&gt;</span>priority: <span class="nt">&lt;/strong&gt;</span><span class="err">&lt;</span>%= todo.priority %&gt;<span class="nt">&lt;br&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">&lt;!-- Add `remote: true` to the line below --&gt;</span>
</span><span class='line'>    <span class="err">&lt;</span>%= link_to &quot;done&quot;, todo_path(todo), method: &#39;delete&#39;, remote: true %&gt;
</span><span class='line'>  <span class="nt">&lt;/li&gt;</span>
</span><span class='line'><span class="err">&lt;</span>% end %&gt;
</span><span class='line'><span class="nt">&lt;/ul&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>2) Tell the <code>todos#destroy</code> action how to <code>respond_to</code> a JavaScript response:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">destroy</span>
</span><span class='line'>  <span class="c1"># we need an instance variable `@todo` so we can access it in the next step!</span>
</span><span class='line'>  <span class="vi">@todo</span> <span class="o">=</span> <span class="no">Todo</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="vi">@todo</span><span class="o">.</span><span class="n">destroy</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">respond_to</span> <span class="k">do</span> <span class="o">|</span><span class="nb">format</span><span class="o">|</span>
</span><span class='line'>    <span class="nb">format</span><span class="o">.</span><span class="n">html</span> <span class="p">{</span> <span class="n">redirect_to</span> <span class="n">root_path</span> <span class="p">}</span>
</span><span class='line'>    <span class="nb">format</span><span class="o">.</span><span class="n">js</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>3) Remember that line 7 in the <code>destroy</code> action above will trigger Rails to look for <code>app/views/todos/destroy.js.erb</code>, so create that file and add code to select the todo to remove using jQuery. Let&rsquo;s make it <code>slideUp()</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;li#&lt;%= @todo.id %&gt;&quot;</span><span class="p">).</span><span class="nx">slideUp</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>And that&rsquo;s it. With this simple yet powerful pattern, you can easily ajaxify all the things in all of your Rails apps. If you&rsquo;re interested in learning more, I&rsquo;ve listed some handy resources below. Happy coding!</p>

<p><img class="center" src="http://roseweixel.github.io/images/ajaxify-all-the-things.jpg" width="400" height="400" title="image" alt="images"></p>

<h2>Additional Resources</h2>

<ul>
<li><a href="http://api.jquery.com/jquery.ajax/">jQuery Documentation - jQuery.ajax()</a></li>
<li><a href="http://blog.flatironschool.com/post/56146220219/learning-about-ajax">Learning About Ajax</a></li>
<li><a href="http://guides.rubyonrails.org/working_with_javascript_in_rails.html">Rails Documentation - Working with JavaScript in Rails</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Live Updating DOM Elements With jQuery and Ajax]]></title>
    <link href="http://roseweixel.github.io/blog/2015/06/04/live-updating-dom-elements-with-jquery-and-ajax/"/>
    <updated>2015-06-04T21:20:11-04:00</updated>
    <id>http://roseweixel.github.io/blog/2015/06/04/live-updating-dom-elements-with-jquery-and-ajax</id>
    <content type="html"><![CDATA[<p><em><strong>Based on a <a href="http://roseweixel.github.io/presentations">talk I gave</a> at the <a href="http://www.meetup.com/nychtml5/events/222437348/">NYCHTML5 Meetup</a> on June 2nd, 2015.</strong></em></p>

<p>Any web app that involves real-time interactions between users requires some form of live notifications. Implementing this, for a beginner developer such as myself, can be a daunting challenge. This post will walk through how I went about solving this problem when working on <a href="http://www.lacquerlove.com">Lacquer Love&amp;Lend</a>, a social network for nail polish lovers that allows users to interact via friendships and lacquer loans. As with any social network, I wanted users to see live notifications whenever they received a new friendship or transaction request, or when the <code>state</code> of any of their friendships or transactions changed. The example that follows assumes some basic knowledge of Rails.</p>

<h2>Some Basic Ajax</h2>

<p>In a basic Ajax request, a user clicks on something, the Ajax request gets sent, and a part of the DOM gets updated without the entire page reloading.</p>

<p><img class="center" src="http://roseweixel.github.io/images/basic_ajax_request.png" width="600" height="600" title="image" alt="images"></p>

<p>The code usually looks something like this:</p>

<figure class='code'><figcaption><span>app/assets/javascripts/something.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// 1) Wait for the document to be ready.</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 2) Listen for the submission of the form.</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;form&quot;</span><span class="p">).</span><span class="nx">submit</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 3) Prevent an entire page load (or reload).</span>
</span><span class='line'>        <span class="nx">event</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 4) Grab the information from the form needed for the Ajax request.</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">formAction</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;action&#39;</span><span class="p">);</span> <span class="c1">// e.g. &#39;/somethings&#39;</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">formMethod</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;method&#39;</span><span class="p">);</span> <span class="c1">// e.g. &#39;post&#39;</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">formData</span>   <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">serializeArray</span><span class="p">();</span> <span class="c1">// grabs the form data and makes your params nicely structured!</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 5) Make the Ajax request, which will hit the &#39;create&#39; action in the &#39;somethings&#39; controller</span>
</span><span class='line'>        <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
</span><span class='line'>          <span class="nx">url</span><span class="o">:</span>  <span class="nx">formAction</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">type</span><span class="o">:</span> <span class="nx">formMethod</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">data</span><span class="o">:</span> <span class="nx">formData</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>For the basic example, I&rsquo;m omitting the controller and view as the main focus of this post is how I implemented live notifications. A more detailed explanation of basic Ajax follows <a href="http://roseweixel.github.io/blog/2015/07/05/integrating-ajax-and-rails-a-simple-todo-list-app/">in my next post</a> - a prequel to this one, if you will :).</p>

<p>With the code above, a single user&rsquo;s action of submitting the form sets off the whole chain of events. But for live notifications, more than one user is involved and the action that changes one user&rsquo;s data is hapenning on another user&rsquo;s client! Making this happen twisted my brain into a pretzel at first, but after several attempts I got the functionality I wanted. A description of these follows below.</p>

<h2>Attempt #1: Refresh a Single Div Every 3 Seconds</h2>

<p>In order to get a single part of the page to update without the entire page refreshing, I used a <code>setInterval()</code> function to make an Ajax request every 3 seconds. This would make a <code>GET</code> request to a custom route: <code>users/:id/live_notifications</code> that hit an action named <code>live_notifications</code> in the <code>UsersController</code>.</p>

<p>1) Separate the &ldquo;live notifications&rdquo; div into a partial:</p>

<p><img class="center" src="http://roseweixel.github.io/images/live_notifications_div.png" width="600" height="600" title="image" alt="images"></p>

<p>2) Create a route and a controller action:</p>

<figure class='code'><figcaption><span>config/routes.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">get</span> <span class="s1">&#39;users/:id/live_notifications&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;users#live_notifications&#39;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>app/controllers/users_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">live_notifications</span>
</span><span class='line'>  <span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">respond_to</span> <span class="k">do</span> <span class="o">|</span><span class="nb">format</span><span class="o">|</span>
</span><span class='line'>    <span class="nb">format</span><span class="o">.</span><span class="n">js</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>3) Make the Ajax request to hit <code>users#live_notifications</code> every 3 seconds:</p>

<figure class='code'><figcaption><span>app/assets/javascripts/live_notifications.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">currentUrl</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">href</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Given that we&#39;re at a url like &#39;users/:id&#39;, this saves the unique id of the user whose show page we are currently looking at</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">userID</span> <span class="o">=</span> <span class="nx">currentUrl</span><span class="p">.</span><span class="nx">substr</span><span class="p">(</span><span class="nx">currentUrl</span><span class="p">.</span><span class="nx">lastIndexOf</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">setInterval</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
</span><span class='line'>            <span class="nx">type</span><span class="o">:</span> <span class="s2">&quot;GET&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">url</span><span class="o">:</span> <span class="s2">&quot;/users/&quot;</span> <span class="o">+</span> <span class="nx">userID</span> <span class="o">+</span> <span class="s2">&quot;/live_notifications&quot;</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">},</span> <span class="mi">3000</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>4) Once this Ajax request hits the controller (which is set up to handle a JavaScript response in the <code>respond_to</code> block), Rails by default will look for <code>app/views/users/live_notifications.js.erb</code> and execute the following to refresh the partial:</p>

<figure class='code'><figcaption><span>app/views/users/live_notifications.js.erb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#live-notifications&quot;</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="s1">&#39;&lt;%= j render &quot;live_notifications&quot;, user: @user %&gt;&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is all it took to refresh that single div every 3 seconds. However, it was far from ideal:</p>

<ul>
<li><p>Lots of refreshing for no reason (like when you&rsquo;re looking at another user&rsquo;s page and no notifications are displayed, or when nothing has changed)</p></li>
<li><p>Things that never would change are part of the div that is being refreshed (like header text, for example)</p></li>
<li><p>Last but not least, this kind of indescriminate refreshing breaks the functionality of forms&hellip;</p></li>
</ul>


<p><img class="center" src="http://roseweixel.github.io/images/form-refreshing-problems.gif" width="600" height="600" title="image" alt="images"></p>

<h2>A Quick Fix for Form Problems</h2>

<p>Thanks to jQuery pseudo selectors, we can stop the Ajax call from being made if an input field is currently focused:</p>

<figure class='code'><figcaption><span>app/assets/javascripts/live_notifications.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">setInterval</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// prevent the Ajax call from being made if the input field in the live notifications div is focused</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#transaction_due_date&#39;</span><span class="p">).</span><span class="nx">is</span><span class="p">(</span><span class="s2">&quot;:focus&quot;</span><span class="p">)){</span>
</span><span class='line'>            <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
</span><span class='line'>                <span class="p">...</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">},</span> <span class="mi">3000</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Getting More Specific</h2>

<p>The next logical step up from the &ldquo;refresh everything all the time&rdquo; strategy was to refresh the live notifications div only when looking at one&rsquo;s own show page (in other words, when the user id in the url matches the id of the current user stored in the session).</p>

<p>In order to make the <code>current_user</code> from the Rails backend available to JavaScript, I put the following in my application layout:</p>

<figure class='code'><figcaption><span>app/views/layouts/application.html.erb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nb">window</span><span class="p">.</span><span class="nx">currentUser</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">id</span> <span class="o">:</span> <span class="s2">&quot;&lt;%= current_user.id if current_user %&gt;&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>With <code>current_user.id</code> stored in an object attached to the window, making sure the Ajax call only gets made when a user is looking at his/her own profile page is simple:</p>

<figure class='code'><figcaption><span>app/assets/javascripts/live_notifications.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">currentUrl</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">href</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">userID</span> <span class="o">=</span> <span class="nx">currentUrl</span><span class="p">.</span><span class="nx">substr</span><span class="p">(</span><span class="nx">currentUrl</span><span class="p">.</span><span class="nx">lastIndexOf</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">currentUrl</span><span class="p">.</span><span class="nx">endsWith</span><span class="p">(</span><span class="s1">&#39;/users/&#39;</span> <span class="o">+</span> <span class="nb">window</span><span class="p">.</span><span class="nx">currentUser</span><span class="p">.</span><span class="nx">id</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">setInterval</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="p">...</span>
</span><span class='line'>        <span class="p">},</span> <span class="mi">3000</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>The Final Refactor: Only Refresh When things Have Changed</h2>

<p>To change only things that have changed, when they have changed, the ability to compare what&rsquo;s on the back end with what&rsquo;s on the front end is needed.</p>

<p>For this part, I needed to capture the state of all of a user&rsquo;s transactions and friendships (the two things for which there may be a notification), and hide this information on the page. I created a method in the <code>User</code> model that returns all of these states in an array, and put this into a hidden element on the page:</p>

<p><img class="center" src="http://roseweixel.github.io/images/hidden-tracker.png" width="600" height="600" title="image" alt="images"></p>

<p>Since the transactions could also have due dates, I did something similar for those.</p>

<p>The next step was to change the code in <code>app/views/users/live_notifications.js.erb</code> to check the current state of the user&rsquo;s transactions and friendships and see if the <code>#all-categories-tracker</code> is up to date:</p>

<figure class='code'><figcaption><span>app/views/users/live_notifications.js.erb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">previousInteractionStates</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#all-categories-tracker&#39;</span><span class="p">).</span><span class="nx">text</span><span class="p">();</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">currentInteractionStates</span> <span class="o">=</span> <span class="s2">&quot;&lt;%= @user.transactions_and_friendships_data_array %&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">countOrStatusChanged</span> <span class="o">=</span> <span class="nx">previousInteractionStates</span> <span class="o">!==</span> <span class="nx">currentInteractionStates</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">previousDueDates</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;.due-date&quot;</span><span class="p">),</span> <span class="kd">function</span><span class="p">(</span><span class="nx">val</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">$</span><span class="p">(</span><span class="nx">val</span><span class="p">).</span><span class="nx">text</span><span class="p">()</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">currentDueDates</span> <span class="o">=</span> <span class="s2">&quot;&lt;%= @user.due_date_list %&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">dueDatesChanged</span> <span class="o">=</span> <span class="nx">currentDueDates</span> <span class="o">!==</span> <span class="nx">previousDueDates</span><span class="p">.</span><span class="nx">toString</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">countOrStatusChanged</span> <span class="o">||</span> <span class="nx">dueDatesChanged</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// UPDATE THE &quot;MASTER TRACKER&quot;</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#all-categories-tracker&#39;</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="nx">currentInteractionStates</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// CHECK EACH INDIVIDUAL CATEGORY AND CHANGE ONLY WHAT’S NEEDED</span>
</span><span class='line'>    <span class="o">&lt;%</span> <span class="nx">notification_categories</span><span class="p">.</span><span class="nx">each</span> <span class="k">do</span> <span class="o">|</span><span class="nx">category</span><span class="o">|</span> <span class="o">%&gt;</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">currentCategory</span> <span class="o">=</span> <span class="s2">&quot;&lt;%= category %&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// DEAL WITH ANY CHANGES IN COUNT OR STATE</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">currentCategoryStates</span>  <span class="o">=</span> <span class="s2">&quot;&lt;%= @user.states(category) %&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">previousCategoryStates</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;.category-tracker#&quot;</span> <span class="o">+</span> <span class="nx">currentCategory</span><span class="p">).</span><span class="nx">html</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// if there&#39;s been a change for this category</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">currentCategoryStates</span> <span class="o">!==</span> <span class="nx">previousCategoryStates</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// Update the DOM accordingly</span>
</span><span class='line'>             <span class="err">…</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// DEAL WITH CHANGED DUE DATES FOR TRANSACTIONS</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">currentCategory</span> <span class="o">===</span> <span class="s1">&#39;active_requested_transactions&#39;</span> <span class="o">&amp;&amp;</span> <span class="nx">dueDatesChanged</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// Update the DOM accordingly</span>
</span><span class='line'>              <span class="err">…</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="o">&lt;%</span> <span class="nx">end</span> <span class="o">%&gt;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>With this final refactoring, checks are in place that stop the unnecessary refreshing that came with the first version:</p>

<p><img class="center" src="http://roseweixel.github.io/images/live-notifications-flow.png" width="600" height="600" title="image" alt="images"></p>

<h2>Alternatives</h2>

<p>The method I described above for achieving live notifications is very basic Ajax polling. Every serveral seconds, a request/response cycle fires. This inevitably means lots of database querying, even if the amount of refreshing can be reduced to a minimum. In my search for ways to reduce the burden this puts on the database, here are some other techniques I&rsquo;ve found that may offer some advantages:</p>

<p>1) Long Polling</p>

<p>With this technique, a request fires and waits for a change before sending a response. Then another request can be fired.</p>

<p>2) Web Sockets</p>

<p>Very different than Ajax polling or long polling, web sockets are used for continuous communication between server and client.</p>

<p>3) Server-Sent Events</p>

<p>Unlike web sockets which allows for continuous back and forth from server to client, this technique establishes a persistent connection that allows the server to send data to the client, but not the other way around.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Fog Creek Fellowship: A Bridge to Life After Flatiron, an Open Door for Women in Tech]]></title>
    <link href="http://roseweixel.github.io/blog/2015/03/04/the-fog-creek-fellowship-a-bridge-to-life-after-flatiron/"/>
    <updated>2015-03-04T20:44:39-05:00</updated>
    <id>http://roseweixel.github.io/blog/2015/03/04/the-fog-creek-fellowship-a-bridge-to-life-after-flatiron</id>
    <content type="html"><![CDATA[<p>After spending three months in a happy <a href="http://flatironschool.com/">Flatiron School</a> chrysalis transforming into a web developer, I graduated a little over two months ago feeling optimistic yet uncertain about the future. I was confident that Flatiron had equipped me to hit the ground ready to build, and had fostered in me a love and excitement for code that would keep me pushing forward no matter where I went next.</p>

<p>Then there was the uncertainty. After spending nine years, more than a quarter of my life, in the education field, I was about to embark on something totally unknown. Coming from a completely non-technical background, as most of my classmates also had, I wondered if I was a &ldquo;real&rdquo; developer and how I&rsquo;d fit in at a tech company.</p>

<p>Aside from the fact that I hadn&rsquo;t studied computer science and spent most of my life considering nearly every career path except one as a programmer, the knowledge that I&rsquo;d likely be the only (or one of the only) females in a team of developers at almost any company I ended up at made me wonder how I&rsquo;d feel at home in this new community.</p>

<p>I had almost forgotten about the <a href="http://fivethirtyeight.com/datalab/gender-balance-tech-new-york-beyond/">startling gender imbalance in tech</a> while I was at The Flatiron School. One thing that sets Flatiron apart from its competitors is that its gender ratio mirrors that of the natural world. In fact, my class was over 50% female, as is the current cohort of students. It&rsquo;s a place that felt instantly like home, where we all were just a bunch of humans who happened to be on a mission to learn how to code together. People have asked questions like &ldquo;how does Flatiron get all these women?&rdquo;. Although it may seem like an obvious thing to ask, maybe the question itself is indicative of part of the problem. Why not ask how the world of tech continues to be so skewed toward men?</p>

<p>These are tough questions to answer, but it&rsquo;s clear that The Flatiron School is doing a lot of things right. And, I&rsquo;m happy to say, some forward thinking companies in the world of tech are also stepping up to the challenge of facing and addressing the gender gap. Enter <a href="http://flatironschool.com/fogcreek/">The Fog Creek Fellowship</a>.</p>

<p>Thanks to a partnership with <a href="https://www.fogcreek.com/">Fog Creek</a>, <a href="https://trello.com/">Trello</a>, and <a href="http://stackexchange.com/">Stack Exchange</a>, nearly every one of my female classmates was able to get a jumpstart on their new coding careers with the mentorship of a senior developer who was willing to devote real time and interest in helping us through the transition. My mentor <a href="http://maxhorstmann.net/">Max Horstmann</a> exemplified this. When I got that exciting but nerve wracking first technical interview, he was there to do an in-depth whiteboarding session and provide truly constructive feedback. When I had questions about the difference between SQL and NoSQL, he was happy to explain it and discuss the pros and cons. In fact he and all the other mentors in the program were always happy to geek out about pretty much anything with me.</p>

<p>Perhaps most importantly, just like The Flatiron School teaches us to &ldquo;make no little plans,&rdquo; my mentor gave me the courage to dream big for my career, not just look for my next job. Should I feel entitled to love what I do for a living? Yes. Could my passion project become a startup one day? Totally possible. This was not just going to be a career change for me &ndash; this was a revolutionary mind shift.</p>

<p>Certainly, The Flatiron School and The Fog Creek Fellowship don&rsquo;t hold any magic answers to the daunting gender gap in tech. But the fact is, when we&rsquo;re faced with challenges that seem almost impossible to overcome, often the best thing to do is just to throw your hat over the wall and <em>do something</em>. At the end of one journey and the beginning of a much longer one, I&rsquo;m filled with gratitude and hope.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reading and Writing to Instance Variables in Ruby: Self., @, or Nothing?]]></title>
    <link href="http://roseweixel.github.io/blog/2015/02/13/reading-and-writing-to-instance-variables-in-ruby:-self.,-@,-or-Nothing%3F/"/>
    <updated>2015-02-13T14:03:10-05:00</updated>
    <id>http://roseweixel.github.io/blog/2015/02/13/reading-and-writing-to-instance-variables-in-ruby:-self.,-@,-or-Nothing?</id>
    <content type="html"><![CDATA[<p>Today marked the end of my second week as an instructor at The Flatiron School, where I graduated just about two months ago. While working with a student this morning, I realized I had been taking for granted a piece of knowledge that I learned in week two of my own semester.</p>

<p>When I first was learning about object orientation, one of the most confounding things for me was when to use @, self., or no prefix at all when dealing with instance variables in class definitions.</p>

<p>After several conversations with classmates and instructors, I thought I had it all straightened out. My table mates and I even wrote an &lsquo;Instance Variable Manifesto&rsquo; to make sure we&rsquo;d retain this enlightenment for all time. Today, I was grappling with the issue once again. It&rsquo;s funny how learning to program doesn&rsquo;t always happen in a straight line. The experience reminded me not to take for granted things I &ldquo;know&rdquo;, and to savor the moments of re-learning.</p>

<p>Here&rsquo;s the issue that led to my temporary existential crisis today (had I totally lost my grasp of object oriented programming, all knowledge of Ruby, and/or my mind entirely?):</p>

<ul>
<li>We have a class, <code>Shoe</code>.</li>
<li>It has an attribute, <code>condition</code>, with an <code>attr_accessor</code>.</li>
<li>It has a method, <code>cobble</code>, that sets a <code>Shoe</code>&rsquo;s condition to <code>"new"</code>.</li>
<li>The Rspec test first made a new instance of <code>Shoe</code> and then set its condition to <code>"old"</code>. Then, it had the expectation that the <code>condition</code> of the shoe will be equal to <code>"new"</code> after calling the <code>cobble</code> method.</li>
</ul>


<p>This is the code my student had:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Shoe</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:condition</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">cobble</span>
</span><span class='line'>    <span class="n">condition</span> <span class="o">=</span> <span class="s2">&quot;new&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>At first glance, the reason this code was not making the test pass eluded me. We put a <code>binding.pry</code> in the cobble method, and found that while <code>condition</code> was indeed set to <code>'new'</code>, the test was still failing. Wasn&rsquo;t <code>condition = "new"</code> just making a call to the <code>condition=</code> method provided by the attr_accessor? Apparently not.</p>

<p>In fact, as I later re-realized, <code>condition = "new"</code> was creating a local variable, <code>condition</code> with the value <code>"new"</code>, which has nothing to do with the value of <code>@condition</code>. I was able to come back to understanding this concept when I recalled that I had grappled with this very same thing almost exactly four months ago, when I was working on the exact same lab. I searched through the notes I had taken during those early Flatiron days and found the &ldquo;manifesto.&rdquo;</p>

<p>Four months later, here&rsquo;s my distilled version of it.</p>

<ul>
<li><p>Use <code>@</code> only in the initialize method or within a custom reader/writer method (this accesses the instance variable directly)</p></li>
<li><p>If you intend to ever read or write to an instance variable, build the appropriate reader/writer methods or use <code>attr_accessor</code>, <code>attr_writer</code>, or <code>attr_reader</code> as you deem appropriate. This allows you to delegate getting and setting your instance variables to methods rather than having to manipulate the variable directly.</p></li>
<li><p>When altering the value of an instance variable, use the writer method prefixed with <code>self.</code> <strong>Without giving the writer method an explicit receiver (<code>self</code>), the Ruby interpreter will assume you are setting a local variable rather than calling the writer method</strong> (this is what led to the bug in the code snippet above).</p></li>
<li><p>When simply reading the value of an instance variable, the reader method may be called with no prefix. The receiver of the reader method is implicitly <code>self</code>.</p></li>
</ul>


<p>Here&rsquo;s a code example to demonstrate usage of the previous guidelines:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Shoe</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:condition</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># we&#39;re initializing the attribute @condition, so we need to call the instance variable directly</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">condition</span><span class="o">=</span><span class="s2">&quot;new&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@condition</span> <span class="o">=</span> <span class="n">condition</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># we&#39;re changing the value of @condition, so we call the writer method, which needs to be called on self or else Ruby thinks we&#39;re just setting a local variable</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">wear</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">condition</span> <span class="o">=</span> <span class="s2">&quot;worn&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">cobble</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">condition</span> <span class="o">=</span> <span class="s2">&quot;new&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># we&#39;re just reading the value of @condition, so we can call the reader method (whose implicit receiver is self)</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">report_condition</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">condition</span> <span class="o">==</span> <span class="s2">&quot;new&quot;</span>
</span><span class='line'>      <span class="s2">&quot;This shoe is in perfect condition!&quot;</span>
</span><span class='line'>    <span class="k">elsif</span> <span class="n">condition</span> <span class="o">==</span> <span class="s2">&quot;worn&quot;</span>
</span><span class='line'>      <span class="s2">&quot;This shoe needs to be cobbled!&quot;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="s2">&quot;The condition of this shoe is </span><span class="si">#{</span><span class="n">condition</span><span class="si">}</span><span class="s2">.&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that you can also use <code>self.</code> when calling reader methods, and it sometimes feels semantically more natural to do so. Unlike using <code>@</code>, this still delegates responsibility to the reader method, exactly the same as calling the reader method with no <code>self.</code> prefix.</p>

<p>TL;DR</p>

<ul>
<li><p>Use <code>@</code> in the initialize or reader/writer methods.</p></li>
<li><p>It&rsquo;s better to delegate to reader and writer methods rather than accessing instance variables directly.</p></li>
<li><p>You cannot call a writer method without the explicit receiver, <code>self</code>. When Ruby sees the <code>=</code> (or <code>-=</code>, or <code>+=</code>), it assumes you are setting a local variable if no receiver is specified.</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making Friends (With Code)]]></title>
    <link href="http://roseweixel.github.io/blog/2014/12/04/making-friends-with-code/"/>
    <updated>2014-12-04T23:01:41-05:00</updated>
    <id>http://roseweixel.github.io/blog/2014/12/04/making-friends-with-code</id>
    <content type="html"><![CDATA[<p>This post will not be about how I&rsquo;ve spent the last ten weeks at <a href="http://flatironschool.com/">The Flatiron School</a> making awesome friends while coding together, or about my process of becoming friends with code. Those are posts for another time. This one is about the kinds of friendships that are actually built with code, the kind you can persist in a database.</p>

<p>Over the course of working on my two most recent projects, I&rsquo;ve discovered that there is more than one way to make a friendship happen on the backend of a Rails app (or most likely any app). My first crack at making friendships was for a <a href="https://lacquer-love-and-lend.herokuapp.com/">nail polish sharing app</a> where friends can view each other&rsquo;s collections and ask to borrow from each other. I watched Treehouse&rsquo;s tutorial on <a href="http://teamtreehouse.com/library/building-social-features-in-ruby-on-rails">building social features in Ruby on Rails</a>, which is a good place to start if you&rsquo;ve never done something like this before. Although it helped me understand it somewhat, the way it was done in the tutorial still seemed pretty complicated to me. I decided to try to figure it out on my own so that I could break it down and understand it better.</p>

<p>Here are the basic back-end requirements for creating a friendship (clearly some buttons and forms on the front-end are needed, but those are implementation details, so I&rsquo;ll leave them out of this post):</p>

<ul>
<li><p>You have to teach your models that some Users have relationships with other Users (a self-referential association).</p></li>
<li><p>You have to store that relationship in the database so that both sides of the relationship have knowledge of it and access to it.</p></li>
<li><p>You have to have a way of representing and keeping track of the state of the relationship at any given time (requested, accepted, etc.)</p></li>
</ul>


<p>Here&rsquo;s how I did it in my first go-around:</p>

<p>1) I created a join table, <code>friendships</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">CreateFriendships</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Migration</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">change</span>
</span><span class='line'>    <span class="n">create_table</span> <span class="ss">:friendships</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">integer</span> <span class="ss">:user_id</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">integer</span> <span class="ss">:friend_id</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">timestamps</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="c1"># it&#39;s a good idea to add an index for faster look-ups in the database</span>
</span><span class='line'>    <span class="n">add_index</span> <span class="ss">:friendships</span><span class="p">,</span> <span class="o">[</span><span class="ss">:user_id</span><span class="p">,</span> <span class="ss">:friend_id</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>2) In the model for Friendship, I taught it that Friends are really just other Users:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Friendship</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:user</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:friend</span><span class="p">,</span> <span class="ss">class_name</span><span class="p">:</span> <span class="s1">&#39;User&#39;</span><span class="p">,</span> <span class="ss">foreign_key</span><span class="p">:</span> <span class="s1">&#39;friend_id&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">validate</span> <span class="ss">:is_not_duplicate</span><span class="p">,</span> <span class="ss">:on</span> <span class="o">=&gt;</span> <span class="ss">:create</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">is_not_duplicate</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">!</span><span class="p">(</span><span class="no">Friendship</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">:friend_id</span> <span class="o">=&gt;</span> <span class="n">friend_id</span><span class="p">,</span> <span class="ss">:user_id</span> <span class="o">=&gt;</span> <span class="n">user_id</span><span class="p">)</span><span class="o">.</span><span class="n">empty?</span> <span class="o">&amp;&amp;</span> <span class="no">Friendship</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">:user_id</span> <span class="o">=&gt;</span> <span class="n">friend_id</span><span class="p">,</span> <span class="ss">:friend_id</span> <span class="o">=&gt;</span> <span class="n">user_id</span><span class="p">)</span><span class="o">.</span><span class="n">empty?</span><span class="p">)</span>
</span><span class='line'>      <span class="n">errors</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="ss">:friendship</span><span class="p">,</span> <span class="s2">&quot;This friendship already exists!&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see from the above, I decided I didn&rsquo;t want to allow &ldquo;duplicates&rdquo; of friendships in the database, but as it turns out there are reasons why you might not want to do it this way. I&rsquo;ll go into that later.</p>

<p>3) I made the User model aware of the Friendship model:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:friendships</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:friends</span><span class="p">,</span> <span class="ss">through</span><span class="p">:</span> <span class="ss">:friendships</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">validates</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">presence</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">uniqueness</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">accepted_friends</span>
</span><span class='line'>    <span class="n">accepted_friends</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>    <span class="no">Friendship</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">user_id</span><span class="p">:</span> <span class="nb">self</span><span class="o">.</span><span class="n">id</span><span class="p">,</span> <span class="ss">state</span><span class="p">:</span> <span class="s1">&#39;accepted&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">friendship</span><span class="o">|</span>
</span><span class='line'>      <span class="n">accepted_friends</span> <span class="o">&lt;&lt;</span> <span class="no">User</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">friendship</span><span class="o">.</span><span class="n">friend_id</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="no">Friendship</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">friend_id</span><span class="p">:</span> <span class="nb">self</span><span class="o">.</span><span class="n">id</span><span class="p">,</span> <span class="ss">state</span><span class="p">:</span> <span class="s1">&#39;accepted&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">friendship</span><span class="o">|</span>
</span><span class='line'>      <span class="n">accepted_friends</span> <span class="o">&lt;&lt;</span> <span class="no">User</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">friendship</span><span class="o">.</span><span class="n">user_id</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">accepted_friends</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">requested_friends_awaiting_approval</span>
</span><span class='line'>    <span class="n">pending_friends</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>    <span class="no">Friendship</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">user_id</span><span class="p">:</span> <span class="nb">self</span><span class="o">.</span><span class="n">id</span><span class="p">,</span> <span class="ss">state</span><span class="p">:</span> <span class="s1">&#39;pending&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">friendship</span><span class="o">|</span>
</span><span class='line'>      <span class="n">pending_friends</span> <span class="o">&lt;&lt;</span> <span class="no">User</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">friendship</span><span class="o">.</span><span class="n">friend_id</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">pending_friends</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">friendships_for_your_approval</span>
</span><span class='line'>    <span class="n">pending_friendships</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>    <span class="no">Friendship</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">friend_id</span><span class="p">:</span> <span class="nb">self</span><span class="o">.</span><span class="n">id</span><span class="p">,</span> <span class="ss">state</span><span class="p">:</span> <span class="s1">&#39;pending&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">friendship</span><span class="o">|</span>
</span><span class='line'>      <span class="n">pending_friendships</span> <span class="o">&lt;&lt;</span> <span class="n">friendship</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">pending_friendships</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">friends_for_your_approval</span>
</span><span class='line'>    <span class="n">pending_friends</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>    <span class="no">Friendship</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">friend_id</span><span class="p">:</span> <span class="nb">self</span><span class="o">.</span><span class="n">id</span><span class="p">,</span> <span class="ss">state</span><span class="p">:</span> <span class="s1">&#39;pending&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">friendship</span><span class="o">|</span>
</span><span class='line'>      <span class="n">friend</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">friendship</span><span class="o">.</span><span class="n">user_id</span><span class="p">)</span>
</span><span class='line'>      <span class="n">pending_friends</span> <span class="o">&lt;&lt;</span> <span class="n">friend</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">pending_friends</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">all_friends</span>
</span><span class='line'>    <span class="n">accepted_friends</span> <span class="o">+</span> <span class="n">requested_friends_awaiting_approval</span> <span class="o">+</span> <span class="n">friends_for_your_approval</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>You&rsquo;ll notice that I wrote a whole bunch of methods to tell Users how to find their friends on both sides of the relationship. I wanted to give users custom notifications in the views depending on whether they had a pending request or a request awaiting their approval, which was part of the reason for this. But even if I hadn&rsquo;t wanted to do that, I would have at least needed some kind of setup like this that makes multiple hits to the database every time someone wants to see all of their friends.</p>

<p>4) Finally, <code>state</code> is a big part of this model. I set it up so a friendship could have a state of <code>pending</code> or <code>accepted</code> (similar methods would create other states, like <code>rejected</code>). This is where the friendships controller comes in. For the sake of brevity, I&rsquo;ll just describe the <code>create</code> and <code>update</code> methods:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">FriendshipsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>    <span class="vi">@user</span> <span class="o">=</span> <span class="n">current_user</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">params</span><span class="o">[</span><span class="ss">:friendship</span><span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="n">params</span><span class="o">[</span><span class="ss">:friendship</span><span class="o">].</span><span class="n">has_key?</span><span class="p">(</span><span class="ss">:friend_id</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@friend</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:friendship</span><span class="o">][</span><span class="ss">:friend_id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@friendship</span> <span class="o">=</span> <span class="no">Friendship</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">friend</span><span class="p">:</span> <span class="vi">@friend</span><span class="p">,</span> <span class="ss">user</span><span class="p">:</span> <span class="vi">@user</span><span class="p">,</span> <span class="ss">state</span><span class="p">:</span> <span class="s1">&#39;pending&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@friendship</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>      <span class="n">flash</span><span class="o">[</span><span class="ss">:notice</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;Your friendship with </span><span class="si">#{</span><span class="vi">@friend</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2"> is pending.&quot;</span>
</span><span class='line'>      <span class="n">redirect_to</span><span class="p">(</span><span class="ss">:back</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">flash</span><span class="o">[</span><span class="ss">:notice</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;Friend required&quot;</span>
</span><span class='line'>      <span class="n">redirect_to</span> <span class="n">root_path</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">update</span>
</span><span class='line'>    <span class="vi">@friendship</span> <span class="o">=</span> <span class="no">Friendship</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@friendship</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="ss">state</span><span class="p">:</span> <span class="n">params</span><span class="o">[</span><span class="ss">:state</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="n">redirect_to</span><span class="p">(</span><span class="ss">:back</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since I&rsquo;ve made a column in the friendships table for <code>state</code>, I can set and update the value of that attribute so a Friendship can introspect on the state it is currently in (what if we could write a method for doing this in real life?).</p>

<p>I set the <code>state</code> of the friendship to <code>'pending'</code> whenever it first gets created. Then, when the User who was &ldquo;friended&rdquo; decides to hit the &lsquo;Accept&rsquo; button (or the &lsquo;Reject&rsquo; button as the case may be), the friendship can get updated accordingly.</p>

<p>So, although the implementation of friendships I ended up with in my first attempt has the functionality I wanted, but as I mentioned before, it&rsquo;s not the most efficient. While my reasoning was that it is not desirable to have two rows in the friendships join table for every relationship that gets created, this reasoning did not take into account the way databases work. Because I have to query twice (Who are the people I&rsquo;ve friended? Who are the people who have friended me?) every single time I want to access my friends, this is actually unneccesarily expensive. Since rows in a database are cheap, why worry about adding an extra row if it reduces the number of times you need to hit the database?</p>

<p>I got a second crack at this problem during my current project, an app for teachers that includes functionality for generating seating charts according to who works well together and who doesn&rsquo;t. Along with my teammates, we built Buddyships (and Enemyships, too!) in a more reciprocal way:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Enemyship</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:student</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:enemy</span><span class="p">,</span> <span class="ss">class_name</span><span class="p">:</span> <span class="s1">&#39;Student&#39;</span><span class="p">,</span> <span class="ss">foreign_key</span><span class="p">:</span> <span class="s1">&#39;enemy_id&#39;</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:course_section</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">after_create</span> <span class="ss">:inversify</span>
</span><span class='line'>  <span class="n">after_destroy</span> <span class="ss">:destroy_inverse</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">validates_uniqueness_of</span> <span class="ss">:student</span><span class="p">,</span> <span class="ss">:scope</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="ss">:enemy</span><span class="p">,</span> <span class="ss">:course_section_id</span><span class="o">]</span>
</span><span class='line'>  <span class="n">validates_uniqueness_of</span> <span class="ss">:enemy</span><span class="p">,</span> <span class="ss">:scope</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="ss">:student</span><span class="p">,</span> <span class="ss">:course_section_id</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">validate</span> <span class="ss">:cant_be_own_enemy</span><span class="p">,</span> <span class="ss">:cant_be_buddies_and_enemies</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">inversify</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">enemy</span><span class="o">.</span><span class="n">enemyships</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">:course_section_id</span> <span class="o">=&gt;</span> <span class="nb">self</span><span class="o">.</span><span class="n">course_section_id</span><span class="p">,</span> <span class="ss">:enemy_id</span> <span class="o">=&gt;</span> <span class="nb">self</span><span class="o">.</span><span class="n">student</span><span class="o">.</span><span class="n">id</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">destroy_inverse</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">inverse</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">enemy</span><span class="o">.</span><span class="n">enemyships</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">:enemy_id</span> <span class="o">=&gt;</span> <span class="nb">self</span><span class="o">.</span><span class="n">student</span><span class="o">.</span><span class="n">id</span><span class="p">,</span> <span class="ss">:course_section_id</span> <span class="o">=&gt;</span> <span class="nb">self</span><span class="o">.</span><span class="n">course_section_id</span><span class="p">)</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'>      <span class="n">inverse</span><span class="o">.</span><span class="n">destroy</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">cant_be_own_enemy</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">student_id</span> <span class="o">==</span> <span class="n">enemy_id</span>
</span><span class='line'>      <span class="n">errors</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="ss">:enemy_id</span><span class="p">,</span> <span class="s2">&quot;you can&#39;t be your own enemy! :(&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">cant_be_buddies_and_enemies</span>
</span><span class='line'>    <span class="k">if</span> <span class="no">Buddyship</span><span class="o">.</span><span class="n">find_by</span><span class="p">(</span><span class="ss">student_id</span><span class="p">:</span> <span class="n">student_id</span><span class="p">,</span> <span class="ss">buddy_id</span><span class="p">:</span> <span class="n">enemy_id</span><span class="p">,</span> <span class="ss">course_section_id</span><span class="p">:</span> <span class="n">course_section_id</span><span class="p">)</span>
</span><span class='line'>      <span class="n">errors</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="ss">:enemy_id</span><span class="p">,</span> <span class="s2">&quot;you can&#39;t be both buddies and enemies for the same class! :(&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this implementation, two rows in the join table are created for each relationship, using a method aptly called <code>inversify</code>.</p>

<p>Because of the reciprocal nature of the relationship created in this model, one database query (<code>student.enemyships</code>) is all it takes to find all potential Enemies. If you were only creating relationships, you&rsquo;d care about not writing to the database more than you needed to. But since, in general, we query for friendships way more frequently than we create them, we want to make sure the querying is as efficient as possible.</p>

<p>So, while one-way relationships are fine for a follower-followee type of relationship, if you want to create a reciprocal relationship in your next app, don&rsquo;t shy away from those extra rows in the database.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Awesome Programmer == Awesome Person]]></title>
    <link href="http://roseweixel.github.io/blog/2014/11/20/awesome-programmer-equals-equals-awesome-person/"/>
    <updated>2014-11-20T20:30:03-05:00</updated>
    <id>http://roseweixel.github.io/blog/2014/11/20/awesome-programmer-equals-equals-awesome-person</id>
    <content type="html"><![CDATA[<p>We&rsquo;re nearing the end of the amazing whirlwind that is week eight at <a href="http://www.flatironschool.com">The Flatiron School</a>. We&rsquo;ve bid farewell (at least for now) to lectures and labs, and have blasted off into project mode. No predetermined specs, no Ironboard green lights, just forty eager, fledgeling developers putting all of their ambition, grit, and new skills into building things.</p>

<p>In the midst of the whirlwind, <a href="http://obiefernandez.com/">Obie Fernandez</a>, author of <a href="http://www.amazon.com/Rails-Way-Addison-Wesley-Professional-Ruby/dp/0321944275">the &ldquo;bible&rdquo; for Rails development</a>, dropped by to chat with us today. It was inspiring to hear him talk about one of his latest endeavors, the <a href="http://www.andela.co/fellowship">Andela Fellowship</a>, which is a program whose mission is to train some of the brightest young people in Africa to be awesome developers and connect them with employers. Echoing the words of The Flatiron School&rsquo;s own Avi Flombaum, Obie told us that learning to be an awesome developer is not just about learning &ldquo;hard skills&rdquo;. It&rsquo;s about learning to be an awesome person. Furthermore, he said,</p>

<blockquote><p>&ldquo;Programming is a career that encourages awesomeness.&rdquo;</p></blockquote>

<p>Though it wasn&rsquo;t the first time I heard that message, it meant something more to me today than it did in week one, and the words sat quietly brewing in the back of my brain as I spent the evening coding with my teammates.</p>

<p>Does the act of learning to program make you a better person? I&rsquo;m not so sure of that, but I&rsquo;m sure that learning to be an awesome person makes you a better programmer. And while learning about nested hashes doesn&rsquo;t somehow magically make you an awesome person, I do believe that people who are continually striving and struggling to be great programmers will be nudged in the direction of awesomeness by the nature of the endeavor itself.</p>

<p>So, what is it about programming that encourages awesomeness?</p>

<ol>
<li><p>Communication and Empathy:</p>

<ul>
<li><p>No successful programmer works in isolation. I&rsquo;ve learned at The Flatiron School that while you might go faster alone you definitely go farther if you work together. Failure to listen and communicate effectively negatively affects the team, the workflow, and the product.</p></li>
<li><p>Code is for communication. It&rsquo;s not just a set of instructions for a computer. When it&rsquo;s done right, code tells a story that other developers can understand and build upon.
<br /></p></li>
</ul>
</li>
<li><p>Caring About The Small Things:</p>

<ul>
<li>In order for your code to work, you have to get the details right. Getting the details right requires patience, mindfulness, and taking pride in one&rsquo;s work.<br/>
<br /></li>
</ul>
</li>
<li><p>Going With The Flow:</p>

<ul>
<li>A program is never done. A good programmer is willing to let go and accept changes, be willing to start from scratch, and be open to going in new directions and taking new approaches.<br/>
<br/></li>
</ul>
</li>
<li><p>Grit:</p>

<ul>
<li>Starting to learn to program is hard. Keeping on learning to program while it&rsquo;s hard takes grit.<br/>
<br /></li>
</ul>
</li>
<li><p>Being a Lifelong Learner:</p>

<ul>
<li>Technology never stops evolving, and neither do awesome programmers. If you want to love your career in programming, you&rsquo;ve got to love learning first.</li>
</ul>
</li>
</ol>


<p>Before I end this post, let me be clear that by no means do I believe any of the above qualities are unique to the set of people known as &ldquo;programmers&rdquo;. In fact, anyone can learn to program. More importantly though, anyone can learn the skills it takes to be an awesome person. I&rsquo;m just really happy to find that learning both of these in parellel go so nicely hand in hand.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript: The Honey Badger of Programming Languages]]></title>
    <link href="http://roseweixel.github.io/blog/2014/11/15/javascript-the-honey-badger-of-programming-languages/"/>
    <updated>2014-11-15T17:49:20-05:00</updated>
    <id>http://roseweixel.github.io/blog/2014/11/15/javascript-the-honey-badger-of-programming-languages</id>
    <content type="html"><![CDATA[<p>After spending six weeks in Ruby land, last week was all JavaScript all the time at <a href="http://www.flatironschool.com">The Flatiron School</a>. I feel like I&rsquo;ve just added a hammer with superpowers to my programming tool box. You might bend a few nails along the way, but you can build almost anything with it.</p>

<p>Also, JavaScript is weird. Although it cares a lot about semi-colons, there are some important ways in which, just like the honey badger, it just doesn&rsquo;t seem to care at all. Here I will attempt to get comfortable with this strange new animal by diving deep into some of its more surprising aspects. To provide some contrast and context, especially for those who (like myself) are more at home with Ruby, I&rsquo;ll make some comparisons as I go along.</p>

<h2>Scope</h2>

<p>Let&rsquo;s dive right in. For comparison, here is some Ruby:</p>

<figure class='code'><figcaption><span>javascript-ruby-comparison/ruby.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">dog</span> <span class="o">=</span> <span class="s1">&#39;Fido&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">bark</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">dog</span><span class="si">}</span><span class="s2"> says woof&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">bark</span>
</span></code></pre></td></tr></table></div></figure>


<p>In Ruby, a method is a scope gate, so <code>dog</code> is not defined in the <code>bark</code> method. Ruby will tell you this in no uncertain terms:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">[18:12:24] javascript-ruby-comparison</span>
</span><span class='line'><span class="go">♥ ruby ruby.rb</span>
</span><span class='line'><span class="go">ruby.rb:4:in `bark&#39;: undefined local variable or method `dog&#39; for main:Object (NameError)</span>
</span><span class='line'><span class="go"> from ruby.rb:7:in `&lt;main&gt;&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>On line 4, Ruby has no idea about what <code>dog</code> is, because the universe in line 4 is the local scope of the method <code>bark</code>. This scope gate can be very nice, since it means we cannot accidentally overwrite a variable we defined in the global scope from within a method. In order to make <code>dog</code> into a global variable that we can access inside the method, Ruby requires us to be very explicit about it, putting a <code>$</code> in front of that variable both where it is defined and wherever it is referenced:</p>

<figure class='code'><figcaption><span>javascript-ruby-comparison/ruby.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vg">$dog</span> <span class="o">=</span> <span class="s1">&#39;Fido&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">bark</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="vg">$dog</span><span class="si">}</span><span class="s2"> says woof&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">bark</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we clearly see that we are playing with a global variable, and Ruby plays along:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">[18:32:01] javascript-ruby-comparison</span>
</span><span class='line'><span class="go">♥ ruby ruby.rb</span>
</span><span class='line'><span class="go">Fido says woof</span>
</span></code></pre></td></tr></table></div></figure>


<p>While JavaScript does have a concept of functions creating a new scope, variables assigned outside of those functions can easily be accessed from within:</p>

<figure class='code'><figcaption><span>javascript-ruby-comparison/javascript.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">dog</span> <span class="o">=</span> <span class="s1">&#39;Fido&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">bark</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">dog</span> <span class="o">+</span> <span class="s1">&#39; says woof&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">bark</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>JavaScript doesn&rsquo;t care if you want to reach outside the function&rsquo;s scope to grab a variable. JavaScript functions have knowledge of the universe around them:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">[18:38:34] javascript-ruby-comparison</span>
</span><span class='line'><span class="go">♥ jsc javascript.js </span>
</span><span class='line'><span class="go">--&gt; Fido says woof</span>
</span></code></pre></td></tr></table></div></figure>


<p>So what else can you do with a variable defined outside a function from within a function? As it turns out, JavaScript will let you do whatever you want:</p>

<figure class='code'><figcaption><span>javascript-ruby-comparison/javascript.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">dog</span> <span class="o">=</span> <span class="s1">&#39;Fido&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">bark</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">dog</span> <span class="o">=</span> <span class="s1">&#39;Spot&#39;</span>
</span><span class='line'>  <span class="nx">debug</span><span class="p">(</span><span class="nx">dog</span> <span class="o">+</span> <span class="s1">&#39; says woof from within the function&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">debug</span><span class="p">(</span><span class="nx">dog</span> <span class="o">+</span> <span class="s1">&#39; says woof outside of the function&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">bark</span><span class="p">();</span>
</span><span class='line'><span class="nx">debug</span><span class="p">(</span><span class="nx">dog</span> <span class="o">+</span> <span class="s1">&#39; says woof after the function is called&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>What happened to Fido?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">[20:47:14] javascript-ruby-comparison</span>
</span><span class='line'><span class="go">♥ jsc javascript.js </span>
</span><span class='line'><span class="go">--&gt; Fido says woof outside of the function</span>
</span><span class='line'><span class="go">--&gt; Spot says woof from within the function</span>
</span><span class='line'><span class="go">--&gt; Spot says woof after the function is called</span>
</span></code></pre></td></tr></table></div></figure>


<p>Looks like the name change was permanent. And by the way, by always using <code>var</code>, we can prevent such dangers:</p>

<figure class='code'><figcaption><span>javascript-ruby-comparison/javascript.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">dog</span> <span class="o">=</span> <span class="s1">&#39;Fido&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">bark</span><span class="p">(){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">dog</span> <span class="o">=</span> <span class="s1">&#39;Spot&#39;</span>
</span><span class='line'>  <span class="nx">debug</span><span class="p">(</span><span class="nx">dog</span> <span class="o">+</span> <span class="s1">&#39; says woof from within the function&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">debug</span><span class="p">(</span><span class="nx">dog</span> <span class="o">+</span> <span class="s1">&#39; says woof outside of the function&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">bark</span><span class="p">();</span>
</span><span class='line'><span class="nx">debug</span><span class="p">(</span><span class="nx">dog</span> <span class="o">+</span> <span class="s1">&#39; says woof after the function is called&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">♥ jsc javascript.js </span>
</span><span class='line'><span class="go">--&gt; Fido says woof outside of the function</span>
</span><span class='line'><span class="go">--&gt; Spot says woof from within the function</span>
</span><span class='line'><span class="go">--&gt; Fido says woof after the function is called</span>
</span></code></pre></td></tr></table></div></figure>


<p>By using <code>var</code> within the function, we created an entirely different <code>dog</code> and did not alter the original.</p>

<h2>Arity Schmarity</h2>

<p>Before we go any further, I must admit that hadn&rsquo;t heard the word arity until I crossed paths with JavaScript. I reckon I&rsquo;m not alone in this, so here&rsquo;s a definition courtesy of <a href="http://en.wikipedia.org/wiki/Arity">Wikipedia</a>:</p>

<blockquote><p>In logic, mathematics, and computer science, the <strong>arity</strong> of a function or operation is the number of arguments or operands the function or operation accepts.</p></blockquote>

<p>OK. This sounds like something I know from Ruby land. Here&rsquo;s a familiar example:</p>

<figure class='code'><figcaption><span>javascript-ruby-comparison/ruby.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Dog</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>According to the above definition, the <code>initialize</code> method of the <code>Dog</code> class takes exactly one argument. You could say its arity is one (more commonly, this is known as a unary function).</p>

<p>Ruby cares about arity, and will give you very nice error messages to make you aware of this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">2.1.2 :002 &gt; require &#39;ruby.rb&#39;</span>
</span><span class='line'><span class="go"> =&gt; true </span>
</span><span class='line'><span class="go">2.1.2 :003 &gt; fido = Dog.new</span>
</span><span class='line'><span class="go">ArgumentError: wrong number of arguments (0 for 1)</span>
</span><span class='line'><span class="go"> from /Users/rose/Development/code/javascript-ruby-comparison/ruby.rb:3:in `initialize&#39;</span>
</span><span class='line'><span class="go"> from (irb):3:in `new&#39;</span>
</span><span class='line'><span class="go"> from (irb):3</span>
</span><span class='line'><span class="go"> from /Users/rose/.rvm/rubies/ruby-2.1.2/bin/irb:11:in `&lt;main&gt;&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>I tried to make a new <code>Dog</code> with 0 arguments, and Ruby was expecting 1. So Ruby blew up. This is arity checking at work.</p>

<p>JavaScript does not care about arity! Here&rsquo;s photographic proof (this is a lot easier to see in the browser&rsquo;s JavaScript console):</p>

<p><img class="center" src="http://roseweixel.github.io/images/js-no-arity-checking.png" width="700" height="700" title="image" alt="images"></p>

<p>To review what just happened:</p>

<ul>
<li>I made a constructor function for <code>Dog</code> (yeah, functions are really all-purpose in JavaScript, so that right there was a class definition of sorts).</li>
<li>In this constructor function, I said that <code>Dog</code> takes a <code>name</code>.</li>
<li>I made a new <code>Dog</code>, <code>fido</code>, and did not pass in any arguments.</li>
<li>JavaScript did not blow up.</li>
<li>Just to be sure, I asked JavaScript to show me <code>fido</code>.</li>
<li>JavaScript returned a <code>Dog</code> object with a <code>name</code> of <code>undefined</code>.</li>
</ul>


<p>Whenever it can, JavaScript will try to help you out, whether you want it to or not. If you say a <code>Dog</code> has a <code>name</code> and then forget to give it one, JavaScript will trust that this was your intent and will throw in an <code>undefined</code> rather than yelling at you.</p>

<h2>Teaching Old Dogs New Tricks</h2>

<p>Ruby cares about defining an object&rsquo;s attributes and behaviors up front. Objects in Ruby behave in consistent and predicatable ways.</p>

<p>Using our prior definition of the <code>Dog</code> class, Ruby will let us know that we haven&rsquo;t taught <code>Dog</code>s to bark yet:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">2.1.2 :001 &gt; require &#39;ruby.rb&#39;</span>
</span><span class='line'><span class="go"> =&gt; true </span>
</span><span class='line'><span class="go">2.1.2 :002 &gt; fido = Dog.new(&#39;Fido&#39;)</span>
</span><span class='line'><span class="go"> =&gt; #&lt;Dog:0x007f9fd5757c78 @name=&quot;Fido&quot;&gt; </span>
</span><span class='line'><span class="go">2.1.2 :003 &gt; fido.bark</span>
</span><span class='line'><span class="go">NoMethodError: undefined method `bark&#39; for #&lt;Dog:0x007f9fd5757c78 @name=&quot;Fido&quot;&gt;</span>
</span><span class='line'><span class="go"> from (irb):3</span>
</span><span class='line'><span class="go"> from /Users/rose/.rvm/rubies/ruby-2.1.2/bin/irb:11:in `&lt;main&gt;&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Of course! We did not define a <code>bark</code> method, so we get a predictable <code>NoMethodError</code>.</p>

<p>JavaScript doesn&rsquo;t care about defining all of an object&rsquo;s attributes and behaviors up front, and pretty much lets you do whatever you want, whenever you want. Here&rsquo;s a continuation of the console session above:</p>

<p><img class="center" src="http://roseweixel.github.io/images/js-fido-barks.png" width="700" height="700" title="image" alt="images"></p>

<ul>
<li>I asked <code>fido</code> to bark, having never defined a <code>bark</code> function or attribute. JavaScript quietly returned <code>undefined</code>.</li>
<li>I told JavaScript to give <code>fido.bark</code> the value of <code>'woof'</code>, and JavaScript happily obliged.</li>
<li>Now not only can <code>fido</code> bark, but the <code>Dog</code> object that is <code>fido</code> has been fundamentally altered, now containing a new <code>bark</code> attribute!</li>
</ul>


<p>So, can all <code>Dog</code>s bark now?</p>

<p><img class="center" src="http://roseweixel.github.io/images/js-spot-cant-bark.png" width="700" height="700" title="image" alt="images"></p>

<p>No, they cannot. Now the definition of <code>Dog</code> is a bit of a mess - <code>fido</code> is a <code>Dog</code> that can bark, while <code>spot</code> can&rsquo;t. The very nature of <code>Dog</code>-ness has been brought into question, and JavaScript is fine with all of this. No errors, no complaining. For better or for worse.</p>

<h2>Playing with Global Scope</h2>

<p>This one is extra weird, so get ready.</p>

<p>In the hierarchy of Ruby objects, <code>main</code> is the top level:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">♥ irb</span>
</span><span class='line'><span class="go">2.1.2 :001 &gt; self</span>
</span><span class='line'><span class="go"> =&gt; main </span>
</span><span class='line'><span class="go">2.1.2 :002 &gt; self.class</span>
</span><span class='line'><span class="go"> =&gt; Object </span>
</span><span class='line'><span class="go">2.1.2 :003 &gt; </span>
</span></code></pre></td></tr></table></div></figure>


<p>I don&rsquo;t know why you&rsquo;d want to mess with <code>main</code>, and Ruby makes certain it&rsquo;s not easy to do so (in fact, it&rsquo;s impossible to do so by accident):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">2.1.2 :003 &gt; self.name</span>
</span><span class='line'><span class="go">NoMethodError: undefined method `name&#39; for main:Object</span>
</span><span class='line'><span class="go"> from (irb):3</span>
</span><span class='line'><span class="go"> from /Users/rose/.rvm/rubies/ruby-2.1.2/bin/irb:11:in `&lt;main&gt;&#39;</span>
</span><span class='line'><span class="go">2.1.2 :004 &gt; self.name = &quot;Rose&quot;</span>
</span><span class='line'><span class="go">NoMethodError: undefined method `name=&#39; for main:Object</span>
</span><span class='line'><span class="go"> from (irb):4</span>
</span><span class='line'><span class="go"> from /Users/rose/.rvm/rubies/ruby-2.1.2/bin/irb:11:in `&lt;main&gt;&#39;</span>
</span><span class='line'><span class="go">2.1.2 :005 &gt; </span>
</span></code></pre></td></tr></table></div></figure>


<p>Want to mess with the top-level object in JavaScript? Go right ahead, JavaScript doesn&rsquo;t care!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">&gt;</span>&gt;&gt; this.name
</span><span class='line'><span class="go">undefined</span>
</span><span class='line'><span class="gp">&gt;</span>&gt;&gt; this.name <span class="o">=</span> <span class="s2">&quot;Rose&quot;</span>
</span><span class='line'><span class="go">Rose</span>
</span><span class='line'><span class="gp">&gt;</span>&gt;&gt; this
</span><span class='line'><span class="go">[object global]</span>
</span><span class='line'><span class="gp">&gt;</span>&gt;&gt; this.name
</span><span class='line'><span class="go">Rose</span>
</span><span class='line'><span class="gp">&gt;</span>&gt;&gt;
</span></code></pre></td></tr></table></div></figure>


<p>I just named the global object after myself, and JavaScript did not care one bit. This example is a bit contrived, but believe me that some undesireable things can happen if you don&rsquo;t watch out for global assignment. Here&rsquo;s a (slightly) less contrived example:</p>

<figure class='code'><figcaption><span>javascript-ruby-comparison/javascript.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">Dog</span><span class="p">(</span><span class="nx">name</span><span class="p">){</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">hunger</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">bowl</span> <span class="o">=</span> <span class="s1">&#39;full&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Dog</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">checkNeeds</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">hunger</span> <span class="o">===</span> <span class="kc">true</span><span class="p">){</span>
</span><span class='line'>        <span class="p">(</span><span class="kd">function</span> <span class="nx">feed</span><span class="p">(){</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">hunger</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">bowl</span> <span class="o">=</span> <span class="s1">&#39;empty&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">})();</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">(</span><span class="kd">function</span> <span class="nx">play</span><span class="p">(){</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">hunger</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>        <span class="p">})();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">fido</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Dog</span><span class="p">(</span><span class="s1">&#39;Fido&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">debug</span><span class="p">(</span><span class="nx">fido</span><span class="p">.</span><span class="nx">hunger</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">fido</span><span class="p">.</span><span class="nx">checkNeeds</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">debug</span><span class="p">(</span><span class="nx">fido</span><span class="p">.</span><span class="nx">hunger</span><span class="p">);</span>
</span><span class='line'><span class="nx">debug</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">hunger</span><span class="p">);</span>
</span><span class='line'><span class="nx">debug</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>If I run this code, here&rsquo;s what my <code>debug</code> statements reveal:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">♥ jsc javascript.js </span>
</span><span class='line'><span class="go">--&gt; true          // fido was born hungry</span>
</span><span class='line'><span class="go">--&gt; true          // after calling checkNeeds(), he&#39;s still hungry...</span>
</span><span class='line'><span class="go">--&gt; false         // ...but this isn&#39;t hungry...</span>
</span><span class='line'><span class="go">--&gt; [object global]   // because we fed the global object instead of fido!</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, Bad Things can happen when the global object is always available. Fortunately, there is a way for you to make JavaScript care about this! You just have to tell JavaScript to <code>use strict</code>.</p>

<figure class='code'><figcaption><span>javascript-ruby-comparison/javascript.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="s1">&#39;use strict&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">Dog</span><span class="p">(</span><span class="nx">name</span><span class="p">){</span>
</span><span class='line'>  <span class="c1">// the rest of my code...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, when we run the code, JavaScript will blow up just the way we want it to!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">♥ jsc javascript.js </span>
</span><span class='line'><span class="go">--&gt; true</span>
</span><span class='line'><span class="go">Exception: TypeError: Attempted to assign to readonly property.</span>
</span><span class='line'><span class="go">feed@javascript.js:12:17</span>
</span><span class='line'><span class="go">checkNeeds@javascript.js:14:11</span>
</span><span class='line'><span class="go">global code@javascript.js:24:16</span>
</span></code></pre></td></tr></table></div></figure>


<h2>The Moral of the Story</h2>

<p>This was a long post, and it probably could get longer. But I think this is enough to chew on for now. The bottom line is that JavaScript has some crazy ways, but these ways are not unlearnable, and the reward for learning them is a much saner coding experience. If you understand the quirks, remember your <code>var</code>s, and always <code>use strict</code>, you and JavaScript can be unstoppable, just like the honey badger.</p>

<p><img class="center" src="http://roseweixel.github.io/images/nothing-stops-honey-badger.png" width="500" height="500" title="image" alt="images"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flash Messages With Sessions in Sinatra]]></title>
    <link href="http://roseweixel.github.io/blog/2014/10/28/flash-messages-with-sessions-in-sinatra/"/>
    <updated>2014-10-28T23:18:15-04:00</updated>
    <id>http://roseweixel.github.io/blog/2014/10/28/flash-messages-with-sessions-in-sinatra</id>
    <content type="html"><![CDATA[<p><a href="http://www.sinatrarb.com/">Sinatra</a> is a DSL (domain specific language) for building small dynamic web apps with all the beauty of Ruby and without the bulk of Rails. Recently, my <a href="http://www.flatironschool.com">Flatiron School</a> classmates and I built a simple playlist app that allows users to perform all the basic CRUD operations on songs - you can create, retrieve, update, and destroy them. Emulating <a href="http://guides.rubyonrails.org/routing.html#crud-verbs-and-actions">RESTful routes for these actions (à la Rails)</a>, I created something like the following:</p>

<figure class='code'><figcaption><span>app/controllers/songs_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">SongsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">get</span> <span class="s1">&#39;/songs&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="vi">@songs</span> <span class="o">=</span> <span class="no">Song</span><span class="o">.</span><span class="n">all</span>
</span><span class='line'>    <span class="n">erb</span> <span class="ss">:&quot;songs/index&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">get</span> <span class="s1">&#39;/songs/new&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">erb</span> <span class="ss">:&quot;songs/new&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">post</span> <span class="s1">&#39;/songs&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="vi">@song</span> <span class="o">=</span> <span class="no">Song</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:song</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="n">redirect</span> <span class="ss">:&quot;/songs/</span><span class="si">#{</span><span class="vi">@song</span><span class="o">.</span><span class="n">id</span><span class="si">}</span><span class="ss">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">get</span> <span class="s1">&#39;/songs/:id&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="vi">@song</span> <span class="o">=</span> <span class="no">Song</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="n">erb</span> <span class="ss">:&quot;songs/show&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">get</span> <span class="s1">&#39;/songs/:id/edit&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="vi">@song</span> <span class="o">=</span> <span class="no">Song</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="n">erb</span> <span class="ss">:&quot;songs/edit&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">post</span> <span class="s1">&#39;/songs/:id&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="vi">@song</span> <span class="o">=</span> <span class="no">Song</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@song</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:song</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="n">redirect</span> <span class="ss">:&quot;/songs/</span><span class="si">#{</span><span class="vi">@song</span><span class="o">.</span><span class="n">id</span><span class="si">}</span><span class="ss">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>With the corresponding models and views that make these routes real, a working web app was born. Pretty darn cool. But there was a feature in the spec that was still left to add, and it became a bit of a challenge:</p>

<p>Whenever a song is created or updated, the user should see a message like this:</p>

<p><img class="center" src="http://roseweixel.github.io/images/song_success_message.png" width="700" height="700" title="image" alt="images"></p>

<p>Here&rsquo;s what I wanted to achieve:</p>

<ul>
<li>The user fills out the form at <code>songs/new</code> and clicks &lsquo;Submit&rsquo;.</li>
<li>The newly created song&rsquo;s show page at <code>songs/:id</code> is rendered with a success message.</li>
<li>The user reloads the page (or navagates away and back), and *poof* the success message is gone.</li>
</ul>


<p>In order to get this to work, I would have to somehow pass a message from one action in the controller to another. The create (or update) action would have to pass a message along to the show action which would pass this message along to the view. It would be nice to have something like an envelope called <code>success_message</code> that could hold one of three values at any given time:</p>

<ul>
<li><code>"Successfully created song."</code> (right after the song is created)</li>
<li><code>"Successfully updated song."</code> (right after the song is updated)</li>
<li><code>nil</code> (immediately after the success message is rendered in the view)</li>
</ul>


<p><a name="erb"></a>
According to this vision, I was able to put some yet-to-be-functional code in <code>songs/show.erb</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="x">&lt;!-- this bit of code at the bottom of the page would reveal the contents of the success message if it isn&#39;t nil --&gt;</span>
</span><span class='line'><span class="cp">&lt;%</span> <span class="k">if</span> <span class="vi">@success_message</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  &lt;div id=&quot;success&quot; style=&quot;border: 2px solid green;&quot;&gt;</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%=</span> <span class="vi">@success_message</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  &lt;/div&gt;</span>
</span><span class='line'><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>But how would <code>@success_message</code>, which would have to be definied in the show action in order for the show page to know about it, be able to hold a message the was created in another controller action (create or update)?</p>

<p>I knew that <code>params</code> is one such data object that holds values that can be passed from one action to another, but as it is already the envelope for carrying and delivering form data entered by the user, it didn&rsquo;t seem like the right place for a success message to live. If only there was some other vessel, like params, but not&hellip;</p>

<p><a name="first_step"></a>
There is. It&rsquo;s a session! It becomes available to you as soon as you put this in your application controller:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ApplicationController</span> <span class="o">&lt;</span> <span class="no">Sinatra</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="c1"># add this line to enable the magic</span>
</span><span class='line'>  <span class="n">enable</span> <span class="ss">:sessions</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once you&rsquo;ve added that, you get this handy little object called <code>session</code> that you can access in any of your controllers, which can in turn pass along any value it contains to a view.  Just to see what it looked like before doing anything with it, I put a <code>binding.pry</code> inside my index action in <code>songs_controller.rb</code>, fired off <code>shotgun</code>, and loaded the index page on my local server. Here&rsquo;s what pry spat out when I asked it what <code>session</code> was:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="go">[1] pry(#&lt;SongsController&gt;)&gt; session</span>
</span><span class='line'><span class="go">=&gt; {&quot;session_id&quot;=&gt;&quot;857d0d856ee646d76204c1138cf57fc497f80ffd85fef19befdbb26f60f8e022&quot;, &quot;csrf&quot;=&gt;&quot;598119612cef0d88134413ddd54bad52&quot;, &quot;tracking&quot;=&gt;{&quot;HTTP_USER_AGENT&quot;=&gt;&quot;7be1a42d74a413474898ddb9adfef9a5a84719e3&quot;, &quot;HTTP_ACCEPT_LANGUAGE&quot;=&gt;&quot;66eae971492938c2dcc2fb1ddc8d7ec3196037da&quot;}}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here it is again, split up onto several lines for readability:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;session_id&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;857d0d856ee646d76204c1138cf57fc497f80ffd85fef19befdbb26f60f8e022&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;csrf&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;598119612cef0d88134413ddd54bad52&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;tracking&quot;</span><span class="o">=&gt;</span><span class="p">{</span>
</span><span class='line'>      <span class="s2">&quot;HTTP_USER_AGENT&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;7be1a42d74a413474898ddb9adfef9a5a84719e3&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;HTTP_ACCEPT_LANGUAGE&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;66eae971492938c2dcc2fb1ddc8d7ec3196037da&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So that&rsquo;s our session object, before we&rsquo;ve done anything with it. Inside it there&rsquo;s <code>"session_id"</code>, a unique key that lives inside your cookie for the life of your session. What else is in there? Having just learned about preventing cross-site request forgery, I presumed <code>"csrf"=&gt;"598119612cef0d88134413ddd54bad52"</code> to be the CSRF token. If you want to learn more about this (and you should!), read about it <a href="http://guides.rubyonrails.org/security.html">here</a>. Finally there&rsquo;s <code>"tracking"</code>, which I believe holds information about the user&rsquo;s browser. For our current purposes (creating a flash message), we don&rsquo;t need to care about these values, but it helps to see how session is structured and what kinds of things it can contain.</p>

<p>Let&rsquo;s move on and see how we can use this session object to help us with our success message.</p>

<p>Before doing anything to it, it would help to understand what kind of object <code>session</code> is. It looks like an ordinary Ruby hash, but in fact it is a special kind of Rack object. Why guess when you can <code>pry</code> it?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="go">[2] pry(#&lt;SongsController&gt;)&gt; session.class</span>
</span><span class='line'><span class="go">=&gt; Rack::Session::Abstract::SessionHash</span>
</span></code></pre></td></tr></table></div></figure>


<p>As it turns out, the <code>SessionHash</code> object has a lot in common with a <code>Hash</code> object. 103 methods in common (out of 177 total), to be exact:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="go">[3] pry(#&lt;SongsController&gt;)&gt; session.methods.select{ |method| Hash.methods.include?(method) }.count</span>
</span><span class='line'><span class="go">=&gt; 103</span>
</span></code></pre></td></tr></table></div></figure>


<p>One hash-like thing you can do with <code>session</code> is put new keys into it, with values that you can assign and change at your whim. And since the session persists from one HTTP request to another, it can pass values around from one action in the controller to another. This sounded like just the right object to hold the success message!</p>

<p>Here&rsquo;s what I did (after enabling sessions, as shown <a href="#first_step">above</a>):</p>

<p>1) At the bottom of my create action (immediately before redirecting to the show page), I added a <code>:success_message</code> key to <code>session</code>, setting its value to the one-time message I want my users to see:</p>

<figure class='code'><figcaption><span>songs_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">post</span> <span class="s1">&#39;/songs&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="vi">@song</span> <span class="o">=</span> <span class="no">Song</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:song</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">session</span><span class="o">[</span><span class="ss">:success_message</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;Successfully created song.&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">redirect</span> <span class="ss">:&quot;/songs/</span><span class="si">#{</span><span class="vi">@song</span><span class="o">.</span><span class="n">id</span><span class="si">}</span><span class="ss">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>2) I did the same thing for my update action:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">post</span> <span class="s1">&#39;/songs/:id&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="vi">@song</span> <span class="o">=</span> <span class="no">Song</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@song</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:song</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">session</span><span class="o">[</span><span class="ss">:success_message</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;Song successfully updated.&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">redirect</span> <span class="ss">:&quot;/songs/</span><span class="si">#{</span><span class="vi">@song</span><span class="o">.</span><span class="n">id</span><span class="si">}</span><span class="ss">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>3) Then, I added some code at the top of the show action to pass this message along so it could be rendered by the <a href="#erb">erb template</a> in the view, and to ensure that the message is immediately set to <code>nil</code> so it will only render once:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">get</span> <span class="s1">&#39;/songs/:id&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="vi">@song</span> <span class="o">=</span> <span class="no">Song</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="vi">@success_message</span> <span class="o">=</span> <span class="n">session</span><span class="o">[</span><span class="ss">:success_message</span><span class="o">]</span>
</span><span class='line'>    <span class="n">session</span><span class="o">[</span><span class="ss">:success_message</span><span class="o">]</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">erb</span> <span class="ss">:&#39;songs/show&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now my success message behaves exactly as I imaged it should, appearing and disappearing at the appropriate times.</p>

<p>Due to the stateless nature of HTTP requests, had I simply used an instance variable <code>@success_message</code> inside these <code>get</code> and <code>post</code> actions, any value assigned to it would have been instantly forgotten the moment another request was made. The <code>@success_message</code> inside the two actions would have in fact been completely out of each other&rsquo;s scope. The session, however, is available across all actions.</p>

<p>This ability to fake statefulness in your controllers opens up a world of functionality other than flash messages, not the least of which is maintaining a user&rsquo;s &ldquo;logged in&rdquo; state as they browse from one page to another. Without sessions, almost all of the interactions and transactions that occur over the Internet as we know it could not even happen.</p>

<p>So if you haven&rsquo;t yet, sit down and get to know the powerful little session. It&rsquo;s definitely worth prying into.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Join Tables in ActiveRecord: Complex Associations, Simple Code]]></title>
    <link href="http://roseweixel.github.io/blog/2014/10/22/join-tables-in-active-record/"/>
    <updated>2014-10-22T21:38:48-04:00</updated>
    <id>http://roseweixel.github.io/blog/2014/10/22/join-tables-in-active-record</id>
    <content type="html"><![CDATA[<p>Up until a few weeks ago, my entire coding toolbox consisted of a small sample of some built in Ruby methods. Two of these became blog post topics (<a href="http://roseweixel.github.io/blog/2014/10/08/looking-for-something-just-number-find-it/">#find</a> and <a href="http://roseweixel.github.io/blog/2014/10/07/cheese-dot-slice/">#slice</a>), and one&mdash;the <code>&lt;&lt;</code> method&mdash;became the central character of my first coding dream/nightmare, with reserved words <code>while</code> and <code>true</code> playing key supporting roles. I used these methods to write other pretty simple methods.</p>

<p>After just a few weeks at <a href="http://www.flatironschool.com">The Flatiron School</a>, I&rsquo;m quickly learning that building up complex programs, like web apps, can&rsquo;t (or maybe really just shouldn&rsquo;t) be accomplished by writing out method after method in one big file. You need the right structures and tools to create complex objects, persist them in a database, and express relationships between these objects. Using ActiveRecord, you get some really simple and powerful tools for all this that hide a huge amount of complexity away, allowing you focus on designing your app to do what you want it to do.</p>

<p>While ActiveRecord makes it easy to create models and associations, some of the concepts involved were hard for me to get my head around at first. One such concept was the join table. I ran up against a problem in need of a join table while working with my classmates on a lab involving modeling characters and actors.</p>

<p>In ActiveRecord speak, actors have many characters and a character belongs to an actor. Here, in all of its elegant simplicity, is how you&rsquo;d create the models that express this relationship:</p>

<figure class='code'><figcaption><span>app/models/actor.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Actor</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:characters</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>app/models/character.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Character</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:actor</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now all we need are two tables (actors and characters) to make this association work. The characters table, being on the <code>belongs_to</code> side of the relationship, must have a column for the foreign key, <code>actor_id</code>. In ActiveRecord, this can be accomplished in remarkably few lines of code:</p>

<figure class='code'><figcaption><span>db/migrations/001_create_actors.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">CreateActors</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Migration</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">change</span>
</span><span class='line'>    <span class="n">create_table</span> <span class="ss">:actors</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>      <span class="c1"># ActiveRecord provides an id (primary key) column by default, for free!</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">string</span> <span class="ss">:name</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>db/migrations/002_create_characters.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">CreateCharacters</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Migration</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">change</span>
</span><span class='line'>    <span class="n">create_table</span> <span class="ss">:characters</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">string</span> <span class="ss">:name</span>
</span><span class='line'>      <span class="c1"># Here is where the magic happens. ActiveRecord knows that this references the actors table.</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">integer</span> <span class="ss">:actor_id</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is the basic pattern you&rsquo;d follow to model any <code>has_many</code> <code>belongs_to</code> relationship in ActiveRecord. What seems like &ldquo;magic&rdquo; here is made possible by ActiveRecord Ruby methods that either give our associated classes more methods that let them interact with each other, or wrap SQL statements and hide them away (in the case of migrations). But that is a topic for another post.</p>

<p>Back to actors and characters. As my classmates and I were creating these models, two big things came to the surface:</p>

<p>1) We could not recall any of Tom Cruise&rsquo;s many characters&#8217; names.</p>

<p>2) What happens when a character has more than one actor? One of my favorite characters would most certainly break our has many/belongs to association&mdash;The Doctor.</p>

<p><img class="center" src="http://roseweixel.github.io/images/sad_doc_rain.jpeg" width="500" height="500" title="image" alt="images"></p>

<p>How can we fit The Doctor into our current schema??? The more I thought about it, the more impossible it seemed. Here is an illustration:</p>

<p><img class="center" src="http://roseweixel.github.io/images/actor_char_table.png" width="500" height="500" title="image" alt="images"></p>

<p>The above is our simple model, before The Doctor comes along and breaks everything. Just to be sure I was grasping how NOT to try to include The Doctor and his many actors, here is how it might look:</p>

<p><img class="center" src="http://roseweixel.github.io/images/the_doctor_broke_the_table.png" width="800" height="800" title="image" alt="images"></p>

<p>Our actors table seems fine, but our characters table is definitely not okay, and we haven&rsquo;t even included the eight doctors from the first twenty-six seasons yet.</p>

<p>With our current setup, we have to change the entire schema every time we add another Doctor. This is very, very bad. A database was designed for adding lots of rows. Not so for columns.</p>

<p>In order to make things right, we need a different association: many-to-many. Actors have many characters, and a character has many actors. In order to set our database up for this association, we need a join table. First the visual:</p>

<p><img class="center" src="http://roseweixel.github.io/images/revised_character_actor_with_join.png" width="650" height="650" title="image" alt="images"></p>

<p>Now for the migration (assuming your actors table is still intact and you&rsquo;ve already removed all but the name column from characters):</p>

<figure class='code'><figcaption><span>004_create_actors_characters_join_table.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">CreateCharacterActorRelationships</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Migration</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">change</span>
</span><span class='line'>    <span class="n">create_table</span> <span class="ss">:character_actor_relationships</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">integer</span> <span class="ss">:character_id</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">integer</span> <span class="ss">:actor_id</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>We also need to change our actor and character models. In order for the association to work, we need to somehow connect our actors and characters table through the character_actor_relationships table. The association we need in our actor and character models is <code>has_many :through</code>:</p>

<figure class='code'><figcaption><span>app/models/actor.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Actor</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:character_actor_relationships</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:characters</span><span class="p">,</span> <span class="ss">through</span><span class="p">:</span> <span class="ss">:character_actor_relationships</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>app/models/character.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Character</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:character_actor_relationships</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:actors</span><span class="p">,</span> <span class="ss">through</span><span class="p">:</span> <span class="ss">:character_actor_relationships</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, we need a model for CharacterActorRelationship:</p>

<figure class='code'><figcaption><span>app/models/character_actor_relationship.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">CharacterActorRelationship</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:character</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:actor</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we have the right associations and the right database schema to add all of the Doctors that ever were and ever will be throughout all time.</p>

<p><img class="center" src="http://roseweixel.github.io/images/first_doctor.jpeg" width="500" height="500" title="image" alt="images"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Looking for Something? Just #find It!]]></title>
    <link href="http://roseweixel.github.io/blog/2014/10/08/looking-for-something-just-number-find-it/"/>
    <updated>2014-10-08T20:32:04-04:00</updated>
    <id>http://roseweixel.github.io/blog/2014/10/08/looking-for-something-just-number-find-it</id>
    <content type="html"><![CDATA[<p>Searching through nested data structures can be downright messy. Even saying &ldquo;nested data structures&rdquo; sounds complicated. Luckily, Ruby has some powerful <a href="http://www.ruby-doc.org/core-2.1.3/Enumerable.html">Enumerable methods</a> that can simplify our lives (or at least our code).</p>

<p>Let&rsquo;s say you&rsquo;ve been programming for hours and suddenly realize your stomach is growling at you (why does this happen so often?). Here is how you might search for some delicious food, if you happened to be searching inside an array filled with hashes. Just humor me for the sake of example.</p>

<p>Here is our <code>restaurants</code> array:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">restaurants</span> <span class="o">=</span> <span class="o">[</span>
</span><span class='line'>  <span class="p">{</span><span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;The Decent Diner&quot;</span><span class="p">,</span> <span class="ss">:rating</span> <span class="o">=&gt;</span> <span class="s2">&quot;average&quot;</span><span class="p">},</span>
</span><span class='line'>  <span class="p">{</span><span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;The GoGo Grill&quot;</span><span class="p">,</span> <span class="ss">:rating</span> <span class="o">=&gt;</span> <span class="s2">&quot;delicious&quot;</span><span class="p">},</span>
</span><span class='line'>  <span class="p">{</span><span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Emporium of Mystery Meat&quot;</span><span class="p">,</span> <span class="ss">:rating</span> <span class="o">=&gt;</span> <span class="s2">&quot;poor&quot;</span><span class="p">},</span>
</span><span class='line'>  <span class="p">{</span><span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Dig Inn Seasonal Market&quot;</span><span class="p">,</span> <span class="ss">:rating</span> <span class="o">=&gt;</span> <span class="s2">&quot;delicious&quot;</span><span class="p">}</span>
</span><span class='line'><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, we want to get the name of a restaurant whose <code>:rating</code> is <code>"delicious"</code>. We could do something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">find_delicious_food</span><span class="p">(</span><span class="n">restaurants</span><span class="p">)</span>
</span><span class='line'>    <span class="n">restaurants</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">restaurant_info</span><span class="o">|</span>
</span><span class='line'>    <span class="n">restaurant_info</span><span class="o">.</span><span class="n">values</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">value</span><span class="o">|</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">value</span> <span class="o">==</span> <span class="s2">&quot;delicious&quot;</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">restaurant_info</span><span class="o">[</span><span class="ss">:name</span><span class="o">]</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>If we call this method on our <code>restaurants</code> hash, it will return the value &ldquo;The GoGo Grill&rdquo;. Sounds good to me. But in order to get there we needed a <code>return</code> inside an <code>if</code> statement inside an <code>each</code> loop inside another <code>each</code> loop. Not pretty.</p>

<p>There is a better way. The <code>find</code> method! Behold:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">find_delicious_food</span><span class="p">(</span><span class="n">restaurants</span><span class="p">)</span>
</span><span class='line'>  <span class="n">restaurants</span><span class="o">.</span><span class="n">find</span><span class="p">{</span><span class="o">|</span><span class="n">restaurant</span><span class="o">|</span> <span class="n">restaurant</span><span class="o">[</span><span class="ss">:rating</span><span class="o">]</span> <span class="o">==</span> <span class="s2">&quot;delicious&quot;</span><span class="p">}</span><span class="o">[</span><span class="ss">:name</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Just one line of code seems to do the same thing as its ugly predecessor. Let&rsquo;s look at it more closely. Here is what <code>find</code> does:</p>

<ul>
<li>It passes each element of the object on which it was called to a block.</li>
<li>It returns the first element for which the block evaluates to <code>true</code>.</li>
<li>If none of the elements return true for the given block, it returns <code>nil</code>.</li>
</ul>


<p>As it turns out, this <code>nil</code> value could cause some problems for our <code>find_delicious_food</code> method. If there are no restaurants in the hash with a <code>:rating</code> of <code>"delicious"</code>, our code breaks. We would get an error, because Ruby cannot make any sense out of <code>nil[:name]</code>.</p>

<p>Here is the method refactored to avoid that error:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">find_delicious_food</span><span class="p">(</span><span class="n">restaurants</span><span class="p">)</span>
</span><span class='line'>  <span class="n">good_restaurant</span> <span class="o">=</span> <span class="n">restaurants</span><span class="o">.</span><span class="n">find</span><span class="p">{</span><span class="o">|</span><span class="n">restaurant</span><span class="o">|</span> <span class="n">restaurant</span><span class="o">[</span><span class="ss">:rating</span><span class="o">]</span> <span class="o">==</span> <span class="s2">&quot;delicious&quot;</span><span class="p">}</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">good_restaurant</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">good_restaurant</span><span class="o">[</span><span class="ss">:name</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Sure, it may not be as cute and little as our one-line method, but it will never break and it&rsquo;s still a lot prettier than loops inside loops.</p>

<p>So when you are searching for that <em>one</em> thing you need inside of some nasty nesting, just <code>find</code> it!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[cheese.slice]]></title>
    <link href="http://roseweixel.github.io/blog/2014/10/07/cheese-dot-slice/"/>
    <updated>2014-10-07T22:07:16-04:00</updated>
    <id>http://roseweixel.github.io/blog/2014/10/07/cheese-dot-slice</id>
    <content type="html"><![CDATA[<p>When learning a programming language as natural as Ruby, the syntax inevitably seeps into our thoughts and alters the way we conceptualize everything from the complex to the mundane. Thus, the title of this blog (and, indeed, this post).</p>

<p>It is easy for this to happen, in part because Ruby has such an extensive library of methods whose names and behaviors make them ideal for modeling real life. One such method is <code>slice</code>.</p>

<p>The method <code>slice</code> can be called on an array (or an object that acts like an array, like a string). It literally returns a &ldquo;slice&rdquo; of the object on which it is called. The original object is left intact.</p>

<pre><code>&gt; cheese = ['gouda', 'muenster', 'provolone', 'manchego', 'brie']
&gt; my_slices = cheese.slice(1, 2)
=&gt; ["muenster", "provolone"] 
&gt; cheese
=&gt; ["gouda", "muenster", "provolone", "manchego", "brie"]
</code></pre>

<p>If you need to take more drastic measures, <code>slice!</code> will modify the original object, removing (and returning) everything you sliced out.</p>

<pre><code>&gt; cheese = ['gouda', 'muenster', 'provolone', 'manchego', 'brie']
&gt; my_slices = cheese.slice!(1, 2)
=&gt; ["muenster", "provolone"] 
&gt; cheese
=&gt; ["gouda", "manchego", "brie"]
</code></pre>

<p>Here are three different ways to use <code>slice</code> (<code>slice!</code> can also be invoked in these ways, and both can be used with arrays and strings):</p>

<ul>
<li><p><code>array.slice(index)</code> returns the object at <code>array[index]</code>, or <code>nil</code> if there is no object there to return.</p></li>
<li><p><code>array.slice(start, length)</code> returns a new array containing the elements of <code>array</code> starting at <code>start</code> and continuing for <code>length</code> elements (as shown in the code examples above). If there are no objects there, it returns <code>nil</code>.<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p></li>
<li><p><code>array.slice(range)</code> returns a new array containing the objects at <code>array[range]</code>, or <code>nil</code>.</p></li>
</ul>


<p>  For more on this and other Ruby Array methods, see the <a href="http://www.ruby-doc.org/core-2.1.3/Array.html#method-i-slice">documentation</a>.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>There are some special cases that return an empty array. See the <a href="http://www.ruby-doc.org/core-2.1.3/Array.html#method-i-slice">documentation</a>.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
</feed>
