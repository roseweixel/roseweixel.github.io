<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails | code.life]]></title>
  <link href="http://roseweixel.github.io/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://roseweixel.github.io/"/>
  <updated>2015-07-05T20:43:16-04:00</updated>
  <id>http://roseweixel.github.io/</id>
  <author>
    <name><![CDATA[Rose Weixel]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Integrating Ajax and Rails: A Simple Todo List App]]></title>
    <link href="http://roseweixel.github.io/blog/2015/07/05/integrating-ajax-and-rails-a-simple-todo-list-app/"/>
    <updated>2015-07-05T16:59:51-04:00</updated>
    <id>http://roseweixel.github.io/blog/2015/07/05/integrating-ajax-and-rails-a-simple-todo-list-app</id>
    <content type="html"><![CDATA[<p>This post is based on a tutorial I created to teach students at The Flatiron School the basics of integrating Ajax with Rails. This guide is appropriate for beginners who have already learned the basics of Rails and jQuery.</p>

<p>It will walk you through the process of adding Ajax to a very simple rails app for creating todo lists. First we&rsquo;ll go through the basics of setting up the Rails app, then adding jQuery and Ajax to add items without reloading the page. Finally, we&rsquo;ll refactor with <code>remote: true</code>. Feel free to code along!</p>

<h2>The Basic Rails Todo App</h2>

<p>Before getting to Ajax, here are the steps to create the basic rails todo app we&rsquo;ll be building on:</p>

<p>1) <code>rails new todo_app</code></p>

<p>2) <code>rails g resource todo</code></p>

<p>3) In the migration file (located in <code>db/migrate</code>):</p>

<pre><code class="ruby">class CreateTodos &lt; ActiveRecord::Migration
  def change
    create_table :todos do |t|
      t.string :description
      t.string :priority
      t.timestamps null: false
    end
  end
end
</code></pre>

<p>4) In <code>app/controllers/todos_controller.rb</code>:</p>

<pre><code class="ruby">class TodosController &lt; ApplicationController
  def index
    @todos = Todo.all
  end

  def create
    Todo.create(todo_params)
    redirect_to root_path
  end

  def destroy
    todo = Todo.find(params[:id])
    todo.destroy
    redirect_to root_path
  end

  private
    def todo_params
      params.require(:todo).permit(:description, :priority)
    end
end
</code></pre>

<p>5) In <code>config/routes.rb</code>:</p>

<pre><code class="ruby">Rails.application.routes.draw do
  root 'todos#index'
  resources :todos
end
</code></pre>

<p>6) Create <code>views/todos/index.html.erb</code> with a basic form and list of todos:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;h1&gt;</span>My Todos<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span><span class="ni">&amp;lt;</span>%= form_for Todo.new do |f| %&gt;
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;form-group&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>%= f.text_field :description, placeholder:
</span><span class='line'>    <span class="ni">&amp;ldquo;</span>what needs doing?<span class="ni">&amp;rdquo;</span> %&gt;
</span><span class='line'>  <span class="nt">&lt;/div&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;form-group&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>%= f.text_field :priority, placeholder: <span class="ni">&amp;ldquo;</span>priority level<span class="ni">&amp;rdquo;</span> %&gt;
</span><span class='line'>  <span class="nt">&lt;/div&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;form-group&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="ni">&amp;lt;</span>%= f.submit %&gt;
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>% end %&gt;<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;ul&gt;</span>
</span><span class='line'><span class="err">&lt;</span>% @todos.each do |todo| %&gt;
</span><span class='line'>  <span class="nt">&lt;li&gt;</span>
</span><span class='line'>    <span class="err">&lt;</span>%= todo.description %&gt;<span class="nt">&lt;br&gt;</span>
</span><span class='line'>    <span class="nt">&lt;strong&gt;</span>priority: <span class="nt">&lt;/strong&gt;</span><span class="err">&lt;</span>%= todo.priority %&gt;<span class="nt">&lt;br&gt;</span>
</span><span class='line'>    <span class="err">&lt;</span>%= link_to &quot;done&quot;, todo_path(todo), method: &#39;delete&#39; %&gt;
</span><span class='line'>  <span class="nt">&lt;/li&gt;</span>
</span><span class='line'><span class="err">&lt;</span>% end %&gt;
</span><span class='line'><span class="nt">&lt;/ul&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>7) Before starting up the rails server: <code>rake db:migrate</code></p>

<p>Now we can create new todos and destroy them. This is as functional as our app needs to be. Except for one thing. Since this is a single page app, it would be really nice if we could add and remove todos without reloading the page. Enter Ajax!</p>

<h2>Posting New Todos with Ajax</h2>

<p>Now we are going to &ldquo;ajaxify&rdquo; the process of creating todos. Since we are entering JavaScript land, we&rsquo;ll go into <code>app/assets/javascripts</code>. You&rsquo;ll see a file called <code>todos.coffee</code> or <code>todos.js.coffee</code>. We will not be using CoffeeScript, so rename it to <code>todos.js</code>.</p>

<p>Here&rsquo;s what we are going to implement:</p>

<p>When the &ldquo;Create Todo&rdquo; button is clicked, we will stop the default form submission behavior from happening, and send an Ajax request instead. To break this down further, here are the steps we&rsquo;ll need to follow:</p>

<ol>
<li>Create an event listener for the &lsquo;click&rsquo; event (or for the submission of the form) that loads when the document is ready and prevents the default behavior from happening (stops the page from reloading).</li>
<li>Grab some information from the form to use in our Ajax request.</li>
<li>Make the Ajax request.</li>
<li>Handle the response and add the new todo to the page.</li>
</ol>


<h3>Create an Event Listener</h3>

<p>In <code>app/assets/javascripts/todos.js</code>:</p>

<p>1) Make sure the document is ready before doing anything else.</p>

<pre><code class="javascript">// This is shorthand for $( document ).ready(function() { })
$(function(){

});
</code></pre>

<p>2) Listen for the submission of the form.</p>

<pre><code class="javascript">$(function(){
  $("form").submit(function(){
    // this debugger should be hit when you click the submit button!
    debugger;
  });
});
</code></pre>

<p>3) Prevent the default behavior (the form submitting and the page reloading).</p>

<pre><code class="javascript">$(function(){
  $("form").submit(function(event){
    event.preventDefault();

    // this debugger should be hit when you click the submit button!
    debugger;
  });
});
</code></pre>

<h3>Grab Information From the Form</h3>

<p>In order to make the Ajax request, we&rsquo;ll need to give the request the correct action and method to take us to the create action in the todos controller. If we <code>rake routes</code>, we&rsquo;ll see this:</p>

<p><code>POST   /todos(.:format)          todos#create</code></p>

<p>So we know we will be making a &lsquo;post&rsquo; request to &lsquo;/todos&rsquo;. We could hard code this in our Ajax request, but what if our routes change later on? Our request would no longer work. In order to make our code more robust, we&rsquo;ll get the correct action and method directly from the form itself. Basicaly, we&rsquo;ll ask the form where it was going by extracting the information with jQuery.</p>

<p>The <code>debugger</code> we threw into our code above will be really useful in figuring out the jQuery code for pulling out the information we need. With your server running and your JavaScript console open, fill in the form and hit the submit button. When the debugger gets hit, what is <code>this</code>?</p>

<p><img src="/images/js-console-1.png" alt="`this` in the console" /></p>

<p>Since our debugger is inside the function that&rsquo;s attached to the form submission, <code>this</code> is the form itself, and the action and method we need are right there! Let&rsquo;s use jQuery to grab them, using the handy <a href="https://api.jquery.com/attr/">.attr()</a> method.</p>

<p><img src="/images/js-console-2.png" alt="`.attr()` in the console" /></p>

<pre><code class="javascript">$(function(){
  $("form").submit(function(event){
    event.preventDefault();

    var action = $(this).attr('action');
    var method = $(this).attr('method');

  });
});
</code></pre>

<p>Of course, we also need the text we entered into the form for the todo description and priority level. If we open up the form element and all the divs that live inside of it in our console, we see that Rails gave our inputs some nice ids that we can use to select them with. Specifically, there&rsquo;s an input with an id of &ldquo;todo_description&rdquo; and an input with an id of &ldquo;todo_priority&rdquo;. Lets grab these using the jQuery <a href="https://api.jquery.com/find/">.find()</a> method.</p>

<p><img src="/images/js-console-3.png" alt=".find() in the console" /></p>

<p>We don&rsquo;t see the values that we typed into the form yet, but we can pull them out using the jQuery <a href="https://api.jquery.com/val/">.val()</a> method.</p>

<p><img src="/images/js-console-4.png" alt=".val() in the console" /></p>

<p>Great! Let&rsquo;s store these values as variables so we can pass them in to our Ajax request.</p>

<pre><code class="javascript">$(function(){
  $("form").submit(function(event){
    event.preventDefault();

    var action = $(this).attr('action');
    var method = $(this).attr('method');

    var description = $(this).find('#todo_description').val();
    var priority = $(this).find('#todo_priority').val();

  });
});
</code></pre>

<p>We are ready for the next step!</p>

<h3>Make the Ajax Request</h3>

<p>We are going to make an Ajax request that will deliver a JavaScript response to the create action in the todos controller.</p>

<p>The <a href="http://api.jquery.com/jquery.ajax/">jQuery documentation for writing Ajax requests</a> is really nice, so here&rsquo;s some code I pulled from there:</p>

<pre><code class="javascript">$.ajax({
  method: "POST",
  url: "some.php",
  data: { name: "John", location: "Boston" }
});
</code></pre>

<p>If we change the method, url, and data to the variables we created, we should be good to go! Our todos.js should now look like this:</p>

<pre><code class="javascript">$(function(){
  $("form").submit(function(event){
    event.preventDefault();

    var action = $(this).attr('action');
    var method = $(this).attr('method');

    var description = $(this).find('#todo_description').val();
    var priority = $(this).find('#todo_priority').val();

    $.ajax({
      method: method,
      url: action,
      data: { description: description, priority: priority }
    });

  });
});
</code></pre>

<p>Since we&rsquo;re expecting this Ajax request to hit the create action in the todos controller, let&rsquo;s put a <code>binding.pry</code> in there (make sure you&rsquo;ve added <code>gem 'pry'</code> to your Gemfile and run bundle install first):</p>

<pre><code class="ruby">def create
  # if our ajax request works, we'll hit this binding at take a look at params!
  binding.pry
  Todo.create(todo_params)
  redirect_to root_path
end
</code></pre>

<p>Here&rsquo;s what you&rsquo;ll see when that binding gets hit:</p>

<p><img src="/images/pry-1.png" alt="params in pry" /></p>

<p>Success! The Ajax request went where we wanted it to go and it sent the params through the way we told it to. But params is not quite right. Since we&rsquo;re using strong params, we need a nested structure where &ldquo;todo&rdquo; is a top level key. By changing our Ajax request to include <code>data: { todo: {description: description, priority: priority} }</code> this problem is solved, but there&rsquo;s actually a jQuery method, <a href="https://api.jquery.com/serializeArray/">.serializeArray()</a>, that will take care of turning all our form data into a nicely structured object (nesting included!) that we can use in our Ajax call. Here&rsquo;s how it looks in our code:</p>

<pre><code class="javascript">// .serializeArray() can be called on any form element (and here, $(this) is our form)
var data = $(this).serializeArray();

$.ajax({
  method: method,
  url: action,
  data: data
});
</code></pre>

<p>Now our params will be structured the way Rails expects them to be, and we can move on to the next step!</p>

<h3>Handle the Response</h3>

<p>We&rsquo;re still in the todos controller create action, and we&rsquo;re now able to instantiate new todos using the nicely structured params that we sent via Ajax. Currently, after creating the new Todo, we are just redirecting to the root_path. But the whole point of using Ajax is <em>not</em> to redirect. By default, a rails controller action handles responses that are sent in as html strings. We now want to tell it to respond to JavaScript:</p>

<pre><code class="ruby">def create
  Todo.create(todo_params)

  respond_to do |format|
    # if the response fomat is html, redirect as usual
    format.html { redirect_to root_path }

    # if the response format is javascript, do something else...
    format.js { }
  end
end
</code></pre>

<p>Before going further into what Rails will do with this JavaScript response, there&rsquo;s one more problem with our Ajax request. We did not tell it to send back JavaScript! Let&rsquo;s do that now, and our Ajax call should look like this:</p>

<pre><code class="javascript">$.ajax({
  method: method,
  url: action,
  data: data,

  // this line makes the response format JavaScript and not html.
  dataType: 'script'
});
</code></pre>

<p>So now that we&rsquo;re getting the response we want, what is <code>format.js { }</code> actually doing?</p>

<p>When Rails sees that line of code, it will automatically look for a file with the path <code>app/views/&lt;controller name&gt;/&lt;action name&gt;.js.erb</code>. In our example, it&rsquo;s looking for app/views/todos/create.js.erb.</p>

<p>Make that file and throw a debugger in there to confirm that it&rsquo;s actually where we land when we get out of the create action.</p>

<p><img src="/images/create-js-erb-1.png" alt="new create.js.erb file" />
<img src="/images/js-console-5.png" alt="debugger in create.js.erb" /></p>

<p>That worked! So now that we are in create.js.erb, we have access to any instance variables we created in the controller action that led us there, and we can write JavaScript and ERB (embedded Ruby) code to do whatever we want with our view. We should probably save our newly created todo in an instance variable for just that purpose.</p>

<pre><code class="ruby">def create
  @todo = Todo.create(todo_params)

  respond_to do |format|
    format.html { redirect_to root_path }
    format.js { }
  end
end
</code></pre>

<p>So what do we want to do next? In create.js.erb, we want to use JavaScript (or jQuery) to append the new todo to the <code>&lt;ul&gt;</code> where the todos live on the page.</p>

<p>We could do something like this:</p>

<pre><code class="javascript">var html = "&lt;li&gt;&lt;%= @todo.description %&gt;&lt;br&gt;&lt;strong&gt;priority: &lt;/strong&gt; &lt;%= @todo.priority %&gt;&lt;br&gt;&lt;%= escape_javascript link_to 'done', todo_path(@todo), method: 'delete' %&gt;&lt;/li&gt;";

$('ul').append(html);
</code></pre>

<p>Now, when we enter a new todo description and priority and hit the submit button, it appears on the page and no reloading happens! That&rsquo;s great, but it could use some refactoring.</p>

<ol>
<li>It&rsquo;s not DRY: we basically copied and pasted code from our index.html.erb. If the way we want to render todos ever changes, we now have to change it in two places.</li>
<li>It&rsquo;s ugly. That html string is pretty hard to read, and what&rsquo;s that <code>escape_javascript</code> doing in there? We need that or the <code>link_to</code> will be evaluated as JavaScript and the whole thing breaks.</li>
</ol>


<p>The solution to this? A partial. Extract the code for displaying a single todo out of index.html.erb and place it in  a new file at <code>app/views/todos/_todo.html.erb</code>:</p>

<p><img src="/images/todo-partial.png" alt="todo partial" /></p>

<p>Now you can use Rails magic to render the <code>@todos</code> collection in index.html.erb:</p>

<p><img src="/images/index-with-render-collection.png" alt="index using todo partial" /></p>

<p>Finally, replace the html string we had in create.js.erb with code for rendering the partial, passing in <code>@todo</code> as a local variable:</p>

<p><img src="/images/create-js-erb-2.png" alt="create.js.erb using partial" /></p>

<p>And we&rsquo;re done creating todos with Ajax! In the next section, we&rsquo;ll refactor our code by using <code>remote: true</code>.</p>

<h2>Refactoring with <code>remote: true</code></h2>

<p>In Rails, both <code>form_for</code> and <code>link_to</code> helpers can take an argument of <code>remote: true</code>:</p>

<h3>Example: <code>link_to</code> with <code>remote: true</code></h3>

<pre><code class="ruby">&lt;%= link_to 'Show Something', something_path(@something), remote: true %&gt;
</code></pre>

<p>In the case of our todo list app, we will add <code>remote: true</code> to our form for creating a new todo (the only change here is on the first line of the form):</p>

<pre><code class="ruby">&lt;%= form_for Todo.new, remote: true do |f| %&gt;
  &lt;div class="form-group"&gt;
    &lt;%= f.text_field :description, placeholder: 
    "what needs doing?" %&gt;
  &lt;/div&gt;

  &lt;div class="form-group"&gt;
    &lt;%= f.text_field :priority, placeholder: "priority level" %&gt;
  &lt;/div&gt;

  &lt;div class="form-group"&gt;
  &lt;%= f.submit %&gt;
  &lt;/div&gt;
&lt;% end %&gt;
</code></pre>

<p>So, what does <code>remote: true</code> do for you? In short, it adds a <code>data-remote="true"</code> attribute to the generated html form as seen <a href="http://guides.rubyonrails.org/working_with_javascript_in_rails.html#form-for">here</a>, and submits the form via Ajax automagically. As with everything in Rails, there&rsquo;s metaprogramming going on under the hood. In this case, the JavaScript code that we wrote to hijack the submit event and make the appropriate Ajax request is all generated for you behind the scenes. If you&rsquo;re feeling extra curious, check out the <a href="https://github.com/rails/jquery-ujs/blob/148571ded762f22ccca84db38d4b4d56853ab395/src/rails.js">Rails.js source code</a>.</p>

<p>Here&rsquo;s a small snippet from the source code linked to above. Not so surprisingly, it looks a lot like the code we wrote (especially lines 2-4!):</p>

<pre><code class="javascript">if (element.is('form')) {
  method = element.attr('method');
  url = element.attr('action');
  data = element.serializeArray();
  // memoized value from clicked submit button
  var button = element.data('ujs:submit-button');
  if (button) {
    data.push(button);
    element.data('ujs:submit-button', null);
  }
}
</code></pre>

<p>Because Rails is providing all of this JavaScript for us, now that we&rsquo;ve added <code>remote: true</code> to the form, we can get rid of everything in our todos.js file.</p>

<h3>Before adding <code>remote: true</code>:</h3>

<pre><code class="javascript">// app/assets/javascripts/todos.js

$(function(){
  $("form").submit(function(event){
    event.preventDefault();

    var action = $(this).attr('action');
    var method = $(this).attr('method');
    var data = $(this).serializeArray();

    $.ajax({
      method: method,
      url: action,
      data: data,
      dataType: 'script'
    });

  });
});
</code></pre>

<h3>After adding <code>remote: true</code>:</h3>

<pre><code class="javascript">// app/assets/javascripts/todos.js
</code></pre>

<p>Just like when we manually wrote out the Ajax call, when the form is submitted the default behavior will be prevented and a JavaScript response will be sent to the create action in the todos controller. The controller will then send us to app/views/todos/create.js.erb, just as it did before. We will leave the rest of our code as is, and we are done with our refactoring!</p>

<h2>Deleting todos with <code>remote: true</code></h2>

<p>Now that we&rsquo;ve seen the beautiful simplicity of <code>remote: true</code>, let&rsquo;s see how quick and easy it is to remove todos from the database and the DOM with no refreshing needed:</p>

<p>1) In <code>views/todos/index.html.erb</code>, we have a link that hits the <code>destroy</code> action in the <code>TodosController</code>. Simply add <code>remote: true</code> to it.</p>

<p><strong>Note: At this point it&rsquo;s also important to give each <code>&lt;li&gt;</code> an <code>id</code> that will help us remove the correct item from the DOM after deleting it.</strong></p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;h1&gt;</span>My Todos<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span><span class="ni">&amp;hellip;</span><span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;ul&gt;</span>
</span><span class='line'><span class="err">&lt;</span>% @todos.each do |todo| %&gt;
</span><span class='line'>  <span class="c">&lt;!-- This `id` attribute will help us find the correct element to remove using jQuery --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;li</span> <span class="na">id=</span><span class="s">&quot;&lt;%= todo.id %&gt;&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="err">&lt;</span>%= todo.description %&gt;<span class="nt">&lt;br&gt;</span>
</span><span class='line'>    <span class="nt">&lt;strong&gt;</span>priority: <span class="nt">&lt;/strong&gt;</span><span class="err">&lt;</span>%= todo.priority %&gt;<span class="nt">&lt;br&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">&lt;!-- Add `remote: true` to the line below --&gt;</span>
</span><span class='line'>    <span class="err">&lt;</span>%= link_to &quot;done&quot;, todo_path(todo), method: &#39;delete&#39;, remote: true %&gt;
</span><span class='line'>  <span class="nt">&lt;/li&gt;</span>
</span><span class='line'><span class="err">&lt;</span>% end %&gt;
</span><span class='line'><span class="nt">&lt;/ul&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>2) Tell the <code>todos#destroy</code> action how to <code>respond_to</code> a JavaScript response:</p>

<pre><code class="ruby">def destroy
  # we need an instance variable `@todo` so we can access it in the next step!
  @todo = Todo.find(params[:id])
  @todo.destroy

  respond_to do |format|
    format.html { redirect_to root_path }
    format.js { }
  end
end
</code></pre>

<p>3) Remember that line 7 in the <code>destroy</code> action above will trigger Rails to look for <code>app/views/todos/destroy.js.erb</code>, so create that file and add code to select the todo to remove using jQuery. Let&rsquo;s make it <code>slideUp()</code>:</p>

<pre><code class="javascript">$("li#&lt;%= @todo.id %&gt;").slideUp();
</code></pre>

<p>And that&rsquo;s it. With this simple yet powerful pattern, you can easily ajaxify all the things in all of your Rails apps. If you&rsquo;re interested in learning more, I&rsquo;ve listed some handy resources below. Happy coding!</p>

<p><img class="center" src="/images/ajaxify-all-the-things.jpg" width="400" height="400" title="&lsquo;image&rsquo; &lsquo;images&rsquo;" ></p>

<h2>Additional Resources</h2>

<ul>
<li><a href="http://api.jquery.com/jquery.ajax/">jQuery Documentation - jQuery.ajax()</a></li>
<li><a href="http://blog.flatironschool.com/post/56146220219/learning-about-ajax">Learning About Ajax</a></li>
<li><a href="http://guides.rubyonrails.org/working_with_javascript_in_rails.html">Rails Documentation - Working with JavaScript in Rails</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Live Updating DOM Elements With jQuery and Ajax]]></title>
    <link href="http://roseweixel.github.io/blog/2015/06/04/live-updating-dom-elements-with-jquery-and-ajax/"/>
    <updated>2015-06-04T21:20:11-04:00</updated>
    <id>http://roseweixel.github.io/blog/2015/06/04/live-updating-dom-elements-with-jquery-and-ajax</id>
    <content type="html"><![CDATA[<p>Any web app that involves real-time interactions between users requires some form of live notifications. Implementing this, for a beginner developer such as myself, can be a daunting challenge. This post will walk through how I went about solving this problem when working on <a href="http://www.lacquerlove.com">Lacquer Love&amp;Lend</a>, a social network for nail polish lovers that allows users to interact via friendships and lacquer loans. As with any social network, I wanted users to see live notifications whenever they received a new friendship or transaction request, or when the <code>state</code> of any of their friendships or transactions changed. The example that follows assumes some basic knowledge of Rails.</p>

<h2>Some Basic Ajax</h2>

<p>In a basic Ajax request, a user clicks on something, the Ajax request gets sent, and a part of the DOM gets updated without the entire page reloading.</p>

<p><img class="center" src="/images/basic_ajax_request.png" width="600" height="600" title="&lsquo;image&rsquo; &lsquo;images&rsquo;" ></p>

<p>The code usually looks something like this:</p>

<pre><code class="javascript app/assets/javascripts/something.js">// 1) Wait for the document to be ready.
$(document).ready(function() {
    // 2) Listen for the submission of the form.
    $("form").submit(function(event) {

        // 3) Prevent an entire page load (or reload).
        event.preventDefault();

        // 4) Grab the information from the form needed for the Ajax request.
        var formAction = $(this).attr('action'); // e.g. '/somethings'
        var formMethod = $(this).attr('method'); // e.g. 'post'
        var formData   = $(this).serializeArray(); // grabs the form data and makes your params nicely structured!

        // 5) Make the Ajax request, which will hit the 'create' action in the 'somethings' controller
        $.ajax({
          url:  formAction,
          type: formMethod,
          data: formData
        });
    });
});
</code></pre>

<p>For the basic example, I&rsquo;m omitting the controller and view as the main focus of this post is how I implemented live notifications. A more detailed explanation of basic Ajax will follow in my next post - a prequel to this one, if you will :).</p>

<p>With the code above, a single user&rsquo;s action of submitting the form sets off the whole chain of events. But for live notifications, more than one user is involved and the action that changes one user&rsquo;s data is hapenning on another user&rsquo;s client! Making this happen twisted my brain into a pretzel at first, but after several attempts I got the functionality I wanted. A description of these follows below.</p>

<h2>Attempt #1: Refresh a Single Div Every 3 Seconds</h2>

<p>In order to get a single part of the page to update without the entire page refreshing, I used a <code>setInterval()</code> function to make an Ajax request every 3 seconds. This would make a <code>GET</code> request to a custom route: <code>users/:id/live_notifications</code> that hit an action named <code>live_notifications</code> in the <code>UsersController</code>.</p>

<p>1) Separate the &ldquo;live notifications&rdquo; div into a partial:</p>

<p><img class="center" src="/images/live_notifications_div.png" width="600" height="600" title="&lsquo;image&rsquo; &lsquo;images&rsquo;" ></p>

<p>2) Create a route and a controller action:</p>

<pre><code class="ruby config/routes.rb">get 'users/:id/live_notifications' =&gt; 'users#live_notifications'
</code></pre>

<pre><code class="ruby app/controllers/users_controller.rb">def live_notifications
  @user = User.find(params[:id])

  respond_to do |format|
    format.js
  end
end
</code></pre>

<p>3) Make the Ajax request to hit <code>users#live_notifications</code> every 3 seconds:</p>

<pre><code class="javascript app/assets/javascripts/live_notifications.js">
$(document).ready(function() {
    var currentUrl = window.location.href;

    // Given that we're at a url like 'users/:id', this saves the unique id of the user whose show page we are currently looking at
    var userID = currentUrl.substr(currentUrl.lastIndexOf('/') + 1);

    setInterval(function() {
        $.ajax({
            type: "GET",
            url: "/users/" + userID + "/live_notifications"
        });
    }, 3000); 
});
</code></pre>

<p>4) Once this Ajax request hits the controller (which is set up to handle a JavaScript response in the <code>respond_to</code> block), Rails by default will look for <code>app/views/users/live_notifications.js.erb</code> and execute the following to refresh the partial:</p>

<pre><code class="javascript app/views/users/live_notifications.js.erb">$("#live-notifications").html('&lt;%= j render "live_notifications", user: @user %&gt;');
</code></pre>

<p>This is all it took to refresh that single div every 3 seconds. However, it was far from ideal:</p>

<ul>
<li><p>Lots of refreshing for no reason (like when you&rsquo;re looking at another user&rsquo;s page and no notifications are displayed, or when nothing has changed)</p></li>
<li><p>Things that never would change are part of the div that is being refreshed (like header text, for example)</p></li>
<li><p>Last but not least, this kind of indescriminate refreshing breaks the functionality of forms&hellip;</p></li>
</ul>


<p><img class="center" src="/images/form-refreshing-problems.gif" width="600" height="600" title="&lsquo;image&rsquo; &lsquo;images&rsquo;" ></p>

<h2>A Quick Fix for Form Problems</h2>

<p>Thanks to jQuery pseudo selectors, we can stop the Ajax call from being made if an input field is currently focused:</p>

<pre><code class="javascript app/assets/javascripts/live_notifications.js">$(document).ready(function() {
    ...

    setInterval(function() {
        // prevent the Ajax call from being made if the input field in the live notifications div is focused
        if (!$('#transaction_due_date').is(":focus")){
            $.ajax({
                ...
            });
        }
    }, 3000); 
});
</code></pre>

<h2>Getting More Specific</h2>

<p>The next logical step up from the &ldquo;refresh everything all the time&rdquo; strategy was to refresh the live notifications div only when looking at one&rsquo;s own show page (in other words, when the user id in the url matches the id of the current user stored in the session).</p>

<p>In order to make the <code>current_user</code> from the Rails backend available to JavaScript, I put the following in my application layout:</p>

<p>&#8220;`html app/views/layouts/application.html.erb</p>

<script type="text/javascript">
  window.currentUser = {
      id : "<%= current_user.id if current_user %>"
  }
</script>


<pre><code>
With `current_user.id` stored in an object attached to the window, making sure the Ajax call only gets made when a user is looking at his/her own profile page is simple:
</code></pre>

<p>$(document).ready(function() {
    var currentUrl = window.location.href;
    var userID = currentUrl.substr(currentUrl.lastIndexOf(&lsquo;/&rsquo;) + 1);</p>

<pre><code>if (currentUrl.endsWith('/users/' + window.currentUser.id)) {
    setInterval(function() {
        ...
    }, 3000); 
}
</code></pre>

<p>});
&#8220;`</p>

<h2>The Final Refactor: Only Refresh When things Have Changed</h2>

<p>To change only things that have changed, when they have changed, the ability to compare what&rsquo;s on the back end with what&rsquo;s on the front end is needed.</p>

<p>For this part, I needed to capture the state of all of a user&rsquo;s transactions and friendships (the two things for which there may be a notification), and hide this information on the page. I created a method in the <code>User</code> model that returns all of these states in an array, and put this into a hidden element on the page:</p>

<p><img class="center" src="/images/hidden-tracker.png" width="600" height="600" title="&lsquo;image&rsquo; &lsquo;images&rsquo;" ></p>

<p>Since the transactions could also have due dates, I did something similar for those.</p>

<p>The next step was to change the code in <code>app/views/users/live_notifications.js.erb</code> to check the current state of the user&rsquo;s transactions and friendships and see if the <code>#all-categories-tracker</code> is up to date:</p>

<pre><code class="javascript app/views/users/live_notifications.js.erb">var previousInteractionStates = $('#all-categories-tracker').text();
var currentInteractionStates = "&lt;%= @user.transactions_and_friendships_data_array %&gt;";

var countOrStatusChanged = previousInteractionStates !== currentInteractionStates;

var previousDueDates = $.map($(".due-date"), function(val) {
  return $(val).text()
});
var currentDueDates = "&lt;%= @user.due_date_list %&gt;";

var dueDatesChanged = currentDueDates !== previousDueDates.toString();

if (countOrStatusChanged || dueDatesChanged) {
    // UPDATE THE "MASTER TRACKER"
    $('#all-categories-tracker').html(currentInteractionStates);

    // CHECK EACH INDIVIDUAL CATEGORY AND CHANGE ONLY WHAT’S NEEDED
    &lt;% notification_categories.each do |category| %&gt;
        var currentCategory = "&lt;%= category %&gt;";

        // DEAL WITH ANY CHANGES IN COUNT OR STATE
        var currentCategoryStates  = "&lt;%= @user.states(category) %&gt;";
        var previousCategoryStates = $(".category-tracker#" + currentCategory).html();

        // if there's been a change for this category
        if (currentCategoryStates !== previousCategoryStates) {
            // Update the DOM accordingly
             …
        }

        // DEAL WITH CHANGED DUE DATES FOR TRANSACTIONS
        if (currentCategory === 'active_requested_transactions' &amp;&amp; dueDatesChanged) {
            // Update the DOM accordingly
              …
        }        
    &lt;% end %&gt;
}
</code></pre>

<p>With this final refactoring, checks are in place that stop the unnecessary refreshing that came with the first version:</p>

<p><img class="center" src="/images/live-notifications-flow.png" width="600" height="600" title="&lsquo;image&rsquo; &lsquo;images&rsquo;" ></p>

<h2>Alternatives</h2>

<p>The method I described above for achieving live notifications is very basic Ajax polling. Every serveral seconds, a request/response cycle fires. This inevitably means lots of database querying, even if the amount of refreshing can be reduced to a minimum. In my search for ways to reduce the burden this puts on the database, here are some other techniques I&rsquo;ve found that may offer some advantages:</p>

<p>1) Long Polling</p>

<p>With this technique, a request fires and waits for a change before sending a response. Then another request can be fired.</p>

<p>2) Web Sockets</p>

<p>Very different than Ajax polling or long polling, web sockets are used for continuous communication between server and client.</p>

<p>3) Server-Sent Events</p>

<p>Unlike web sockets which allows for continuous back and forth from server to client, this technique establishes a persistent connection that allows the server to send data to the client, but not the other way around.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making Friends (With Code)]]></title>
    <link href="http://roseweixel.github.io/blog/2014/12/04/making-friends-with-code/"/>
    <updated>2014-12-04T23:01:41-05:00</updated>
    <id>http://roseweixel.github.io/blog/2014/12/04/making-friends-with-code</id>
    <content type="html"><![CDATA[<p>This post will not be about how I&rsquo;ve spent the last ten weeks at <a href="http://flatironschool.com/">The Flatiron School</a> making awesome friends while coding together, or about my process of becoming friends with code. Those are posts for another time. This one is about the kinds of friendships that are actually built with code, the kind you can persist in a database.</p>

<p>Over the course of working on my two most recent projects, I&rsquo;ve discovered that there is more than one way to make a friendship happen on the backend of a Rails app (or most likely any app). My first crack at making friendships was for a <a href="https://lacquer-love-and-lend.herokuapp.com/">nail polish sharing app</a> where friends can view each other&rsquo;s collections and ask to borrow from each other. I watched Treehouse&rsquo;s tutorial on <a href="http://teamtreehouse.com/library/building-social-features-in-ruby-on-rails">building social features in Ruby on Rails</a>, which is a good place to start if you&rsquo;ve never done something like this before. Although it helped me understand it somewhat, the way it was done in the tutorial still seemed pretty complicated to me. I decided to try to figure it out on my own so that I could break it down and understand it better.</p>

<p>Here are the basic back-end requirements for creating a friendship (clearly some buttons and forms on the front-end are needed, but those are implementation details, so I&rsquo;ll leave them out of this post):</p>

<ul>
<li><p>You have to teach your models that some Users have relationships with other Users (a self-referential association).</p></li>
<li><p>You have to store that relationship in the database so that both sides of the relationship have knowledge of it and access to it.</p></li>
<li><p>You have to have a way of representing and keeping track of the state of the relationship at any given time (requested, accepted, etc.)</p></li>
</ul>


<p>Here&rsquo;s how I did it in my first go-around:</p>

<p>1) I created a join table, <code>friendships</code>:</p>

<pre><code class="ruby">class CreateFriendships &lt; ActiveRecord::Migration
  def change
    create_table :friendships do |t|
      t.integer :user_id
      t.integer :friend_id
      t.timestamps
    end
    # it's a good idea to add an index for faster look-ups in the database
    add_index :friendships, [:user_id, :friend_id]
  end
end
</code></pre>

<p>2) In the model for Friendship, I taught it that Friends are really just other Users:</p>

<pre><code class="ruby">class Friendship &lt; ActiveRecord::Base
  belongs_to :user
  belongs_to :friend, class_name: 'User', foreign_key: 'friend_id'

  validate :is_not_duplicate, :on =&gt; :create

  def is_not_duplicate
    if !(Friendship.where(:friend_id =&gt; friend_id, :user_id =&gt; user_id).empty? &amp;&amp; Friendship.where(:user_id =&gt; friend_id, :friend_id =&gt; user_id).empty?)
      errors.add(:friendship, "This friendship already exists!")
    end
  end
end
</code></pre>

<p>As you can see from the above, I decided I didn&rsquo;t want to allow &ldquo;duplicates&rdquo; of friendships in the database, but as it turns out there are reasons why you might not want to do it this way. I&rsquo;ll go into that later.</p>

<p>3) I made the User model aware of the Friendship model:</p>

<pre><code class="ruby">class User &lt; ActiveRecord::Base
  has_many :friendships
  has_many :friends, through: :friendships

  validates :name, presence: true, uniqueness: true

  def accepted_friends
    accepted_friends = []
    Friendship.where(user_id: self.id, state: 'accepted').each do |friendship|
      accepted_friends &lt;&lt; User.find(friendship.friend_id)
    end
    Friendship.where(friend_id: self.id, state: 'accepted').each do |friendship|
      accepted_friends &lt;&lt; User.find(friendship.user_id)
    end
    accepted_friends
  end

  def requested_friends_awaiting_approval
    pending_friends = []
    Friendship.where(user_id: self.id, state: 'pending').each do |friendship|
      pending_friends &lt;&lt; User.find(friendship.friend_id)
    end
    pending_friends
  end

  def friendships_for_your_approval
    pending_friendships = []
    Friendship.where(friend_id: self.id, state: 'pending').each do |friendship|
      pending_friendships &lt;&lt; friendship
    end
    pending_friendships
  end

  def friends_for_your_approval
    pending_friends = []
    Friendship.where(friend_id: self.id, state: 'pending').each do |friendship|
      friend = User.find(friendship.user_id)
      pending_friends &lt;&lt; friend
    end
    pending_friends
  end

  def all_friends
    accepted_friends + requested_friends_awaiting_approval + friends_for_your_approval
  end

end
</code></pre>

<p>You&rsquo;ll notice that I wrote a whole bunch of methods to tell Users how to find their friends on both sides of the relationship. I wanted to give users custom notifications in the views depending on whether they had a pending request or a request awaiting their approval, which was part of the reason for this. But even if I hadn&rsquo;t wanted to do that, I would have at least needed some kind of setup like this that makes multiple hits to the database every time someone wants to see all of their friends.</p>

<p>4) Finally, <code>state</code> is a big part of this model. I set it up so a friendship could have a state of <code>pending</code> or <code>accepted</code> (similar methods would create other states, like <code>rejected</code>). This is where the friendships controller comes in. For the sake of brevity, I&rsquo;ll just describe the <code>create</code> and <code>update</code> methods:</p>

<pre><code class="ruby">class FriendshipsController &lt; ApplicationController

  def create
    @user = current_user
    if params[:friendship] &amp;&amp; params[:friendship].has_key?(:friend_id)
      @friend = User.find(params[:friendship][:friend_id])
      @friendship = Friendship.new(friend: @friend, user: @user, state: 'pending')
      @friendship.save
      flash[:notice] = "Your friendship with #{@friend.name} is pending."
      redirect_to(:back)
    else
      flash[:notice] = "Friend required"
      redirect_to root_path
    end
  end

  def update
    @friendship = Friendship.find(params[:id])
    @friendship.update(state: params[:state])
    redirect_to(:back)
  end

end
</code></pre>

<p>Since I&rsquo;ve made a column in the friendships table for <code>state</code>, I can set and update the value of that attribute so a Friendship can introspect on the state it is currently in (what if we could write a method for doing this in real life?).</p>

<p>I set the <code>state</code> of the friendship to <code>'pending'</code> whenever it first gets created. Then, when the User who was &ldquo;friended&rdquo; decides to hit the &lsquo;Accept&rsquo; button (or the &lsquo;Reject&rsquo; button as the case may be), the friendship can get updated accordingly.</p>

<p>So, although the implementation of friendships I ended up with in my first attempt has the functionality I wanted, but as I mentioned before, it&rsquo;s not the most efficient. While my reasoning was that it is not desirable to have two rows in the friendships join table for every relationship that gets created, this reasoning did not take into account the way databases work. Because I have to query twice (Who are the people I&rsquo;ve friended? Who are the people who have friended me?) every single time I want to access my friends, this is actually unneccesarily expensive. Since rows in a database are cheap, why worry about adding an extra row if it reduces the number of times you need to hit the database?</p>

<p>I got a second crack at this problem during my current project, an app for teachers that includes functionality for generating seating charts according to who works well together and who doesn&rsquo;t. Along with my teammates, we built Buddyships (and Enemyships, too!) in a more reciprocal way:</p>

<pre><code class="ruby">class Enemyship &lt; ActiveRecord::Base
  belongs_to :student
  belongs_to :enemy, class_name: 'Student', foreign_key: 'enemy_id'
  belongs_to :course_section

  after_create :inversify
  after_destroy :destroy_inverse

  validates_uniqueness_of :student, :scope =&gt; [:enemy, :course_section_id]
  validates_uniqueness_of :enemy, :scope =&gt; [:student, :course_section_id]

  validate :cant_be_own_enemy, :cant_be_buddies_and_enemies

  def inversify
    self.enemy.enemyships.create(:course_section_id =&gt; self.course_section_id, :enemy_id =&gt; self.student.id)
  end

  def destroy_inverse
    if inverse = self.enemy.enemyships.where(:enemy_id =&gt; self.student.id, :course_section_id =&gt; self.course_section_id).first
      inverse.destroy
    end
  end

  private
  def cant_be_own_enemy
    if student_id == enemy_id
      errors.add(:enemy_id, "you can't be your own enemy! :(")
    end
  end

  def cant_be_buddies_and_enemies
    if Buddyship.find_by(student_id: student_id, buddy_id: enemy_id, course_section_id: course_section_id)
      errors.add(:enemy_id, "you can't be both buddies and enemies for the same class! :(")
    end
  end

end
</code></pre>

<p>In this implementation, two rows in the join table are created for each relationship, using a method aptly called <code>inversify</code>.</p>

<p>Because of the reciprocal nature of the relationship created in this model, one database query (<code>student.enemyships</code>) is all it takes to find all potential Enemies. If you were only creating relationships, you&rsquo;d care about not writing to the database more than you needed to. But since, in general, we query for friendships way more frequently than we create them, we want to make sure the querying is as efficient as possible.</p>

<p>So, while one-way relationships are fine for a follower-followee type of relationship, if you want to create a reciprocal relationship in your next app, don&rsquo;t shy away from those extra rows in the database.</p>
]]></content>
  </entry>
  
</feed>
