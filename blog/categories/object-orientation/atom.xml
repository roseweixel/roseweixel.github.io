<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Object Orientation | code.life]]></title>
  <link href="http://roseweixel.github.io/blog/categories/object-orientation/atom.xml" rel="self"/>
  <link href="http://roseweixel.github.io/"/>
  <updated>2015-08-08T13:59:42-04:00</updated>
  <id>http://roseweixel.github.io/</id>
  <author>
    <name><![CDATA[Rose Weixel]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Reading and Writing to Instance Variables in Ruby: Self., @, or Nothing?]]></title>
    <link href="http://roseweixel.github.io/blog/2015/02/13/reading-and-writing-to-instance-variables-in-ruby:-self.,-@,-or-Nothing%3F/"/>
    <updated>2015-02-13T14:03:10-05:00</updated>
    <id>http://roseweixel.github.io/blog/2015/02/13/reading-and-writing-to-instance-variables-in-ruby:-self.,-@,-or-Nothing?</id>
    <content type="html"><![CDATA[<p>Today marked the end of my second week as an instructor at The Flatiron School, where I graduated just about two months ago. While working with a student this morning, I realized I had been taking for granted a piece of knowledge that I learned in week two of my own semester.</p>

<p>When I first was learning about object orientation, one of the most confounding things for me was when to use @, self., or no prefix at all when dealing with instance variables in class definitions.</p>

<p>After several conversations with classmates and instructors, I thought I had it all straightened out. My table mates and I even wrote an &lsquo;Instance Variable Manifesto&rsquo; to make sure we&rsquo;d retain this enlightenment for all time. Today, I was grappling with the issue once again. It&rsquo;s funny how learning to program doesn&rsquo;t always happen in a straight line. The experience reminded me not to take for granted things I &ldquo;know&rdquo;, and to savor the moments of re-learning.</p>

<p>Here&rsquo;s the issue that led to my temporary existential crisis today (had I totally lost my grasp of object oriented programming, all knowledge of Ruby, and/or my mind entirely?):</p>

<ul>
<li>We have a class, <code>Shoe</code>.</li>
<li>It has an attribute, <code>condition</code>, with an <code>attr_accessor</code>.</li>
<li>It has a method, <code>cobble</code>, that sets a <code>Shoe</code>&rsquo;s condition to <code>"new"</code>.</li>
<li>The Rspec test first made a new instance of <code>Shoe</code> and then set its condition to <code>"old"</code>. Then, it had the expectation that the <code>condition</code> of the shoe will be equal to <code>"new"</code> after calling the <code>cobble</code> method.</li>
</ul>


<p>This is the code my student had:</p>

<pre><code class="ruby">class Shoe
  attr_accessor :condition

  def cobble
    condition = "new"
  end
end
</code></pre>

<p>At first glance, the reason this code was not making the test pass eluded me. We put a <code>binding.pry</code> in the cobble method, and found that while <code>condition</code> was indeed set to <code>'new'</code>, the test was still failing. Wasn&rsquo;t <code>condition = "new"</code> just making a call to the <code>condition=</code> method provided by the attr_accessor? Apparently not.</p>

<p>In fact, as I later re-realized, <code>condition = "new"</code> was creating a local variable, <code>condition</code> with the value <code>"new"</code>, which has nothing to do with the value of <code>@condition</code>. I was able to come back to understanding this concept when I recalled that I had grappled with this very same thing almost exactly four months ago, when I was working on the exact same lab. I searched through the notes I had taken during those early Flatiron days and found the &ldquo;manifesto.&rdquo;</p>

<p>Four months later, here&rsquo;s my distilled version of it.</p>

<ul>
<li><p>Use <code>@</code> only in the initialize method or within a custom reader/writer method (this accesses the instance variable directly)</p></li>
<li><p>If you intend to ever read or write to an instance variable, build the appropriate reader/writer methods or use <code>attr_accessor</code>, <code>attr_writer</code>, or <code>attr_reader</code> as you deem appropriate. This allows you to delegate getting and setting your instance variables to methods rather than having to manipulate the variable directly.</p></li>
<li><p>When altering the value of an instance variable, use the writer method prefixed with <code>self.</code> <strong>Without giving the writer method an explicit receiver (<code>self</code>), the Ruby interpreter will assume you are setting a local variable rather than calling the writer method</strong> (this is what led to the bug in the code snippet above).</p></li>
<li><p>When simply reading the value of an instance variable, the reader method may be called with no prefix. The receiver of the reader method is implicitly <code>self</code>.</p></li>
</ul>


<p>Here&rsquo;s a code example to demonstrate usage of the previous guidelines:</p>

<pre><code class="ruby">class Shoe
  attr_accessor :condition

  # we're initializing the attribute @condition, so we need to call the instance variable directly
  def initialize(condition="new")
    @condition = condition
  end

  # we're changing the value of @condition, so we call the writer method, which needs to be called on self or else Ruby thinks we're just setting a local variable
  def wear
    self.condition = "worn"
  end

  def cobble
    self.condition = "new"
  end

  # we're just reading the value of @condition, so we can call the reader method (whose implicit receiver is self)
  def report_condition
    if condition == "new"
      "This shoe is in perfect condition!"
    elsif condition == "worn"
      "This shoe needs to be cobbled!"
    else
      "The condition of this shoe is #{condition}."
    end
  end

end
</code></pre>

<p>Note that you can also use <code>self.</code> when calling reader methods, and it sometimes feels semantically more natural to do so. Unlike using <code>@</code>, this still delegates responsibility to the reader method, exactly the same as calling the reader method with no <code>self.</code> prefix.</p>

<p>TL;DR</p>

<ul>
<li><p>Use <code>@</code> in the initialize or reader/writer methods.</p></li>
<li><p>It&rsquo;s better to delegate to reader and writer methods rather than accessing instance variables directly.</p></li>
<li><p>You cannot call a writer method without the explicit receiver, <code>self</code>. When Ruby sees the <code>=</code> (or <code>-=</code>, or <code>+=</code>), it assumes you are setting a local variable if no receiver is specified.</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript: The Honey Badger of Programming Languages]]></title>
    <link href="http://roseweixel.github.io/blog/2014/11/15/javascript-the-honey-badger-of-programming-languages/"/>
    <updated>2014-11-15T17:49:20-05:00</updated>
    <id>http://roseweixel.github.io/blog/2014/11/15/javascript-the-honey-badger-of-programming-languages</id>
    <content type="html"><![CDATA[<p>After spending six weeks in Ruby land, last week was all JavaScript all the time at <a href="http://www.flatironschool.com">The Flatiron School</a>. I feel like I&rsquo;ve just added a hammer with superpowers to my programming tool box. You might bend a few nails along the way, but you can build almost anything with it.</p>

<p>Also, JavaScript is weird. Although it cares a lot about semi-colons, there are some important ways in which, just like the honey badger, it just doesn&rsquo;t seem to care at all. Here I will attempt to get comfortable with this strange new animal by diving deep into some of its more surprising aspects. To provide some contrast and context, especially for those who (like myself) are more at home with Ruby, I&rsquo;ll make some comparisons as I go along.</p>

<h2>Scope</h2>

<p>Let&rsquo;s dive right in. For comparison, here is some Ruby:</p>

<pre><code class="ruby javascript-ruby-comparison/ruby.rb">dog = 'Fido'

def bark
  puts "#{dog} says woof"
end

bark
</code></pre>

<p>In Ruby, a method is a scope gate, so <code>dog</code> is not defined in the <code>bark</code> method. Ruby will tell you this in no uncertain terms:</p>

<pre><code class="console">[18:12:24] javascript-ruby-comparison
♥ ruby ruby.rb
ruby.rb:4:in `bark': undefined local variable or method `dog' for main:Object (NameError)
    from ruby.rb:7:in `&lt;main&gt;'
</code></pre>

<p>On line 4, Ruby has no idea about what <code>dog</code> is, because the universe in line 4 is the local scope of the method <code>bark</code>. This scope gate can be very nice, since it means we cannot accidentally overwrite a variable we defined in the global scope from within a method. In order to make <code>dog</code> into a global variable that we can access inside the method, Ruby requires us to be very explicit about it, putting a <code>$</code> in front of that variable both where it is defined and wherever it is referenced:</p>

<pre><code class="ruby javascript-ruby-comparison/ruby.rb">$dog = 'Fido'

def bark
  puts "#{$dog} says woof"
end

bark
</code></pre>

<p>Now we clearly see that we are playing with a global variable, and Ruby plays along:</p>

<pre><code class="console">[18:32:01] javascript-ruby-comparison
♥ ruby ruby.rb
Fido says woof
</code></pre>

<p>While JavaScript does have a concept of functions creating a new scope, variables assigned outside of those functions can easily be accessed from within:</p>

<pre><code class="javascript javascript-ruby-comparison/javascript.js">var dog = 'Fido'

function bark(){
  console.log(dog + ' says woof');
}

bark();
</code></pre>

<p>JavaScript doesn&rsquo;t care if you want to reach outside the function&rsquo;s scope to grab a variable. JavaScript functions have knowledge of the universe around them:
<code>console
[18:38:34] javascript-ruby-comparison
♥ jsc javascript.js
--&gt; Fido says woof
</code></p>

<p>So what else can you do with a variable defined outside a function from within a function? As it turns out, JavaScript will let you do whatever you want:</p>

<pre><code class="javascript javascript-ruby-comparison/javascript.js">var dog = 'Fido'

function bark(){
  dog = 'Spot'
  debug(dog + ' says woof from within the function');
}

debug(dog + ' says woof outside of the function');
bark();
debug(dog + ' says woof after the function is called');
</code></pre>

<p>What happened to Fido?</p>

<pre><code class="console">[20:47:14] javascript-ruby-comparison
♥ jsc javascript.js 
--&gt; Fido says woof outside of the function
--&gt; Spot says woof from within the function
--&gt; Spot says woof after the function is called
</code></pre>

<p>Looks like the name change was permanent. And by the way, by always using <code>var</code>, we can prevent such dangers:</p>

<pre><code class="javascript javascript-ruby-comparison/javascript.js">var dog = 'Fido'

function bark(){
  var dog = 'Spot'
  debug(dog + ' says woof from within the function');
}

debug(dog + ' says woof outside of the function');
bark();
debug(dog + ' says woof after the function is called');
</code></pre>

<pre><code class="console">♥ jsc javascript.js 
--&gt; Fido says woof outside of the function
--&gt; Spot says woof from within the function
--&gt; Fido says woof after the function is called
</code></pre>

<p>By using <code>var</code> within the function, we created an entirely different <code>dog</code> and did not alter the original.</p>

<h2>Arity Schmarity</h2>

<p>Before we go any further, I must admit that hadn&rsquo;t heard the word arity until I crossed paths with JavaScript. I reckon I&rsquo;m not alone in this, so here&rsquo;s a definition courtesy of <a href="http://en.wikipedia.org/wiki/Arity">Wikipedia</a>:</p>

<blockquote><p>In logic, mathematics, and computer science, the <strong>arity</strong> of a function or operation is the number of arguments or operands the function or operation accepts.</p></blockquote>

<p>OK. This sounds like something I know from Ruby land. Here&rsquo;s a familiar example:</p>

<pre><code class="ruby javascript-ruby-comparison/ruby.rb">class Dog
  def initialize(name)
    @name = name
  end

end
</code></pre>

<p>According to the above definition, the <code>initialize</code> method of the <code>Dog</code> class takes exactly one argument. You could say its arity is one (more commonly, this is known as a unary function).</p>

<p>Ruby cares about arity, and will give you very nice error messages to make you aware of this:</p>

<pre><code class="console">2.1.2 :002 &gt; require 'ruby.rb'
 =&gt; true 
2.1.2 :003 &gt; fido = Dog.new
ArgumentError: wrong number of arguments (0 for 1)
    from /Users/rose/Development/code/javascript-ruby-comparison/ruby.rb:3:in `initialize'
    from (irb):3:in `new'
    from (irb):3
    from /Users/rose/.rvm/rubies/ruby-2.1.2/bin/irb:11:in `&lt;main&gt;'
</code></pre>

<p>I tried to make a new <code>Dog</code> with 0 arguments, and Ruby was expecting 1. So Ruby blew up. This is arity checking at work.</p>

<p>JavaScript does not care about arity! Here&rsquo;s photographic proof (this is a lot easier to see in the browser&rsquo;s JavaScript console):</p>

<p><img class="center" src="/images/js-no-arity-checking.png" width="700" height="700" title="&lsquo;image&rsquo; &lsquo;images&rsquo;" ></p>

<p>To review what just happened:</p>

<ul>
<li>I made a constructor function for <code>Dog</code> (yeah, functions are really all-purpose in JavaScript, so that right there was a class definition of sorts).</li>
<li>In this constructor function, I said that <code>Dog</code> takes a <code>name</code>.</li>
<li>I made a new <code>Dog</code>, <code>fido</code>, and did not pass in any arguments.</li>
<li>JavaScript did not blow up.</li>
<li>Just to be sure, I asked JavaScript to show me <code>fido</code>.</li>
<li>JavaScript returned a <code>Dog</code> object with a <code>name</code> of <code>undefined</code>.</li>
</ul>


<p>Whenever it can, JavaScript will try to help you out, whether you want it to or not. If you say a <code>Dog</code> has a <code>name</code> and then forget to give it one, JavaScript will trust that this was your intent and will throw in an <code>undefined</code> rather than yelling at you.</p>

<h2>Teaching Old Dogs New Tricks</h2>

<p>Ruby cares about defining an object&rsquo;s attributes and behaviors up front. Objects in Ruby behave in consistent and predicatable ways.</p>

<p>Using our prior definition of the <code>Dog</code> class, Ruby will let us know that we haven&rsquo;t taught <code>Dog</code>s to bark yet:</p>

<pre><code class="console">2.1.2 :001 &gt; require 'ruby.rb'
 =&gt; true 
2.1.2 :002 &gt; fido = Dog.new('Fido')
 =&gt; #&lt;Dog:0x007f9fd5757c78 @name="Fido"&gt; 
2.1.2 :003 &gt; fido.bark
NoMethodError: undefined method `bark' for #&lt;Dog:0x007f9fd5757c78 @name="Fido"&gt;
    from (irb):3
    from /Users/rose/.rvm/rubies/ruby-2.1.2/bin/irb:11:in `&lt;main&gt;'
</code></pre>

<p>Of course! We did not define a <code>bark</code> method, so we get a predictable <code>NoMethodError</code>.</p>

<p>JavaScript doesn&rsquo;t care about defining all of an object&rsquo;s attributes and behaviors up front, and pretty much lets you do whatever you want, whenever you want. Here&rsquo;s a continuation of the console session above:</p>

<p><img class="center" src="/images/js-fido-barks.png" width="700" height="700" title="&lsquo;image&rsquo; &lsquo;images&rsquo;" ></p>

<ul>
<li>I asked <code>fido</code> to bark, having never defined a <code>bark</code> function or attribute. JavaScript quietly returned <code>undefined</code>.</li>
<li>I told JavaScript to give <code>fido.bark</code> the value of <code>'woof'</code>, and JavaScript happily obliged.</li>
<li>Now not only can <code>fido</code> bark, but the <code>Dog</code> object that is <code>fido</code> has been fundamentally altered, now containing a new <code>bark</code> attribute!</li>
</ul>


<p>So, can all <code>Dog</code>s bark now?</p>

<p><img class="center" src="/images/js-spot-cant-bark.png" width="700" height="700" title="&lsquo;image&rsquo; &lsquo;images&rsquo;" ></p>

<p>No, they cannot. Now the definition of <code>Dog</code> is a bit of a mess - <code>fido</code> is a <code>Dog</code> that can bark, while <code>spot</code> can&rsquo;t. The very nature of <code>Dog</code>-ness has been brought into question, and JavaScript is fine with all of this. No errors, no complaining. For better or for worse.</p>

<h2>Playing with Global Scope</h2>

<p>This one is extra weird, so get ready.</p>

<p>In the hierarchy of Ruby objects, <code>main</code> is the top level:</p>

<pre><code class="console">♥ irb
2.1.2 :001 &gt; self
 =&gt; main 
2.1.2 :002 &gt; self.class
 =&gt; Object 
2.1.2 :003 &gt; 
</code></pre>

<p>I don&rsquo;t know why you&rsquo;d want to mess with <code>main</code>, and Ruby makes certain it&rsquo;s not easy to do so (in fact, it&rsquo;s impossible to do so by accident):</p>

<pre><code class="console">2.1.2 :003 &gt; self.name
NoMethodError: undefined method `name' for main:Object
    from (irb):3
    from /Users/rose/.rvm/rubies/ruby-2.1.2/bin/irb:11:in `&lt;main&gt;'
2.1.2 :004 &gt; self.name = "Rose"
NoMethodError: undefined method `name=' for main:Object
    from (irb):4
    from /Users/rose/.rvm/rubies/ruby-2.1.2/bin/irb:11:in `&lt;main&gt;'
2.1.2 :005 &gt; 
</code></pre>

<p>Want to mess with the top-level object in JavaScript? Go right ahead, JavaScript doesn&rsquo;t care!</p>

<pre><code class="console">&gt;&gt;&gt; this.name
undefined
&gt;&gt;&gt; this.name = "Rose"
Rose
&gt;&gt;&gt; this
[object global]
&gt;&gt;&gt; this.name
Rose
&gt;&gt;&gt; 
</code></pre>

<p>I just named the global object after myself, and JavaScript did not care one bit. This example is a bit contrived, but believe me that some undesireable things can happen if you don&rsquo;t watch out for global assignment. Here&rsquo;s a (slightly) less contrived example:</p>

<pre><code class="javascript javascript-ruby-comparison/javascript.js">function Dog(name){
    this.name = name;
    this.hunger = true;
    this.bowl = 'full';
}

Dog.prototype.checkNeeds = function() {
    if(this.hunger === true){
        (function feed(){
            this.hunger = false;
            this.bowl = 'empty';
        })();
    } else {
        (function play(){
            this.hunger = true;
        })();
    }
};

var fido = new Dog('Fido');

debug(fido.hunger);

fido.checkNeeds();

debug(fido.hunger);
debug(this.hunger);
debug(this);
</code></pre>

<p>If I run this code, here&rsquo;s what my <code>debug</code> statements reveal:</p>

<pre><code class="console">♥ jsc javascript.js 
--&gt; true            // fido was born hungry
--&gt; true            // after calling checkNeeds(), he's still hungry...
--&gt; false           // ...but this isn't hungry...
--&gt; [object global] // because we fed the global object instead of fido!
</code></pre>

<p>As you can see, Bad Things can happen when the global object is always available. Fortunately, there is a way for you to make JavaScript care about this! You just have to tell JavaScript to <code>use strict</code>.</p>

<pre><code class="javascript javascript-ruby-comparison/javascript.js">'use strict';

function Dog(name){
    // the rest of my code...
</code></pre>

<p>Now, when we run the code, JavaScript will blow up just the way we want it to!</p>

<pre><code class="console">♥ jsc javascript.js 
--&gt; true
Exception: TypeError: Attempted to assign to readonly property.
feed@javascript.js:12:17
checkNeeds@javascript.js:14:11
global code@javascript.js:24:16
</code></pre>

<h2>The Moral of the Story</h2>

<p>This was a long post, and it probably could get longer. But I think this is enough to chew on for now. The bottom line is that JavaScript has some crazy ways, but these ways are not unlearnable, and the reward for learning them is a much saner coding experience. If you understand the quirks, remember your <code>var</code>s, and always <code>use strict</code>, you and JavaScript can be unstoppable, just like the honey badger.</p>

<p><img class="center" src="/images/nothing-stops-honey-badger.png" width="500" height="500" title="&lsquo;image&rsquo; &lsquo;images&rsquo;" ></p>
]]></content>
  </entry>
  
</feed>
