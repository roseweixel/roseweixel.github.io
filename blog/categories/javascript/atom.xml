<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Javascript | code.life]]></title>
  <link href="http://roseweixel.github.io/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://roseweixel.github.io/"/>
  <updated>2015-07-02T09:49:30-04:00</updated>
  <id>http://roseweixel.github.io/</id>
  <author>
    <name><![CDATA[Rose Weixel]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Live Updating DOM Elements With jQuery and Ajax]]></title>
    <link href="http://roseweixel.github.io/blog/2015/06/04/live-updating-dom-elements-with-jquery-and-ajax/"/>
    <updated>2015-06-04T21:20:11-04:00</updated>
    <id>http://roseweixel.github.io/blog/2015/06/04/live-updating-dom-elements-with-jquery-and-ajax</id>
    <content type="html"><![CDATA[<p>Any web app that involves real-time interactions between users requires some form of live notifications. Implementing this, for a beginner developer such as myself, can be a daunting challenge. This post will walk through how I went about solving this problem when working on <a href="http://www.lacquerlove.com">Lacquer Love&amp;Lend</a>, a social network for nail polish lovers that allows users to interact via friendships and lacquer loans. As with any social network, I wanted users to see live notifications whenever they received a new friendship or transaction request, or when the <code>state</code> of any of their friendships or transactions changed. The example that follows assumes some basic knowledge of Rails.</p>

<h2>Some Basic Ajax</h2>

<p>In a basic Ajax request, a user clicks on something, the Ajax request gets sent, and a part of the DOM gets updated without the entire page reloading.</p>

<p><img class="center" src="/images/basic_ajax_request.png" width="600" height="600" title="&lsquo;image&rsquo; &lsquo;images&rsquo;" ></p>

<p>The code usually looks something like this:</p>

<pre><code class="javascript app/assets/javascripts/something.js">// 1) Wait for the document to be ready.
$(document).ready(function() {
    // 2) Listen for the submission of the form.
    $("form").submit(function(event) {

        // 3) Prevent an entire page load (or reload).
        event.preventDefault();

        // 4) Grab the information from the form needed for the Ajax request.
        var formAction = $(this).attr('action'); // e.g. '/somethings'
        var formMethod = $(this).attr('method'); // e.g. 'post'
        var formData   = $(this).serializeArray(); // grabs the form data and makes your params nicely structured!

        // 5) Make the Ajax request, which will hit the 'create' action in the 'somethings' controller
        $.ajax({
          url:  formAction,
          type: formMethod,
          data: formData
        });
    });
});
</code></pre>

<p>For the basic example, I&rsquo;m omitting the controller and view as the main focus of this post is how I implemented live notifications. A more detailed explanation of basic Ajax will follow in my next post - a prequel to this one, if you will :).</p>

<p>With the code above, a single user&rsquo;s action of submitting the form sets off the whole chain of events. But for live notifications, more than one user is involved and the action that changes one user&rsquo;s data is hapenning on another user&rsquo;s client! Making this happen twisted my brain into a pretzel at first, but after several attempts I got the functionality I wanted. A description of these follows below.</p>

<h2>Attempt #1: Refresh a Single Div Every 3 Seconds</h2>

<p>In order to get a single part of the page to update without the entire page refreshing, I used a <code>setInterval()</code> function to make an Ajax request every 3 seconds. This would make a <code>GET</code> request to a custom route: <code>users/:id/live_notifications</code> that hit an action named <code>live_notifications</code> in the <code>UsersController</code>.</p>

<p>1) Separate the &ldquo;live notifications&rdquo; div into a partial:</p>

<p><img class="center" src="/images/live_notifications_div.png" width="600" height="600" title="&lsquo;image&rsquo; &lsquo;images&rsquo;" ></p>

<p>2) Create a route and a controller action:</p>

<pre><code class="ruby config/routes.rb">get 'users/:id/live_notifications' =&gt; 'users#live_notifications'
</code></pre>

<pre><code class="ruby app/controllers/users_controller.rb">def live_notifications
  @user = User.find(params[:id])

  respond_to do |format|
    format.js
  end
end
</code></pre>

<p>3) Make the Ajax request to hit <code>users#live_notifications</code> every 3 seconds:</p>

<pre><code class="javascript app/assets/javascripts/live_notifications.js">
$(document).ready(function() {
    var currentUrl = window.location.href;

    // Given that we're at a url like 'users/:id', this saves the unique id of the user whose show page we are currently looking at
    var userID = currentUrl.substr(currentUrl.lastIndexOf('/') + 1);

    setInterval(function() {
        $.ajax({
            type: "GET",
            url: "/users/" + userID + "/live_notifications"
        });
    }, 3000); 
});
</code></pre>

<p>4) Once this Ajax request hits the controller (which is set up to handle a JavaScript response in the <code>respond_to</code> block), Rails by default will look for <code>app/views/users/live_notifications.js.erb</code> and execute the following to refresh the partial:</p>

<pre><code class="javascript app/views/users/live_notifications.js.erb">$("#live-notifications").html('&lt;%= j render "live_notifications", user: @user %&gt;');
</code></pre>

<p>This is all it took to refresh that single div every 3 seconds. However, it was far from ideal:</p>

<ul>
<li><p>Lots of refreshing for no reason (like when you&rsquo;re looking at another user&rsquo;s page and no notifications are displayed, or when nothing has changed)</p></li>
<li><p>Things that never would change are part of the div that is being refreshed (like header text, for example)</p></li>
<li><p>Last but not least, this kind of indescriminate refreshing breaks the functionality of forms&hellip;</p></li>
</ul>


<p><img class="center" src="/images/form-refreshing-problems.gif" width="600" height="600" title="&lsquo;image&rsquo; &lsquo;images&rsquo;" ></p>

<h2>A Quick Fix for Form Problems</h2>

<p>Thanks to jQuery pseudo selectors, we can stop the Ajax call from being made if an input field is currently focused:</p>

<pre><code class="javascript app/assets/javascripts/live_notifications.js">$(document).ready(function() {
    ...

    setInterval(function() {
        // prevent the Ajax call from being made if the input field in the live notifications div is focused
        if (!$('#transaction_due_date').is(":focus")){
            $.ajax({
                ...
            });
        }
    }, 3000); 
});
</code></pre>

<h2>Getting More Specific</h2>

<p>The next logical step up from the &ldquo;refresh everything all the time&rdquo; strategy was to refresh the live notifications div only when looking at one&rsquo;s own show page (in other words, when the user id in the url matches the id of the current user stored in the session).</p>

<p>In order to make the <code>current_user</code> from the Rails backend available to JavaScript, I put the following in my application layout:</p>

<p>&#8220;`html app/views/layouts/application.html.erb</p>

<script type="text/javascript">
  window.currentUser = {
      id : "<%= current_user.id if current_user %>"
  }
</script>


<pre><code>
With `current_user.id` stored in an object attached to the window, making sure the Ajax call only gets made when a user is looking at his/her own profile page is simple:
</code></pre>

<p>$(document).ready(function() {
    var currentUrl = window.location.href;
    var userID = currentUrl.substr(currentUrl.lastIndexOf(&lsquo;/&rsquo;) + 1);</p>

<pre><code>if (currentUrl.endsWith('/users/' + window.currentUser.id)) {
    setInterval(function() {
        ...
    }, 3000); 
}
</code></pre>

<p>});
&#8220;`</p>

<h2>The Final Refactor: Only Refresh When things Have Changed</h2>

<p>To change only things that have changed, when they have changed, the ability to compare what&rsquo;s on the back end with what&rsquo;s on the front end is needed.</p>

<p>For this part, I needed to capture the state of all of a user&rsquo;s transactions and friendships (the two things for which there may be a notification), and hide this information on the page. I created a method in the <code>User</code> model that returns all of these states in an array, and put this into a hidden element on the page:</p>

<p><img class="center" src="/images/hidden-tracker.png" width="600" height="600" title="&lsquo;image&rsquo; &lsquo;images&rsquo;" ></p>

<p>Since the transactions could also have due dates, I did something similar for those.</p>

<p>The next step was to change the code in <code>app/views/users/live_notifications.js.erb</code> to check the current state of the user&rsquo;s transactions and friendships and see if the <code>#all-categories-tracker</code> is up to date:</p>

<pre><code class="javascript app/views/users/live_notifications.js.erb">var previousInteractionStates = $('#all-categories-tracker').text();
var currentInteractionStates = "&lt;%= @user.transactions_and_friendships_data_array %&gt;";

var countOrStatusChanged = previousInteractionStates !== currentInteractionStates;

var previousDueDates = $.map($(".due-date"), function(val) {
  return $(val).text()
});
var currentDueDates = "&lt;%= @user.due_date_list %&gt;";

var dueDatesChanged = currentDueDates !== previousDueDates.toString();

if (countOrStatusChanged || dueDatesChanged) {
    // UPDATE THE “MASTER TRACKER”
    $('#all-categories-tracker').html(currentInteractionStates);

    // CHECK EACH INDIVIDUAL CATEGORY AND CHANGE ONLY WHAT’S NEEDED
    &lt;% notification_categories.each do |category| %&gt;
        var currentCategory = "&lt;%= category %&gt;";

        // DEAL WITH ANY CHANGES IN COUNT OR STATE
        var currentCategoryStates  = "&lt;%= @user.states(category) %&gt;";
        var previousCategoryStates = $(".category-tracker#" + currentCategory).html();

        // if there's been a change for this category
        if (currentCategoryStates !== previousCategoryStates) {
            // Update the DOM accordingly
             …
        }

        // DEAL WITH CHANGED DUE DATES FOR TRANSACTIONS
        if (currentCategory === 'active_requested_transactions' &amp;&amp; dueDatesChanged) {
            // Update the DOM accordingly
              …
        }        
    &lt;% end %&gt;
}
</code></pre>

<p>With this final refactoring, checks are in place that stop the unnecessary refreshing that came with the first version:</p>

<p><img class="center" src="/images/live-notifications-flow.png" width="600" height="600" title="&lsquo;image&rsquo; &lsquo;images&rsquo;" ></p>

<h2>Alternatives</h2>

<p>The method I described above for achieving live notifications is very basic Ajax polling. Every serveral seconds, a request/response cycle fires. This inevitably means lots of database querying, even if the amount of refreshing can be reduced to a minimum. In my search for ways to reduce the burden this puts on the database, here are some other techniques I&rsquo;ve found that may offer some advantages:</p>

<p>1) Long Polling</p>

<p>With this technique, a request fires and waits for a change before sending a response. Then another request can be fired.</p>

<p>2) Web Sockets</p>

<p>Very different than Ajax polling or long polling, web sockets are used for continuous communication between server and client.</p>

<p>3) Server-Sent Events</p>

<p>Unlike web sockets which allows for continuous back and forth from server to client, this technique establishes a persistent connection that allows the server to send data to the client, but not the other way around.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript: The Honey Badger of Programming Languages]]></title>
    <link href="http://roseweixel.github.io/blog/2014/11/15/javascript-the-honey-badger-of-programming-languages/"/>
    <updated>2014-11-15T17:49:20-05:00</updated>
    <id>http://roseweixel.github.io/blog/2014/11/15/javascript-the-honey-badger-of-programming-languages</id>
    <content type="html"><![CDATA[<p>After spending six weeks in Ruby land, last week was all JavaScript all the time at <a href="http://www.flatironschool.com">The Flatiron School</a>. I feel like I&rsquo;ve just added a hammer with superpowers to my programming tool box. You might bend a few nails along the way, but you can build almost anything with it.</p>

<p>Also, JavaScript is weird. Although it cares a lot about semi-colons, there are some important ways in which, just like the honey badger, it just doesn&rsquo;t seem to care at all. Here I will attempt to get comfortable with this strange new animal by diving deep into some of its more surprising aspects. To provide some contrast and context, especially for those who (like myself) are more at home with Ruby, I&rsquo;ll make some comparisons as I go along.</p>

<h2>Scope</h2>

<p>Let&rsquo;s dive right in. For comparison, here is some Ruby:</p>

<pre><code class="ruby javascript-ruby-comparison/ruby.rb">dog = 'Fido'

def bark
  puts "#{dog} says woof"
end

bark
</code></pre>

<p>In Ruby, a method is a scope gate, so <code>dog</code> is not defined in the <code>bark</code> method. Ruby will tell you this in no uncertain terms:</p>

<pre><code class="console">[18:12:24] javascript-ruby-comparison
♥ ruby ruby.rb
ruby.rb:4:in `bark': undefined local variable or method `dog' for main:Object (NameError)
    from ruby.rb:7:in `&lt;main&gt;'
</code></pre>

<p>On line 4, Ruby has no idea about what <code>dog</code> is, because the universe in line 4 is the local scope of the method <code>bark</code>. This scope gate can be very nice, since it means we cannot accidentally overwrite a variable we defined in the global scope from within a method. In order to make <code>dog</code> into a global variable that we can access inside the method, Ruby requires us to be very explicit about it, putting a <code>$</code> in front of that variable both where it is defined and wherever it is referenced:</p>

<pre><code class="ruby javascript-ruby-comparison/ruby.rb">$dog = 'Fido'

def bark
  puts "#{$dog} says woof"
end

bark
</code></pre>

<p>Now we clearly see that we are playing with a global variable, and Ruby plays along:</p>

<pre><code class="console">[18:32:01] javascript-ruby-comparison
♥ ruby ruby.rb
Fido says woof
</code></pre>

<p>While JavaScript does have a concept of functions creating a new scope, variables assigned outside of those functions can easily be accessed from within:</p>

<pre><code class="javascript javascript-ruby-comparison/javascript.js">var dog = 'Fido'

function bark(){
  console.log(dog + ' says woof');
}

bark();
</code></pre>

<p>JavaScript doesn&rsquo;t care if you want to reach outside the function&rsquo;s scope to grab a variable. JavaScript functions have knowledge of the universe around them:
<code>console
[18:38:34] javascript-ruby-comparison
♥ jsc javascript.js
--&gt; Fido says woof
</code></p>

<p>So what else can you do with a variable defined outside a function from within a function? As it turns out, JavaScript will let you do whatever you want:</p>

<pre><code class="javascript javascript-ruby-comparison/javascript.js">var dog = 'Fido'

function bark(){
  dog = 'Spot'
  debug(dog + ' says woof from within the function');
}

debug(dog + ' says woof outside of the function');
bark();
debug(dog + ' says woof after the function is called');
</code></pre>

<p>What happened to Fido?</p>

<pre><code class="console">[20:47:14] javascript-ruby-comparison
♥ jsc javascript.js 
--&gt; Fido says woof outside of the function
--&gt; Spot says woof from within the function
--&gt; Spot says woof after the function is called
</code></pre>

<p>Looks like the name change was permanent. And by the way, by always using <code>var</code>, we can prevent such dangers:</p>

<pre><code class="javascript javascript-ruby-comparison/javascript.js">var dog = 'Fido'

function bark(){
  var dog = 'Spot'
  debug(dog + ' says woof from within the function');
}

debug(dog + ' says woof outside of the function');
bark();
debug(dog + ' says woof after the function is called');
</code></pre>

<pre><code class="console">♥ jsc javascript.js 
--&gt; Fido says woof outside of the function
--&gt; Spot says woof from within the function
--&gt; Fido says woof after the function is called
</code></pre>

<p>By using <code>var</code> within the function, we created an entirely different <code>dog</code> and did not alter the original.</p>

<h2>Arity Schmarity</h2>

<p>Before we go any further, I must admit that hadn&rsquo;t heard the word arity until I crossed paths with JavaScript. I reckon I&rsquo;m not alone in this, so here&rsquo;s a definition courtesy of <a href="http://en.wikipedia.org/wiki/Arity">Wikipedia</a>:</p>

<blockquote><p>In logic, mathematics, and computer science, the <strong>arity</strong> of a function or operation is the number of arguments or operands the function or operation accepts.</p></blockquote>

<p>OK. This sounds like something I know from Ruby land. Here&rsquo;s a familiar example:</p>

<pre><code class="ruby javascript-ruby-comparison/ruby.rb">class Dog
  def initialize(name)
    @name = name
  end

end
</code></pre>

<p>According to the above definition, the <code>initialize</code> method of the <code>Dog</code> class takes exactly one argument. You could say its arity is one (more commonly, this is known as a unary function).</p>

<p>Ruby cares about arity, and will give you very nice error messages to make you aware of this:</p>

<pre><code class="console">2.1.2 :002 &gt; require 'ruby.rb'
 =&gt; true 
2.1.2 :003 &gt; fido = Dog.new
ArgumentError: wrong number of arguments (0 for 1)
    from /Users/rose/Development/code/javascript-ruby-comparison/ruby.rb:3:in `initialize'
    from (irb):3:in `new'
    from (irb):3
    from /Users/rose/.rvm/rubies/ruby-2.1.2/bin/irb:11:in `&lt;main&gt;'
</code></pre>

<p>I tried to make a new <code>Dog</code> with 0 arguments, and Ruby was expecting 1. So Ruby blew up. This is arity checking at work.</p>

<p>JavaScript does not care about arity! Here&rsquo;s photographic proof (this is a lot easier to see in the browser&rsquo;s JavaScript console):</p>

<p><img class="center" src="/images/js-no-arity-checking.png" width="700" height="700" title="&lsquo;image&rsquo; &lsquo;images&rsquo;" ></p>

<p>To review what just happened:</p>

<ul>
<li>I made a constructor function for <code>Dog</code> (yeah, functions are really all-purpose in JavaScript, so that right there was a class definition of sorts).</li>
<li>In this constructor function, I said that <code>Dog</code> takes a <code>name</code>.</li>
<li>I made a new <code>Dog</code>, <code>fido</code>, and did not pass in any arguments.</li>
<li>JavaScript did not blow up.</li>
<li>Just to be sure, I asked JavaScript to show me <code>fido</code>.</li>
<li>JavaScript returned a <code>Dog</code> object with a <code>name</code> of <code>undefined</code>.</li>
</ul>


<p>Whenever it can, JavaScript will try to help you out, whether you want it to or not. If you say a <code>Dog</code> has a <code>name</code> and then forget to give it one, JavaScript will trust that this was your intent and will throw in an <code>undefined</code> rather than yelling at you.</p>

<h2>Teaching Old Dogs New Tricks</h2>

<p>Ruby cares about defining an object&rsquo;s attributes and behaviors up front. Objects in Ruby behave in consistent and predicatable ways.</p>

<p>Using our prior definition of the <code>Dog</code> class, Ruby will let us know that we haven&rsquo;t taught <code>Dog</code>s to bark yet:</p>

<pre><code class="console">2.1.2 :001 &gt; require 'ruby.rb'
 =&gt; true 
2.1.2 :002 &gt; fido = Dog.new('Fido')
 =&gt; #&lt;Dog:0x007f9fd5757c78 @name="Fido"&gt; 
2.1.2 :003 &gt; fido.bark
NoMethodError: undefined method `bark' for #&lt;Dog:0x007f9fd5757c78 @name="Fido"&gt;
    from (irb):3
    from /Users/rose/.rvm/rubies/ruby-2.1.2/bin/irb:11:in `&lt;main&gt;'
</code></pre>

<p>Of course! We did not define a <code>bark</code> method, so we get a predictable <code>NoMethodError</code>.</p>

<p>JavaScript doesn&rsquo;t care about defining all of an object&rsquo;s attributes and behaviors up front, and pretty much lets you do whatever you want, whenever you want. Here&rsquo;s a continuation of the console session above:</p>

<p><img class="center" src="/images/js-fido-barks.png" width="700" height="700" title="&lsquo;image&rsquo; &lsquo;images&rsquo;" ></p>

<ul>
<li>I asked <code>fido</code> to bark, having never defined a <code>bark</code> function or attribute. JavaScript quietly returned <code>undefined</code>.</li>
<li>I told JavaScript to give <code>fido.bark</code> the value of <code>'woof'</code>, and JavaScript happily obliged.</li>
<li>Now not only can <code>fido</code> bark, but the <code>Dog</code> object that is <code>fido</code> has been fundamentally altered, now containing a new <code>bark</code> attribute!</li>
</ul>


<p>So, can all <code>Dog</code>s bark now?</p>

<p><img class="center" src="/images/js-spot-cant-bark.png" width="700" height="700" title="&lsquo;image&rsquo; &lsquo;images&rsquo;" ></p>

<p>No, they cannot. Now the definition of <code>Dog</code> is a bit of a mess - <code>fido</code> is a <code>Dog</code> that can bark, while <code>spot</code> can&rsquo;t. The very nature of <code>Dog</code>-ness has been brought into question, and JavaScript is fine with all of this. No errors, no complaining. For better or for worse.</p>

<h2>Playing with Global Scope</h2>

<p>This one is extra weird, so get ready.</p>

<p>In the hierarchy of Ruby objects, <code>main</code> is the top level:</p>

<pre><code class="console">♥ irb
2.1.2 :001 &gt; self
 =&gt; main 
2.1.2 :002 &gt; self.class
 =&gt; Object 
2.1.2 :003 &gt; 
</code></pre>

<p>I don&rsquo;t know why you&rsquo;d want to mess with <code>main</code>, and Ruby makes certain it&rsquo;s not easy to do so (in fact, it&rsquo;s impossible to do so by accident):</p>

<pre><code class="console">2.1.2 :003 &gt; self.name
NoMethodError: undefined method `name' for main:Object
    from (irb):3
    from /Users/rose/.rvm/rubies/ruby-2.1.2/bin/irb:11:in `&lt;main&gt;'
2.1.2 :004 &gt; self.name = "Rose"
NoMethodError: undefined method `name=' for main:Object
    from (irb):4
    from /Users/rose/.rvm/rubies/ruby-2.1.2/bin/irb:11:in `&lt;main&gt;'
2.1.2 :005 &gt; 
</code></pre>

<p>Want to mess with the top-level object in JavaScript? Go right ahead, JavaScript doesn&rsquo;t care!</p>

<pre><code class="console">&gt;&gt;&gt; this.name
undefined
&gt;&gt;&gt; this.name = "Rose"
Rose
&gt;&gt;&gt; this
[object global]
&gt;&gt;&gt; this.name
Rose
&gt;&gt;&gt; 
</code></pre>

<p>I just named the global object after myself, and JavaScript did not care one bit. This example is a bit contrived, but believe me that some undesireable things can happen if you don&rsquo;t watch out for global assignment. Here&rsquo;s a (slightly) less contrived example:</p>

<pre><code class="javascript javascript-ruby-comparison/javascript.js">function Dog(name){
    this.name = name;
    this.hunger = true;
    this.bowl = 'full';
}

Dog.prototype.checkNeeds = function() {
    if(this.hunger === true){
        (function feed(){
            this.hunger = false;
            this.bowl = 'empty';
        })();
    } else {
        (function play(){
            this.hunger = true;
        })();
    }
};

var fido = new Dog('Fido');

debug(fido.hunger);

fido.checkNeeds();

debug(fido.hunger);
debug(this.hunger);
debug(this);
</code></pre>

<p>If I run this code, here&rsquo;s what my <code>debug</code> statements reveal:</p>

<pre><code class="console">♥ jsc javascript.js 
--&gt; true            // fido was born hungry
--&gt; true            // after calling checkNeeds(), he's still hungry...
--&gt; false           // ...but this isn't hungry...
--&gt; [object global] // because we fed the global object instead of fido!
</code></pre>

<p>As you can see, Bad Things can happen when the global object is always available. Fortunately, there is a way for you to make JavaScript care about this! You just have to tell JavaScript to <code>use strict</code>.</p>

<pre><code class="javascript javascript-ruby-comparison/javascript.js">'use strict';

function Dog(name){
    // the rest of my code...
</code></pre>

<p>Now, when we run the code, JavaScript will blow up just the way we want it to!</p>

<pre><code class="console">♥ jsc javascript.js 
--&gt; true
Exception: TypeError: Attempted to assign to readonly property.
feed@javascript.js:12:17
checkNeeds@javascript.js:14:11
global code@javascript.js:24:16
</code></pre>

<h2>The Moral of the Story</h2>

<p>This was a long post, and it probably could get longer. But I think this is enough to chew on for now. The bottom line is that JavaScript has some crazy ways, but these ways are not unlearnable, and the reward for learning them is a much saner coding experience. If you understand the quirks, remember your <code>var</code>s, and always <code>use strict</code>, you and JavaScript can be unstoppable, just like the honey badger.</p>

<p><img class="center" src="/images/nothing-stops-honey-badger.png" width="500" height="500" title="&lsquo;image&rsquo; &lsquo;images&rsquo;" ></p>
]]></content>
  </entry>
  
</feed>
