<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Instance Variables | code.life]]></title>
  <link href="http://roseweixel.github.io/blog/categories/instance-variables/atom.xml" rel="self"/>
  <link href="http://roseweixel.github.io/"/>
  <updated>2015-08-02T21:28:02-04:00</updated>
  <id>http://roseweixel.github.io/</id>
  <author>
    <name><![CDATA[Rose Weixel]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Reading and Writing to Instance Variables in Ruby: Self., @, or Nothing?]]></title>
    <link href="http://roseweixel.github.io/blog/2015/02/13/reading-and-writing-to-instance-variables-in-ruby:-self.,-@,-or-Nothing%3F/"/>
    <updated>2015-02-13T14:03:10-05:00</updated>
    <id>http://roseweixel.github.io/blog/2015/02/13/reading-and-writing-to-instance-variables-in-ruby:-self.,-@,-or-Nothing?</id>
    <content type="html"><![CDATA[<p>Today marked the end of my second week as an instructor at The Flatiron School, where I graduated just about two months ago. While working with a student this morning, I realized I had been taking for granted a piece of knowledge that I learned in week two of my own semester.</p>

<p>When I first was learning about object orientation, one of the most confounding things for me was when to use @, self., or no prefix at all when dealing with instance variables in class definitions.</p>

<p>After several conversations with classmates and instructors, I thought I had it all straightened out. My table mates and I even wrote an &lsquo;Instance Variable Manifesto&rsquo; to make sure we&rsquo;d retain this enlightenment for all time. Today, I was grappling with the issue once again. It&rsquo;s funny how learning to program doesn&rsquo;t always happen in a straight line. The experience reminded me not to take for granted things I &ldquo;know&rdquo;, and to savor the moments of re-learning.</p>

<p>Here&rsquo;s the issue that led to my temporary existential crisis today (had I totally lost my grasp of object oriented programming, all knowledge of Ruby, and/or my mind entirely?):</p>

<ul>
<li>We have a class, <code>Shoe</code>.</li>
<li>It has an attribute, <code>condition</code>, with an <code>attr_accessor</code>.</li>
<li>It has a method, <code>cobble</code>, that sets a <code>Shoe</code>&rsquo;s condition to <code>"new"</code>.</li>
<li>The Rspec test first made a new instance of <code>Shoe</code> and then set its condition to <code>"old"</code>. Then, it had the expectation that the <code>condition</code> of the shoe will be equal to <code>"new"</code> after calling the <code>cobble</code> method.</li>
</ul>


<p>This is the code my student had:</p>

<pre><code class="ruby">class Shoe
  attr_accessor :condition

  def cobble
    condition = "new"
  end
end
</code></pre>

<p>At first glance, the reason this code was not making the test pass eluded me. We put a <code>binding.pry</code> in the cobble method, and found that while <code>condition</code> was indeed set to <code>'new'</code>, the test was still failing. Wasn&rsquo;t <code>condition = "new"</code> just making a call to the <code>condition=</code> method provided by the attr_accessor? Apparently not.</p>

<p>In fact, as I later re-realized, <code>condition = "new"</code> was creating a local variable, <code>condition</code> with the value <code>"new"</code>, which has nothing to do with the value of <code>@condition</code>. I was able to come back to understanding this concept when I recalled that I had grappled with this very same thing almost exactly four months ago, when I was working on the exact same lab. I searched through the notes I had taken during those early Flatiron days and found the &ldquo;manifesto.&rdquo;</p>

<p>Four months later, here&rsquo;s my distilled version of it.</p>

<ul>
<li><p>Use <code>@</code> only in the initialize method or within a custom reader/writer method (this accesses the instance variable directly)</p></li>
<li><p>If you intend to ever read or write to an instance variable, build the appropriate reader/writer methods or use <code>attr_accessor</code>, <code>attr_writer</code>, or <code>attr_reader</code> as you deem appropriate. This allows you to delegate getting and setting your instance variables to methods rather than having to manipulate the variable directly.</p></li>
<li><p>When altering the value of an instance variable, use the writer method prefixed with <code>self.</code> <strong>Without giving the writer method an explicit receiver (<code>self</code>), the Ruby interpreter will assume you are setting a local variable rather than calling the writer method</strong> (this is what led to the bug in the code snippet above).</p></li>
<li><p>When simply reading the value of an instance variable, the reader method may be called with no prefix. The receiver of the reader method is implicitly <code>self</code>.</p></li>
</ul>


<p>Here&rsquo;s a code example to demonstrate usage of the previous guidelines:</p>

<pre><code class="ruby">class Shoe
  attr_accessor :condition

  # we're initializing the attribute @condition, so we need to call the instance variable directly
  def initialize(condition="new")
    @condition = condition
  end

  # we're changing the value of @condition, so we call the writer method, which needs to be called on self or else Ruby thinks we're just setting a local variable
  def wear
    self.condition = "worn"
  end

  def cobble
    self.condition = "new"
  end

  # we're just reading the value of @condition, so we can call the reader method (whose implicit receiver is self)
  def report_condition
    if condition == "new"
      "This shoe is in perfect condition!"
    elsif condition == "worn"
      "This shoe needs to be cobbled!"
    else
      "The condition of this shoe is #{condition}."
    end
  end

end
</code></pre>

<p>Note that you can also use <code>self.</code> when calling reader methods, and it sometimes feels semantically more natural to do so. Unlike using <code>@</code>, this still delegates responsibility to the reader method, exactly the same as calling the reader method with no <code>self.</code> prefix.</p>

<p>TL;DR</p>

<ul>
<li><p>Use <code>@</code> in the initialize or reader/writer methods.</p></li>
<li><p>It&rsquo;s better to delegate to reader and writer methods rather than accessing instance variables directly.</p></li>
<li><p>You cannot call a writer method without the explicit receiver, <code>self</code>. When Ruby sees the <code>=</code> (or <code>-=</code>, or <code>+=</code>), it assumes you are setting a local variable if no receiver is specified.</p></li>
</ul>

]]></content>
  </entry>
  
</feed>
