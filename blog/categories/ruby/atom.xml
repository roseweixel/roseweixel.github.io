<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | code.life]]></title>
  <link href="http://roseweixel.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://roseweixel.github.io/"/>
  <updated>2015-08-06T22:42:24-04:00</updated>
  <id>http://roseweixel.github.io/</id>
  <author>
    <name><![CDATA[Rose Weixel]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Reading and Writing to Instance Variables in Ruby: Self., @, or Nothing?]]></title>
    <link href="http://roseweixel.github.io/blog/2015/02/13/reading-and-writing-to-instance-variables-in-ruby:-self.,-@,-or-Nothing%3F/"/>
    <updated>2015-02-13T14:03:10-05:00</updated>
    <id>http://roseweixel.github.io/blog/2015/02/13/reading-and-writing-to-instance-variables-in-ruby:-self.,-@,-or-Nothing?</id>
    <content type="html"><![CDATA[<p>Today marked the end of my second week as an instructor at The Flatiron School, where I graduated just about two months ago. While working with a student this morning, I realized I had been taking for granted a piece of knowledge that I learned in week two of my own semester.</p>

<p>When I first was learning about object orientation, one of the most confounding things for me was when to use @, self., or no prefix at all when dealing with instance variables in class definitions.</p>

<p>After several conversations with classmates and instructors, I thought I had it all straightened out. My table mates and I even wrote an &lsquo;Instance Variable Manifesto&rsquo; to make sure we&rsquo;d retain this enlightenment for all time. Today, I was grappling with the issue once again. It&rsquo;s funny how learning to program doesn&rsquo;t always happen in a straight line. The experience reminded me not to take for granted things I &ldquo;know&rdquo;, and to savor the moments of re-learning.</p>

<p>Here&rsquo;s the issue that led to my temporary existential crisis today (had I totally lost my grasp of object oriented programming, all knowledge of Ruby, and/or my mind entirely?):</p>

<ul>
<li>We have a class, <code>Shoe</code>.</li>
<li>It has an attribute, <code>condition</code>, with an <code>attr_accessor</code>.</li>
<li>It has a method, <code>cobble</code>, that sets a <code>Shoe</code>&rsquo;s condition to <code>"new"</code>.</li>
<li>The Rspec test first made a new instance of <code>Shoe</code> and then set its condition to <code>"old"</code>. Then, it had the expectation that the <code>condition</code> of the shoe will be equal to <code>"new"</code> after calling the <code>cobble</code> method.</li>
</ul>


<p>This is the code my student had:</p>

<pre><code class="ruby">class Shoe
  attr_accessor :condition

  def cobble
    condition = "new"
  end
end
</code></pre>

<p>At first glance, the reason this code was not making the test pass eluded me. We put a <code>binding.pry</code> in the cobble method, and found that while <code>condition</code> was indeed set to <code>'new'</code>, the test was still failing. Wasn&rsquo;t <code>condition = "new"</code> just making a call to the <code>condition=</code> method provided by the attr_accessor? Apparently not.</p>

<p>In fact, as I later re-realized, <code>condition = "new"</code> was creating a local variable, <code>condition</code> with the value <code>"new"</code>, which has nothing to do with the value of <code>@condition</code>. I was able to come back to understanding this concept when I recalled that I had grappled with this very same thing almost exactly four months ago, when I was working on the exact same lab. I searched through the notes I had taken during those early Flatiron days and found the &ldquo;manifesto.&rdquo;</p>

<p>Four months later, here&rsquo;s my distilled version of it.</p>

<ul>
<li><p>Use <code>@</code> only in the initialize method or within a custom reader/writer method (this accesses the instance variable directly)</p></li>
<li><p>If you intend to ever read or write to an instance variable, build the appropriate reader/writer methods or use <code>attr_accessor</code>, <code>attr_writer</code>, or <code>attr_reader</code> as you deem appropriate. This allows you to delegate getting and setting your instance variables to methods rather than having to manipulate the variable directly.</p></li>
<li><p>When altering the value of an instance variable, use the writer method prefixed with <code>self.</code> <strong>Without giving the writer method an explicit receiver (<code>self</code>), the Ruby interpreter will assume you are setting a local variable rather than calling the writer method</strong> (this is what led to the bug in the code snippet above).</p></li>
<li><p>When simply reading the value of an instance variable, the reader method may be called with no prefix. The receiver of the reader method is implicitly <code>self</code>.</p></li>
</ul>


<p>Here&rsquo;s a code example to demonstrate usage of the previous guidelines:</p>

<pre><code class="ruby">class Shoe
  attr_accessor :condition

  # we're initializing the attribute @condition, so we need to call the instance variable directly
  def initialize(condition="new")
    @condition = condition
  end

  # we're changing the value of @condition, so we call the writer method, which needs to be called on self or else Ruby thinks we're just setting a local variable
  def wear
    self.condition = "worn"
  end

  def cobble
    self.condition = "new"
  end

  # we're just reading the value of @condition, so we can call the reader method (whose implicit receiver is self)
  def report_condition
    if condition == "new"
      "This shoe is in perfect condition!"
    elsif condition == "worn"
      "This shoe needs to be cobbled!"
    else
      "The condition of this shoe is #{condition}."
    end
  end

end
</code></pre>

<p>Note that you can also use <code>self.</code> when calling reader methods, and it sometimes feels semantically more natural to do so. Unlike using <code>@</code>, this still delegates responsibility to the reader method, exactly the same as calling the reader method with no <code>self.</code> prefix.</p>

<p>TL;DR</p>

<ul>
<li><p>Use <code>@</code> in the initialize or reader/writer methods.</p></li>
<li><p>It&rsquo;s better to delegate to reader and writer methods rather than accessing instance variables directly.</p></li>
<li><p>You cannot call a writer method without the explicit receiver, <code>self</code>. When Ruby sees the <code>=</code> (or <code>-=</code>, or <code>+=</code>), it assumes you are setting a local variable if no receiver is specified.</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript: The Honey Badger of Programming Languages]]></title>
    <link href="http://roseweixel.github.io/blog/2014/11/15/javascript-the-honey-badger-of-programming-languages/"/>
    <updated>2014-11-15T17:49:20-05:00</updated>
    <id>http://roseweixel.github.io/blog/2014/11/15/javascript-the-honey-badger-of-programming-languages</id>
    <content type="html"><![CDATA[<p>After spending six weeks in Ruby land, last week was all JavaScript all the time at <a href="http://www.flatironschool.com">The Flatiron School</a>. I feel like I&rsquo;ve just added a hammer with superpowers to my programming tool box. You might bend a few nails along the way, but you can build almost anything with it.</p>

<p>Also, JavaScript is weird. Although it cares a lot about semi-colons, there are some important ways in which, just like the honey badger, it just doesn&rsquo;t seem to care at all. Here I will attempt to get comfortable with this strange new animal by diving deep into some of its more surprising aspects. To provide some contrast and context, especially for those who (like myself) are more at home with Ruby, I&rsquo;ll make some comparisons as I go along.</p>

<h2>Scope</h2>

<p>Let&rsquo;s dive right in. For comparison, here is some Ruby:</p>

<pre><code class="ruby javascript-ruby-comparison/ruby.rb">dog = 'Fido'

def bark
  puts "#{dog} says woof"
end

bark
</code></pre>

<p>In Ruby, a method is a scope gate, so <code>dog</code> is not defined in the <code>bark</code> method. Ruby will tell you this in no uncertain terms:</p>

<pre><code class="console">[18:12:24] javascript-ruby-comparison
♥ ruby ruby.rb
ruby.rb:4:in `bark': undefined local variable or method `dog' for main:Object (NameError)
    from ruby.rb:7:in `&lt;main&gt;'
</code></pre>

<p>On line 4, Ruby has no idea about what <code>dog</code> is, because the universe in line 4 is the local scope of the method <code>bark</code>. This scope gate can be very nice, since it means we cannot accidentally overwrite a variable we defined in the global scope from within a method. In order to make <code>dog</code> into a global variable that we can access inside the method, Ruby requires us to be very explicit about it, putting a <code>$</code> in front of that variable both where it is defined and wherever it is referenced:</p>

<pre><code class="ruby javascript-ruby-comparison/ruby.rb">$dog = 'Fido'

def bark
  puts "#{$dog} says woof"
end

bark
</code></pre>

<p>Now we clearly see that we are playing with a global variable, and Ruby plays along:</p>

<pre><code class="console">[18:32:01] javascript-ruby-comparison
♥ ruby ruby.rb
Fido says woof
</code></pre>

<p>While JavaScript does have a concept of functions creating a new scope, variables assigned outside of those functions can easily be accessed from within:</p>

<pre><code class="javascript javascript-ruby-comparison/javascript.js">var dog = 'Fido'

function bark(){
  console.log(dog + ' says woof');
}

bark();
</code></pre>

<p>JavaScript doesn&rsquo;t care if you want to reach outside the function&rsquo;s scope to grab a variable. JavaScript functions have knowledge of the universe around them:
<code>console
[18:38:34] javascript-ruby-comparison
♥ jsc javascript.js
--&gt; Fido says woof
</code></p>

<p>So what else can you do with a variable defined outside a function from within a function? As it turns out, JavaScript will let you do whatever you want:</p>

<pre><code class="javascript javascript-ruby-comparison/javascript.js">var dog = 'Fido'

function bark(){
  dog = 'Spot'
  debug(dog + ' says woof from within the function');
}

debug(dog + ' says woof outside of the function');
bark();
debug(dog + ' says woof after the function is called');
</code></pre>

<p>What happened to Fido?</p>

<pre><code class="console">[20:47:14] javascript-ruby-comparison
♥ jsc javascript.js 
--&gt; Fido says woof outside of the function
--&gt; Spot says woof from within the function
--&gt; Spot says woof after the function is called
</code></pre>

<p>Looks like the name change was permanent. And by the way, by always using <code>var</code>, we can prevent such dangers:</p>

<pre><code class="javascript javascript-ruby-comparison/javascript.js">var dog = 'Fido'

function bark(){
  var dog = 'Spot'
  debug(dog + ' says woof from within the function');
}

debug(dog + ' says woof outside of the function');
bark();
debug(dog + ' says woof after the function is called');
</code></pre>

<pre><code class="console">♥ jsc javascript.js 
--&gt; Fido says woof outside of the function
--&gt; Spot says woof from within the function
--&gt; Fido says woof after the function is called
</code></pre>

<p>By using <code>var</code> within the function, we created an entirely different <code>dog</code> and did not alter the original.</p>

<h2>Arity Schmarity</h2>

<p>Before we go any further, I must admit that hadn&rsquo;t heard the word arity until I crossed paths with JavaScript. I reckon I&rsquo;m not alone in this, so here&rsquo;s a definition courtesy of <a href="http://en.wikipedia.org/wiki/Arity">Wikipedia</a>:</p>

<blockquote><p>In logic, mathematics, and computer science, the <strong>arity</strong> of a function or operation is the number of arguments or operands the function or operation accepts.</p></blockquote>

<p>OK. This sounds like something I know from Ruby land. Here&rsquo;s a familiar example:</p>

<pre><code class="ruby javascript-ruby-comparison/ruby.rb">class Dog
  def initialize(name)
    @name = name
  end

end
</code></pre>

<p>According to the above definition, the <code>initialize</code> method of the <code>Dog</code> class takes exactly one argument. You could say its arity is one (more commonly, this is known as a unary function).</p>

<p>Ruby cares about arity, and will give you very nice error messages to make you aware of this:</p>

<pre><code class="console">2.1.2 :002 &gt; require 'ruby.rb'
 =&gt; true 
2.1.2 :003 &gt; fido = Dog.new
ArgumentError: wrong number of arguments (0 for 1)
    from /Users/rose/Development/code/javascript-ruby-comparison/ruby.rb:3:in `initialize'
    from (irb):3:in `new'
    from (irb):3
    from /Users/rose/.rvm/rubies/ruby-2.1.2/bin/irb:11:in `&lt;main&gt;'
</code></pre>

<p>I tried to make a new <code>Dog</code> with 0 arguments, and Ruby was expecting 1. So Ruby blew up. This is arity checking at work.</p>

<p>JavaScript does not care about arity! Here&rsquo;s photographic proof (this is a lot easier to see in the browser&rsquo;s JavaScript console):</p>

<p><img class="center" src="/images/js-no-arity-checking.png" width="700" height="700" title="&lsquo;image&rsquo; &lsquo;images&rsquo;" ></p>

<p>To review what just happened:</p>

<ul>
<li>I made a constructor function for <code>Dog</code> (yeah, functions are really all-purpose in JavaScript, so that right there was a class definition of sorts).</li>
<li>In this constructor function, I said that <code>Dog</code> takes a <code>name</code>.</li>
<li>I made a new <code>Dog</code>, <code>fido</code>, and did not pass in any arguments.</li>
<li>JavaScript did not blow up.</li>
<li>Just to be sure, I asked JavaScript to show me <code>fido</code>.</li>
<li>JavaScript returned a <code>Dog</code> object with a <code>name</code> of <code>undefined</code>.</li>
</ul>


<p>Whenever it can, JavaScript will try to help you out, whether you want it to or not. If you say a <code>Dog</code> has a <code>name</code> and then forget to give it one, JavaScript will trust that this was your intent and will throw in an <code>undefined</code> rather than yelling at you.</p>

<h2>Teaching Old Dogs New Tricks</h2>

<p>Ruby cares about defining an object&rsquo;s attributes and behaviors up front. Objects in Ruby behave in consistent and predicatable ways.</p>

<p>Using our prior definition of the <code>Dog</code> class, Ruby will let us know that we haven&rsquo;t taught <code>Dog</code>s to bark yet:</p>

<pre><code class="console">2.1.2 :001 &gt; require 'ruby.rb'
 =&gt; true 
2.1.2 :002 &gt; fido = Dog.new('Fido')
 =&gt; #&lt;Dog:0x007f9fd5757c78 @name="Fido"&gt; 
2.1.2 :003 &gt; fido.bark
NoMethodError: undefined method `bark' for #&lt;Dog:0x007f9fd5757c78 @name="Fido"&gt;
    from (irb):3
    from /Users/rose/.rvm/rubies/ruby-2.1.2/bin/irb:11:in `&lt;main&gt;'
</code></pre>

<p>Of course! We did not define a <code>bark</code> method, so we get a predictable <code>NoMethodError</code>.</p>

<p>JavaScript doesn&rsquo;t care about defining all of an object&rsquo;s attributes and behaviors up front, and pretty much lets you do whatever you want, whenever you want. Here&rsquo;s a continuation of the console session above:</p>

<p><img class="center" src="/images/js-fido-barks.png" width="700" height="700" title="&lsquo;image&rsquo; &lsquo;images&rsquo;" ></p>

<ul>
<li>I asked <code>fido</code> to bark, having never defined a <code>bark</code> function or attribute. JavaScript quietly returned <code>undefined</code>.</li>
<li>I told JavaScript to give <code>fido.bark</code> the value of <code>'woof'</code>, and JavaScript happily obliged.</li>
<li>Now not only can <code>fido</code> bark, but the <code>Dog</code> object that is <code>fido</code> has been fundamentally altered, now containing a new <code>bark</code> attribute!</li>
</ul>


<p>So, can all <code>Dog</code>s bark now?</p>

<p><img class="center" src="/images/js-spot-cant-bark.png" width="700" height="700" title="&lsquo;image&rsquo; &lsquo;images&rsquo;" ></p>

<p>No, they cannot. Now the definition of <code>Dog</code> is a bit of a mess - <code>fido</code> is a <code>Dog</code> that can bark, while <code>spot</code> can&rsquo;t. The very nature of <code>Dog</code>-ness has been brought into question, and JavaScript is fine with all of this. No errors, no complaining. For better or for worse.</p>

<h2>Playing with Global Scope</h2>

<p>This one is extra weird, so get ready.</p>

<p>In the hierarchy of Ruby objects, <code>main</code> is the top level:</p>

<pre><code class="console">♥ irb
2.1.2 :001 &gt; self
 =&gt; main 
2.1.2 :002 &gt; self.class
 =&gt; Object 
2.1.2 :003 &gt; 
</code></pre>

<p>I don&rsquo;t know why you&rsquo;d want to mess with <code>main</code>, and Ruby makes certain it&rsquo;s not easy to do so (in fact, it&rsquo;s impossible to do so by accident):</p>

<pre><code class="console">2.1.2 :003 &gt; self.name
NoMethodError: undefined method `name' for main:Object
    from (irb):3
    from /Users/rose/.rvm/rubies/ruby-2.1.2/bin/irb:11:in `&lt;main&gt;'
2.1.2 :004 &gt; self.name = "Rose"
NoMethodError: undefined method `name=' for main:Object
    from (irb):4
    from /Users/rose/.rvm/rubies/ruby-2.1.2/bin/irb:11:in `&lt;main&gt;'
2.1.2 :005 &gt; 
</code></pre>

<p>Want to mess with the top-level object in JavaScript? Go right ahead, JavaScript doesn&rsquo;t care!</p>

<pre><code class="console">&gt;&gt;&gt; this.name
undefined
&gt;&gt;&gt; this.name = "Rose"
Rose
&gt;&gt;&gt; this
[object global]
&gt;&gt;&gt; this.name
Rose
&gt;&gt;&gt; 
</code></pre>

<p>I just named the global object after myself, and JavaScript did not care one bit. This example is a bit contrived, but believe me that some undesireable things can happen if you don&rsquo;t watch out for global assignment. Here&rsquo;s a (slightly) less contrived example:</p>

<pre><code class="javascript javascript-ruby-comparison/javascript.js">function Dog(name){
    this.name = name;
    this.hunger = true;
    this.bowl = 'full';
}

Dog.prototype.checkNeeds = function() {
    if(this.hunger === true){
        (function feed(){
            this.hunger = false;
            this.bowl = 'empty';
        })();
    } else {
        (function play(){
            this.hunger = true;
        })();
    }
};

var fido = new Dog('Fido');

debug(fido.hunger);

fido.checkNeeds();

debug(fido.hunger);
debug(this.hunger);
debug(this);
</code></pre>

<p>If I run this code, here&rsquo;s what my <code>debug</code> statements reveal:</p>

<pre><code class="console">♥ jsc javascript.js 
--&gt; true            // fido was born hungry
--&gt; true            // after calling checkNeeds(), he's still hungry...
--&gt; false           // ...but this isn't hungry...
--&gt; [object global] // because we fed the global object instead of fido!
</code></pre>

<p>As you can see, Bad Things can happen when the global object is always available. Fortunately, there is a way for you to make JavaScript care about this! You just have to tell JavaScript to <code>use strict</code>.</p>

<pre><code class="javascript javascript-ruby-comparison/javascript.js">'use strict';

function Dog(name){
    // the rest of my code...
</code></pre>

<p>Now, when we run the code, JavaScript will blow up just the way we want it to!</p>

<pre><code class="console">♥ jsc javascript.js 
--&gt; true
Exception: TypeError: Attempted to assign to readonly property.
feed@javascript.js:12:17
checkNeeds@javascript.js:14:11
global code@javascript.js:24:16
</code></pre>

<h2>The Moral of the Story</h2>

<p>This was a long post, and it probably could get longer. But I think this is enough to chew on for now. The bottom line is that JavaScript has some crazy ways, but these ways are not unlearnable, and the reward for learning them is a much saner coding experience. If you understand the quirks, remember your <code>var</code>s, and always <code>use strict</code>, you and JavaScript can be unstoppable, just like the honey badger.</p>

<p><img class="center" src="/images/nothing-stops-honey-badger.png" width="500" height="500" title="&lsquo;image&rsquo; &lsquo;images&rsquo;" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flash Messages With Sessions in Sinatra]]></title>
    <link href="http://roseweixel.github.io/blog/2014/10/28/flash-messages-with-sessions-in-sinatra/"/>
    <updated>2014-10-28T23:18:15-04:00</updated>
    <id>http://roseweixel.github.io/blog/2014/10/28/flash-messages-with-sessions-in-sinatra</id>
    <content type="html"><![CDATA[<p><a href="http://www.sinatrarb.com/">Sinatra</a> is a DSL (domain specific language) for building small dynamic web apps with all the beauty of Ruby and without the bulk of Rails. Recently, my <a href="http://www.flatironschool.com">Flatiron School</a> classmates and I built a simple playlist app that allows users to perform all the basic CRUD operations on songs - you can create, retrieve, update, and destroy them. Emulating <a href="http://guides.rubyonrails.org/routing.html#crud-verbs-and-actions">RESTful routes for these actions (à la Rails)</a>, I created something like the following:</p>

<pre><code class="ruby app/controllers/songs_controller.rb">
class SongsController &lt; ApplicationController

  get '/songs' do
    @songs = Song.all
    erb :"songs/index"
  end

  get '/songs/new' do
    erb :"songs/new"
  end

  post '/songs' do
    @song = Song.create(params[:song])
    redirect :"/songs/#{@song.id}"
  end

  get '/songs/:id' do
    @song = Song.find(params[:id])
    erb :"songs/show"
  end

  get '/songs/:id/edit' do
    @song = Song.find(params[:id])
    erb :"songs/edit"
  end

  post '/songs/:id' do
    @song = Song.find(params[:id])
    @song.update(params[:song])
    redirect :"/songs/#{@song.id}"
  end

end
</code></pre>

<p>With the corresponding models and views that make these routes real, a working web app was born. Pretty darn cool. But there was a feature in the spec that was still left to add, and it became a bit of a challenge:</p>

<p>Whenever a song is created or updated, the user should see a message like this:</p>

<p><img class="center" src="/images/song_success_message.png" width="700" height="700" title="&lsquo;image&rsquo; &lsquo;images&rsquo;" ></p>

<p>Here&rsquo;s what I wanted to achieve:</p>

<ul>
<li>The user fills out the form at <code>songs/new</code> and clicks &lsquo;Submit&rsquo;.</li>
<li>The newly created song&rsquo;s show page at <code>songs/:id</code> is rendered with a success message.</li>
<li>The user reloads the page (or navagates away and back), and *poof* the success message is gone.</li>
</ul>


<p>In order to get this to work, I would have to somehow pass a message from one action in the controller to another. The create (or update) action would have to pass a message along to the show action which would pass this message along to the view. It would be nice to have something like an envelope called <code>success_message</code> that could hold one of three values at any given time:</p>

<ul>
<li><code>"Successfully created song."</code> (right after the song is created)</li>
<li><code>"Successfully updated song."</code> (right after the song is updated)</li>
<li><code>nil</code> (immediately after the success message is rendered in the view)</li>
</ul>


<p><a name="erb"></a>
According to this vision, I was able to put some yet-to-be-functional code in <code>songs/show.erb</code>:</p>

<p>&#8220;`erb</p>

<!-- this bit of code at the bottom of the page would reveal the contents of the success message if it isn't nil -->


<p>&lt;% if @success_message %>
  <div id="success" style="border: 2px solid green;">
  &lt;%= @success_message %>
  </div>
&lt;% end %>
&#8220;`</p>

<p>But how would <code>@success_message</code>, which would have to be definied in the show action in order for the show page to know about it, be able to hold a message the was created in another controller action (create or update)?</p>

<p>I knew that <code>params</code> is one such data object that holds values that can be passed from one action to another, but as it is already the envelope for carrying and delivering form data entered by the user, it didn&rsquo;t seem like the right place for a success message to live. If only there was some other vessel, like params, but not&hellip;</p>

<p><a name="first_step"></a>
There is. It&rsquo;s a session! It becomes available to you as soon as you put this in your application controller:</p>

<pre><code class="ruby">class ApplicationController &lt; Sinatra::Base
  ...
  # add this line to enable the magic
  enable :sessions
end
</code></pre>

<p>Once you&rsquo;ve added that, you get this handy little object called <code>session</code> that you can access in any of your controllers, which can in turn pass along any value it contains to a view.  Just to see what it looked like before doing anything with it, I put a <code>binding.pry</code> inside my index action in <code>songs_controller.rb</code>, fired off <code>shotgun</code>, and loaded the index page on my local server. Here&rsquo;s what pry spat out when I asked it what <code>session</code> was:</p>

<pre><code class="irb">[1] pry(#&lt;SongsController&gt;)&gt; session
=&gt; {"session_id"=&gt;"857d0d856ee646d76204c1138cf57fc497f80ffd85fef19befdbb26f60f8e022", "csrf"=&gt;"598119612cef0d88134413ddd54bad52", "tracking"=&gt;{"HTTP_USER_AGENT"=&gt;"7be1a42d74a413474898ddb9adfef9a5a84719e3", "HTTP_ACCEPT_LANGUAGE"=&gt;"66eae971492938c2dcc2fb1ddc8d7ec3196037da"}}
</code></pre>

<p>Here it is again, split up onto several lines for readability:</p>

<pre><code class="ruby">{
  "session_id"=&gt;"857d0d856ee646d76204c1138cf57fc497f80ffd85fef19befdbb26f60f8e022",
  "csrf"=&gt;"598119612cef0d88134413ddd54bad52",
  "tracking"=&gt;{
      "HTTP_USER_AGENT"=&gt;"7be1a42d74a413474898ddb9adfef9a5a84719e3",
      "HTTP_ACCEPT_LANGUAGE"=&gt;"66eae971492938c2dcc2fb1ddc8d7ec3196037da"
  }
}
</code></pre>

<p>So that&rsquo;s our session object, before we&rsquo;ve done anything with it. Inside it there&rsquo;s <code>"session_id"</code>, a unique key that lives inside your cookie for the life of your session. What else is in there? Having just learned about preventing cross-site request forgery, I presumed <code>"csrf"=&gt;"598119612cef0d88134413ddd54bad52"</code> to be the CSRF token. If you want to learn more about this (and you should!), read about it <a href="http://guides.rubyonrails.org/security.html">here</a>. Finally there&rsquo;s <code>"tracking"</code>, which I believe holds information about the user&rsquo;s browser. For our current purposes (creating a flash message), we don&rsquo;t need to care about these values, but it helps to see how session is structured and what kinds of things it can contain.</p>

<p>Let&rsquo;s move on and see how we can use this session object to help us with our success message.</p>

<p>Before doing anything to it, it would help to understand what kind of object <code>session</code> is. It looks like an ordinary Ruby hash, but in fact it is a special kind of Rack object. Why guess when you can <code>pry</code> it?</p>

<pre><code class="irb">[2] pry(#&lt;SongsController&gt;)&gt; session.class
=&gt; Rack::Session::Abstract::SessionHash
</code></pre>

<p>As it turns out, the <code>SessionHash</code> object has a lot in common with a <code>Hash</code> object. 103 methods in common (out of 177 total), to be exact:</p>

<pre><code class="irb">[3] pry(#&lt;SongsController&gt;)&gt; session.methods.select{ |method| Hash.methods.include?(method) }.count
=&gt; 103
</code></pre>

<p>One hash-like thing you can do with <code>session</code> is put new keys into it, with values that you can assign and change at your whim. And since the session persists from one HTTP request to another, it can pass values around from one action in the controller to another. This sounded like just the right object to hold the success message!</p>

<p>Here&rsquo;s what I did (after enabling sessions, as shown <a href="#first_step">above</a>):</p>

<p>1) At the bottom of my create action (immediately before redirecting to the show page), I added a <code>:success_message</code> key to <code>session</code>, setting its value to the one-time message I want my users to see:</p>

<pre><code class="ruby songs_controller.rb">  post '/songs' do
    @song = Song.create(params[:song])

    session[:success_message] = "Successfully created song."

    redirect :"/songs/#{@song.id}"
  end
</code></pre>

<p>2) I did the same thing for my update action:</p>

<pre><code class="ruby">  post '/songs/:id' do
    @song = Song.find(params[:id])
    @song.update(params[:song])

    session[:success_message] = "Song successfully updated."

    redirect :"/songs/#{@song.id}"
  end
</code></pre>

<p>3) Then, I added some code at the top of the show action to pass this message along so it could be rendered by the <a href="#erb">erb template</a> in the view, and to ensure that the message is immediately set to <code>nil</code> so it will only render once:</p>

<pre><code class="ruby">  get '/songs/:id' do
    @song = Song.find(params[:id])

    @success_message = session[:success_message]
    session[:success_message] = nil

    erb :'songs/show'
  end
</code></pre>

<p>Now my success message behaves exactly as I imaged it should, appearing and disappearing at the appropriate times.</p>

<p>Due to the stateless nature of HTTP requests, had I simply used an instance variable <code>@success_message</code> inside these <code>get</code> and <code>post</code> actions, any value assigned to it would have been instantly forgotten the moment another request was made. The <code>@success_message</code> inside the two actions would have in fact been completely out of each other&rsquo;s scope. The session, however, is available across all actions.</p>

<p>This ability to fake statefulness in your controllers opens up a world of functionality other than flash messages, not the least of which is maintaining a user&rsquo;s &ldquo;logged in&rdquo; state as they browse from one page to another. Without sessions, almost all of the interactions and transactions that occur over the Internet as we know it could not even happen.</p>

<p>So if you haven&rsquo;t yet, sit down and get to know the powerful little session. It&rsquo;s definitely worth prying into.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Join Tables in ActiveRecord: Complex Associations, Simple Code]]></title>
    <link href="http://roseweixel.github.io/blog/2014/10/22/join-tables-in-active-record/"/>
    <updated>2014-10-22T21:38:48-04:00</updated>
    <id>http://roseweixel.github.io/blog/2014/10/22/join-tables-in-active-record</id>
    <content type="html"><![CDATA[<p>Up until a few weeks ago, my entire coding toolbox consisted of a small sample of some built in Ruby methods. Two of these became blog post topics (<a href="http://roseweixel.github.io/blog/2014/10/08/looking-for-something-just-number-find-it/">#find</a> and <a href="http://roseweixel.github.io/blog/2014/10/07/cheese-dot-slice/">#slice</a>), and one&mdash;the <code>&lt;&lt;</code> method&mdash;became the central character of my first coding dream/nightmare, with reserved words <code>while</code> and <code>true</code> playing key supporting roles. I used these methods to write other pretty simple methods.</p>

<p>After just a few weeks at <a href="http://www.flatironschool.com">The Flatiron School</a>, I&rsquo;m quickly learning that building up complex programs, like web apps, can&rsquo;t (or maybe really just shouldn&rsquo;t) be accomplished by writing out method after method in one big file. You need the right structures and tools to create complex objects, persist them in a database, and express relationships between these objects. Using ActiveRecord, you get some really simple and powerful tools for all this that hide a huge amount of complexity away, allowing you focus on designing your app to do what you want it to do.</p>

<p>While ActiveRecord makes it easy to create models and associations, some of the concepts involved were hard for me to get my head around at first. One such concept was the join table. I ran up against a problem in need of a join table while working with my classmates on a lab involving modeling characters and actors.</p>

<p>In ActiveRecord speak, actors have many characters and a character belongs to an actor. Here, in all of its elegant simplicity, is how you&rsquo;d create the models that express this relationship:</p>

<pre><code class="ruby app/models/actor.rb">class Actor &lt; ActiveRecord::Base
  has_many :characters
end
</code></pre>

<pre><code class="ruby app/models/character.rb">class Character &lt; ActiveRecord::Base
  belongs_to :actor
end
</code></pre>

<p>Now all we need are two tables (actors and characters) to make this association work. The characters table, being on the <code>belongs_to</code> side of the relationship, must have a column for the foreign key, <code>actor_id</code>. In ActiveRecord, this can be accomplished in remarkably few lines of code:</p>

<pre><code class="ruby db/migrations/001_create_actors.rb">class CreateActors &lt; ActiveRecord::Migration
  def change
    create_table :actors do |t|
      # ActiveRecord provides an id (primary key) column by default, for free!
      t.string :name
    end
  end
end
</code></pre>

<pre><code class="ruby db/migrations/002_create_characters.rb">class CreateCharacters &lt; ActiveRecord::Migration
  def change
    create_table :characters do |t|
      t.string :name
      # Here is where the magic happens. ActiveRecord knows that this references the actors table.
      t.integer :actor_id
    end
  end
end
</code></pre>

<p>This is the basic pattern you&rsquo;d follow to model any <code>has_many</code> <code>belongs_to</code> relationship in ActiveRecord. What seems like &ldquo;magic&rdquo; here is made possible by ActiveRecord Ruby methods that either give our associated classes more methods that let them interact with each other, or wrap SQL statements and hide them away (in the case of migrations). But that is a topic for another post.</p>

<p>Back to actors and characters. As my classmates and I were creating these models, two big things came to the surface:</p>

<p>1) We could not recall any of Tom Cruise&rsquo;s many characters&#8217; names.</p>

<p>2) What happens when a character has more than one actor? One of my favorite characters would most certainly break our has many/belongs to association&mdash;The Doctor.</p>

<p><img class="center" src="/images/sad_doc_rain.jpeg" width="500" height="500" title="&lsquo;image&rsquo; &lsquo;images&rsquo;" ></p>

<p>How can we fit The Doctor into our current schema??? The more I thought about it, the more impossible it seemed. Here is an illustration:</p>

<p><img class="center" src="/images/actor_char_table.png" width="500" height="500" title="&lsquo;image&rsquo; &lsquo;images&rsquo;" ></p>

<p>The above is our simple model, before The Doctor comes along and breaks everything. Just to be sure I was grasping how NOT to try to include The Doctor and his many actors, here is how it might look:</p>

<p><img class="center" src="/images/the_doctor_broke_the_table.png" width="800" height="800" title="&lsquo;image&rsquo; &lsquo;images&rsquo;" ></p>

<p>Our actors table seems fine, but our characters table is definitely not okay, and we haven&rsquo;t even included the eight doctors from the first twenty-six seasons yet.</p>

<p>With our current setup, we have to change the entire schema every time we add another Doctor. This is very, very bad. A database was designed for adding lots of rows. Not so for columns.</p>

<p>In order to make things right, we need a different association: many-to-many. Actors have many characters, and a character has many actors. In order to set our database up for this association, we need a join table. First the visual:</p>

<p><img class="center" src="/images/revised_character_actor_with_join.png" width="650" height="650" title="&lsquo;image&rsquo; &lsquo;images&rsquo;" ></p>

<p>Now for the migration (assuming your actors table is still intact and you&rsquo;ve already removed all but the name column from characters):</p>

<pre><code class="ruby 004_create_actors_characters_join_table.rb">class CreateCharacterActorRelationships &lt; ActiveRecord::Migration
  def change
    create_table :character_actor_relationships do |t|
      t.integer :character_id
      t.integer :actor_id
    end
  end
end
</code></pre>

<p>We also need to change our actor and character models. In order for the association to work, we need to somehow connect our actors and characters table through the character_actor_relationships table. The association we need in our actor and character models is <code>has_many :through</code>:</p>

<pre><code class="ruby app/models/actor.rb">class Actor &lt; ActiveRecord::Base
  has_many :character_actor_relationships
  has_many :characters, through: :character_actor_relationships
end
</code></pre>

<pre><code class="ruby app/models/character.rb">class Character &lt; ActiveRecord::Base
  has_many :character_actor_relationships
  has_many :actors, through: :character_actor_relationships
end
</code></pre>

<p>Finally, we need a model for CharacterActorRelationship:</p>

<pre><code class="ruby app/models/character_actor_relationship.rb">class CharacterActorRelationship &lt; ActiveRecord::Base
  belongs_to :character
  belongs_to :actor
end
</code></pre>

<p>Now we have the right associations and the right database schema to add all of the Doctors that ever were and ever will be throughout all time.</p>

<p><img class="center" src="/images/first_doctor.jpeg" width="500" height="500" title="&lsquo;image&rsquo; &lsquo;images&rsquo;" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Looking for Something? Just #find It!]]></title>
    <link href="http://roseweixel.github.io/blog/2014/10/08/looking-for-something-just-number-find-it/"/>
    <updated>2014-10-08T20:32:04-04:00</updated>
    <id>http://roseweixel.github.io/blog/2014/10/08/looking-for-something-just-number-find-it</id>
    <content type="html"><![CDATA[<p>Searching through nested data structures can be downright messy. Even saying &ldquo;nested data structures&rdquo; sounds complicated. Luckily, Ruby has some powerful <a href="http://www.ruby-doc.org/core-2.1.3/Enumerable.html">Enumerable methods</a> that can simplify our lives (or at least our code).</p>

<p>Let&rsquo;s say you&rsquo;ve been programming for hours and suddenly realize your stomach is growling at you (why does this happen so often?). Here is how you might search for some delicious food, if you happened to be searching inside an array filled with hashes. Just humor me for the sake of example.</p>

<p>Here is our <code>restaurants</code> array:</p>

<pre><code class="ruby">restaurants = [
    {:name =&gt; "The Decent Diner", :rating =&gt; "average"}, 
    {:name =&gt; "The GoGo Grill", :rating =&gt; "delicious"}, 
    {:name =&gt; "Emporium of Mystery Meat", :rating =&gt; "poor"},  
    {:name =&gt; "Dig Inn Seasonal Market", :rating =&gt; "delicious"}
]
</code></pre>

<p>So, we want to get the name of a restaurant whose <code>:rating</code> is <code>"delicious"</code>. We could do something like this:</p>

<pre><code class="ruby">def find_delicious_food(restaurants)
      restaurants.each do |restaurant_info|
    restaurant_info.values.each do |value|
      if value == "delicious"
        return restaurant_info[:name]
      end
    end
  end
end
</code></pre>

<p>If we call this method on our <code>restaurants</code> hash, it will return the value &ldquo;The GoGo Grill&rdquo;. Sounds good to me. But in order to get there we needed a <code>return</code> inside an <code>if</code> statement inside an <code>each</code> loop inside another <code>each</code> loop. Not pretty.</p>

<p>There is a better way. The <code>find</code> method! Behold:</p>

<pre><code class="ruby">def find_delicious_food(restaurants)
  restaurants.find{|restaurant| restaurant[:rating] == "delicious"}[:name]
end
</code></pre>

<p>Just one line of code seems to do the same thing as its ugly predecessor. Let&rsquo;s look at it more closely. Here is what <code>find</code> does:</p>

<ul>
<li>It passes each element of the object on which it was called to a block.</li>
<li>It returns the first element for which the block evaluates to <code>true</code>.</li>
<li>If none of the elements return true for the given block, it returns <code>nil</code>.</li>
</ul>


<p>As it turns out, this <code>nil</code> value could cause some problems for our <code>find_delicious_food</code> method. If there are no restaurants in the hash with a <code>:rating</code> of <code>"delicious"</code>, our code breaks. We would get an error, because Ruby cannot make any sense out of <code>nil[:name]</code>.</p>

<p>Here is the method refactored to avoid that error:</p>

<pre><code class="ruby">def find_delicious_food(restaurants)
  good_restaurant = restaurants.find{|restaurant| restaurant[:rating] == "delicious"}
  if good_restaurant
    return good_restaurant[:name]
  end
end
</code></pre>

<p>Sure, it may not be as cute and little as our one-line method, but it will never break and it&rsquo;s still a lot prettier than loops inside loops.</p>

<p>So when you are searching for that <em>one</em> thing you need inside of some nasty nesting, just <code>find</code> it!</p>
]]></content>
  </entry>
  
</feed>
