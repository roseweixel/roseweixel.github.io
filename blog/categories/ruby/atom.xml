<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | code.life]]></title>
  <link href="http://roseweixel.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://roseweixel.github.io/"/>
  <updated>2014-11-03T00:50:26-05:00</updated>
  <id>http://roseweixel.github.io/</id>
  <author>
    <name><![CDATA[Rose Weixel]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Flash Messages With Sessions in Sinatra]]></title>
    <link href="http://roseweixel.github.io/blog/2014/10/28/flash-messages-with-sessions-in-sinatra/"/>
    <updated>2014-10-28T23:18:15-04:00</updated>
    <id>http://roseweixel.github.io/blog/2014/10/28/flash-messages-with-sessions-in-sinatra</id>
    <content type="html"><![CDATA[<p><a href="http://www.sinatrarb.com/">Sinatra</a> is a DSL (domain specific language) for building small dynamic web apps with all the beauty of Ruby and without the bulk of Rails. Recently, my <a href="http://www.flatironschool.com">Flatiron School</a> classmates and I built a simple playlist app that allows users to perform all the basic CRUD operations on songs - you can create, retrieve, update, and destroy them. Emulating <a href="http://guides.rubyonrails.org/routing.html#crud-verbs-and-actions">RESTful routes for these actions (Ã  la Rails)</a>, I created something like the following:</p>

<pre><code class="ruby app/controllers/songs_controller.rb">
class SongsController &lt; ApplicationController

  get '/songs' do
    @songs = Song.all
    erb :"songs/index"
  end

  get '/songs/new' do
    erb :"songs/new"
  end

  post '/songs' do
    @song = Song.create(params[:song])
    redirect :"/songs/#{@song.id}"
  end

  get '/songs/:id' do
    @song = Song.find(params[:id])
    erb :"songs/show"
  end

  get '/songs/:id/edit' do
    @song = Song.find(params[:id])
    erb :"songs/edit"
  end

  post '/songs/:id' do
    @song = Song.find(params[:id])
    @song.update(params[:song])
    redirect :"/songs/#{@song.id}"
  end

end
</code></pre>

<p>With the corresponding models and views that make these routes real, a working web app was born. Pretty darn cool. But there was a feature in the spec that was still left to add, and it became a bit of a challenge:</p>

<p>Whenever a song is created or updated, the user should see a message like this:</p>

<p><img class="center" src="/images/song_success_message.png" width="700" height="700" title="&lsquo;image&rsquo; &lsquo;images&rsquo;" ></p>

<p>Here&rsquo;s what I wanted to achieve:</p>

<ul>
<li>The user fills out the form at &lsquo;songs/new&rsquo; and clicks &lsquo;Submit&rsquo;.</li>
<li>The newly created song&rsquo;s show page &lsquo;songs/:id/show&rsquo; is rendered with a success message.</li>
<li>The user reloads the page (or navagates away and back), and *poof* the success message is gone.</li>
</ul>


<p>In order to get this to work, I would have to somehow pass a message from one action in the controller to another. The create (or update)action would have to pass a message along to the show action which would pass this message along to the view. It would be nice to have something like an envelope called <code>success_message</code> that could hold one of three values at any given time:</p>

<ul>
<li><code>"Successfully created song."</code> (right after the song is created)</li>
<li><code>"Successfully updated song."</code> (right after the song is updated)</li>
<li><code>nil</code> (immediately after the success message is rendered in the view)</li>
</ul>


<p><a name="erb"></a>
According to this vision, I was able to put some yet-to-be-functional code in <code>songs/show.erb</code>:</p>

<p>&#8220;`erb</p>

<!-- this bit of code at the bottom of the page would reveal the contents of the success message if it isn't nil -->


<p>&lt;% if @success_message %>
  <div id="success" style="border: 2px solid green;">
  &lt;%= @success_message %>
  </div>
&lt;% end %>
&#8220;`</p>

<p>But how would <code>@success_message</code>, which would have to be definied in the show action in order for the show page to know about it, be able to hold a message the was created in another controller action (create or update)?</p>

<p>I knew that <code>params</code> is one such data object that holds values that can be passed from one action to another, but as it is already the envelope for carrying and delivering form data entered by the user, it didn&rsquo;t seem like the right place for a success message to live. If only there was some other vessel, like params, but not&hellip;</p>

<p><a name="first_step"></a>
There is. It&rsquo;s the session cookie! It becomes available to you as soon as you put this in your application controller:</p>

<pre><code class="ruby">class ApplicationController &lt; Sinatra::Base
  ...
  # add this line to enable the magic
  enable :sessions
end
</code></pre>

<p>Once you&rsquo;ve added that, you get this handy little object called <code>session</code> that you can access in any of your controllers.  Just to see what it looked like before doing anything with it, I put a <code>binding.pry</code> inside my index action in <code>songs_controller.rb</code>, fired off <code>shotgun</code>, and loaded the index page on my local server. Here&rsquo;s what pry spat out when I asked it what <code>session</code> was:</p>

<pre><code class="irb">[1] pry(#&lt;SongsController&gt;)&gt; session
=&gt; {"session_id"=&gt;"857d0d856ee646d76204c1138cf57fc497f80ffd85fef19befdbb26f60f8e022", "csrf"=&gt;"598119612cef0d88134413ddd54bad52", "tracking"=&gt;{"HTTP_USER_AGENT"=&gt;"7be1a42d74a413474898ddb9adfef9a5a84719e3", "HTTP_ACCEPT_LANGUAGE"=&gt;"66eae971492938c2dcc2fb1ddc8d7ec3196037da"}}
</code></pre>

<p>Here it is again, split up onto several lines for readability:</p>

<pre><code class="ruby">{
  "session_id"=&gt;"857d0d856ee646d76204c1138cf57fc497f80ffd85fef19befdbb26f60f8e022",
  "csrf"=&gt;"598119612cef0d88134413ddd54bad52",
  "tracking"=&gt;{
      "HTTP_USER_AGENT"=&gt;"7be1a42d74a413474898ddb9adfef9a5a84719e3",
      "HTTP_ACCEPT_LANGUAGE"=&gt;"66eae971492938c2dcc2fb1ddc8d7ec3196037da"
  }
}
</code></pre>

<p>So that&rsquo;s our session object, before we&rsquo;ve done anything with it. Having just learned about preventing cross-site request forgery in Rails, I recognize one of the elements in session as our CSRF token. If you want to learn more about this (and you should!), read about it <a href="http://guides.rubyonrails.org/security.html">here</a>. For now, let&rsquo;s move on and see how we can use this session object to help us with our success message.</p>

<p>First off, if we&rsquo;re going to do anything with it, it would help to understand what kind of object <code>session</code> is. It looks like an ordinary Ruby hash, but in fact it is a special kind of Rack object. Why guess when you can <code>pry</code> it?</p>

<pre><code class="irb">[2] pry(#&lt;SongsController&gt;)&gt; session.class
=&gt; Rack::Session::Abstract::SessionHash
</code></pre>

<p>As it turns out, the <code>SessionHash</code> object has a lot in common with a <code>Hash</code> object. 103 methods in common (out of 177 total), to be exact:</p>

<pre><code class="irb">[3] pry(#&lt;SongsController&gt;)&gt; session.methods.select{ |method| Hash.methods.include?(method) }.count
=&gt; 103
</code></pre>

<p>One <code>Hash</code>-like thing you can do with <code>session</code> is put new keys into it, with values that you can assign and change at your whim. To me, this sounded like just the right envelope for the success message!</p>

<p>Here&rsquo;s what I did (after enabling sessions, as shown <a href="#first_step">above</a>):</p>

<p>1) At the bottom of my create action (immediately before redirecting to the show page), I added a <code>:success_message</code> key to <code>session</code>, setting its value to the one-time message I want my users to see:</p>

<pre><code class="ruby songs_controller.rb">  post '/songs' do
    @song = Song.create(params[:song])

    session[:success_message] = "Successfully created song."

    redirect :"/songs/#{@song.id}"
  end
</code></pre>

<p>2) I did the same thing for my update action:</p>

<pre><code class="ruby">  post '/songs/:id' do
    @song = Song.find(params[:id])
    @song.update(params[:song])

    session[:success_message] = "Song successfully updated."

    redirect :"/songs/#{@song.id}"
  end
</code></pre>

<p>3) Then, I added some code at the top of the show action to pass this message along so it could be rendered in the <a href="#erb">erb template</a>, and to ensure that the message is immediately set to <code>nil</code> so it will only render once:</p>

<pre><code class="ruby">  get '/songs/:id' do
    @song = Song.find(params[:id])

    @success_message = session[:success_message]
    session[:success_message] = nil

    erb :'songs/show'
  end
</code></pre>

<p>Now my success message behaves exactly as I imaged it should, appearing and disappearing at the appropriate times.</p>

<p>I&rsquo;m sure there are many more uses for sessions, as well as other (and perhaps simpler) ways to implement flash messages in Sinatra apps. I hope you have as much fun playing with it as I did.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Join Tables in ActiveRecord: Complex Associations, Simple Code]]></title>
    <link href="http://roseweixel.github.io/blog/2014/10/22/join-tables-for-dr-who/"/>
    <updated>2014-10-22T21:38:48-04:00</updated>
    <id>http://roseweixel.github.io/blog/2014/10/22/join-tables-for-dr-who</id>
    <content type="html"><![CDATA[<p>Up until a few weeks ago, my entire coding toolbox consisted of a small sample of some built in Ruby methods. Two of these became blog post topics (<a href="http://roseweixel.github.io/blog/2014/10/08/looking-for-something-just-number-find-it/">#find</a> and <a href="http://roseweixel.github.io/blog/2014/10/07/cheese-dot-slice/">#slice</a>), and one&mdash;the <code>&lt;&lt;</code> method&mdash;became the central character of my first coding dream/nightmare, with reserved words <code>while</code> and <code>true</code> playing key supporting roles. I used these methods to write other pretty simple methods.</p>

<p>After just a few weeks at <a href="http://www.flatironschool.com">The Flatiron School</a>, I&rsquo;m quickly learning that building up complex programs, like web apps, can&rsquo;t (or maybe really just shouldn&rsquo;t) be accomplished by writing out method after method in one big file. You need the right structures and tools to create complex objects, persist them in a database, and express relationships between these objects. Using ActiveRecord, you get some really simple and powerful tools for all this that hide a huge amount of complexity away, allowing you focus on designing your app to do what you want it to do.</p>

<p>While ActiveRecord makes it easy to create models and associations, some of the concepts involved were hard for me to get my head around at first. One such concept was the join table. I ran up against a problem in need of a join table while working with my classmates on a lab involving modeling characters and actors.</p>

<p>In ActiveRecord speak, actors have many characters and a character belongs to an actor. Here, in all of its elegant simplicity, is how you&rsquo;d create the models that express this relationship:</p>

<pre><code class="ruby app/models/actor.rb">class Actor &lt; ActiveRecord::Base
  has_many :characters
end
</code></pre>

<pre><code class="ruby app/models/character.rb">class Character &lt; ActiveRecord::Base
  belongs_to :actor
end
</code></pre>

<p>Now all we need are two tables (actors and characters) to make this association work. The characters table, being on the <code>belongs_to</code> side of the relationship, must have a column for the foreign key, <code>actor_id</code>. In ActiveRecord, this can be accomplished in remarkably few lines of code:</p>

<pre><code class="ruby db/migrations/001_create_actors.rb">class CreateActors &lt; ActiveRecord::Migration
  def change
    create_table :actors do |t|
      # ActiveRecord provides an id (primary key) column by default, for free!
      t.string :name
    end
  end
end
</code></pre>

<pre><code class="ruby db/migrations/002_create_characters.rb">class CreateCharacters &lt; ActiveRecord::Migration
  def change
    create_table :characters do |t|
      t.string :name
      # Here is where the magic happens. ActiveRecord knows that this references the actors table.
      t.integer :actor_id
    end
  end
end
</code></pre>

<p>This is the basic pattern you&rsquo;d follow to model any <code>has_many</code> <code>belongs_to</code> relationship in ActiveRecord. What seems like &ldquo;magic&rdquo; here is made possible by ActiveRecord Ruby methods that either give our associated classes more methods that let them interact with each other, or wrap SQL statements and hide them away (in the case of migrations). But that is a topic for another post.</p>

<p>Back to actors and characters. As my classmates and I were creating these models, two big things came to the surface:</p>

<p>1) We could not recall any of Tom Cruise&rsquo;s many characters&#8217; names.</p>

<p>2) What happens when a character has more than one actor? One of my favorite characters would most certainly break our has many/belongs to association&mdash;The Doctor.</p>

<p><img class="center" src="/images/sad_doc_rain.jpeg" width="500" height="500" title="&lsquo;image&rsquo; &lsquo;images&rsquo;" ></p>

<p>How can we fit The Doctor into our current schema??? The more I thought about it, the more impossible it seemed. Here is an illustration:</p>

<p><img class="center" src="/images/actor_char_table.png" width="500" height="500" title="&lsquo;image&rsquo; &lsquo;images&rsquo;" ></p>

<p>The above is our simple model, before The Doctor comes along and breaks everything. Just to be sure I was grasping how NOT to try to include The Doctor and his many actors, here is how it might look:</p>

<p><img class="center" src="/images/the_doctor_broke_the_table.png" width="800" height="800" title="&lsquo;image&rsquo; &lsquo;images&rsquo;" ></p>

<p>Our actors table seems fine, but our characters table is definitely not okay, and we haven&rsquo;t even included the eight doctors from the first twenty-six seasons yet.</p>

<p>With our current setup, we have to change the entire schema every time we add another Doctor. This is very, very bad. A database was designed for adding lots of rows. Not so for columns.</p>

<p>In order to make things right, we need a different association: many-to-many. Actors have many characters, and a character has many actors. In order to set our database up for this association, we need a join table. First the visual:</p>

<p><img class="center" src="/images/revised_character_actor_with_join.png" width="650" height="650" title="&lsquo;image&rsquo; &lsquo;images&rsquo;" ></p>

<p>Now for the migration (assuming your actors table is still intact and you&rsquo;ve already removed all but the name column from characters):</p>

<pre><code class="ruby 004_create_actors_characters_join_table.rb">class CreateCharacterActorRelationships &lt; ActiveRecord::Migration
  def change
    create_table :character_actor_relationships do |t|
      t.integer :character_id
      t.integer :actor_id
    end
  end
end
</code></pre>

<p>We also need to change our actor and character models. In order for the association to work, we need to somehow connect our actors and characters table through the character_actor_relationships table. The association we need in our actor and character models is <code>has_many :through</code>:</p>

<pre><code class="ruby app/models/actor.rb">class Actor &lt; ActiveRecord::Base
  has_many :character_actor_relationships
  has_many :characters, through: :character_actor_relationships
end
</code></pre>

<pre><code class="ruby app/models/character.rb">class Character &lt; ActiveRecord::Base
  has_many :character_actor_relationships
  has_many :actors, through: :character_actor_relationships
end
</code></pre>

<p>Finally, we need a model for CharacterActorRelationship:</p>

<pre><code class="ruby app/models/character_actor_relationship.rb">class CharacterActorRelationship &lt; ActiveRecord::Base
  belongs_to :character
  belongs_to :actor
end
</code></pre>

<p>Now we have the right associations and the right database schema to add all of the Doctors that ever were and ever will be throughout all time.</p>

<p><img class="center" src="/images/first_doctor.jpeg" width="500" height="500" title="&lsquo;image&rsquo; &lsquo;images&rsquo;" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Looking for Something? Just #find It!]]></title>
    <link href="http://roseweixel.github.io/blog/2014/10/08/looking-for-something-just-number-find-it/"/>
    <updated>2014-10-08T20:32:04-04:00</updated>
    <id>http://roseweixel.github.io/blog/2014/10/08/looking-for-something-just-number-find-it</id>
    <content type="html"><![CDATA[<p>Searching through nested data structures can be downright messy. Even saying &ldquo;nested data structures&rdquo; sounds complicated. Luckily, Ruby has some powerful <a href="http://www.ruby-doc.org/core-2.1.3/Enumerable.html">Enumerable methods</a> that can simplify our lives (or at least our code).</p>

<p>Let&rsquo;s say you&rsquo;ve been programming for hours and suddenly realize your stomach is growling at you (why does this happen so often?). Here is how you might search for some delicious food, if you happened to be searching inside an array filled with hashes. Just humor me for the sake of example.</p>

<p>Here is our <code>restaurants</code> array:</p>

<pre><code class="ruby">restaurants = [
    {:name =&gt; "The Decent Diner", :rating =&gt; "average"}, 
    {:name =&gt; "The GoGo Grill", :rating =&gt; "delicious"}, 
    {:name =&gt; "Emporium of Mystery Meat", :rating =&gt; "poor"},  
    {:name =&gt; "Dig Inn Seasonal Market", :rating =&gt; "delicious"}
]
</code></pre>

<p>So, we want to get the name of a restaurant whose <code>:rating</code> is <code>"delicious"</code>. We could do something like this:</p>

<pre><code class="ruby">def find_delicious_food(restaurants)
      restaurants.each do |restaurant_info|
    restaurant_info.values.each do |value|
      if value == "delicious"
        return restaurant_info[:name]
      end
    end
  end
end
</code></pre>

<p>If we call this method on our <code>restaurants</code> hash, it will return the value &ldquo;The GoGo Grill&rdquo;. Sounds good to me. But in order to get there we needed a <code>return</code> inside an <code>if</code> statement inside an <code>each</code> loop inside another <code>each</code> loop. Not pretty.</p>

<p>There is a better way. The <code>find</code> method! Behold:</p>

<pre><code class="ruby">def find_delicious_food(restaurants)
  restaurants.find{|restaurant| restaurant[:rating] == "delicious"}[:name]
end
</code></pre>

<p>Just one line of code seems to do the same thing as its ugly predecessor. Let&rsquo;s look at it more closely. Here is what <code>find</code> does:</p>

<ul>
<li>It passes each element of the object on which it was called to a block.</li>
<li>It returns the first element for which the block evaluates to <code>true</code>.</li>
<li>If none of the elements return true for the given block, it returns <code>nil</code>.</li>
</ul>


<p>As it turns out, this <code>nil</code> value could cause some problems for our <code>find_delicious_food</code> method. If there are no restaurants in the hash with a <code>:rating</code> of <code>"delicious"</code>, our code breaks. We would get an error, because Ruby cannot make any sense out of <code>nil[:name]</code>.</p>

<p>Here is the method refactored to avoid that error:</p>

<pre><code class="ruby">def find_delicious_food(restaurants)
  good_restaurant = restaurants.find{|restaurant| restaurant[:rating] == "delicious"}
  if good_restaurant
    return good_restaurant[:name]
  end
end
</code></pre>

<p>Sure, it may not be as cute and little as our one-line method, but it will never break and it&rsquo;s still a lot prettier than loops inside loops.</p>

<p>So when you are searching for that <em>one</em> thing you need inside of some nasty nesting, just <code>find</code> it!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[cheese.slice]]></title>
    <link href="http://roseweixel.github.io/blog/2014/10/07/cheese-dot-slice/"/>
    <updated>2014-10-07T22:07:16-04:00</updated>
    <id>http://roseweixel.github.io/blog/2014/10/07/cheese-dot-slice</id>
    <content type="html"><![CDATA[<p>When learning a programming language as natural as Ruby, the syntax inevitably seeps into our thoughts and alters the way we conceptualize everything from the complex to the mundane. Thus, the title of this blog (and, indeed, this post).</p>

<p>It is easy for this to happen, in part because Ruby has such an extensive library of methods whose names and behaviors make them ideal for modeling real life. One such method is <code>slice</code>.</p>

<p>The method <code>slice</code> can be called on an array (or an object that acts like an array, like a string). It literally returns a &ldquo;slice&rdquo; of the object on which it is called. The original object is left intact.</p>

<pre><code>&gt; cheese = ['gouda', 'muenster', 'provolone', 'manchego', 'brie']
&gt; my_slices = cheese.slice(1, 2)
=&gt; ["muenster", "provolone"] 
&gt; cheese
=&gt; ["gouda", "muenster", "provolone", "manchego", "brie"]
</code></pre>

<p>If you need to take more drastic measures, <code>slice!</code> will modify the original object, removing (and returning) everything you sliced out.</p>

<pre><code>&gt; cheese = ['gouda', 'muenster', 'provolone', 'manchego', 'brie']
&gt; my_slices = cheese.slice!(1, 2)
=&gt; ["muenster", "provolone"] 
&gt; cheese
=&gt; ["gouda", "manchego", "brie"]
</code></pre>

<p>Here are three different ways to use <code>slice</code> (<code>slice!</code> can also be invoked in these ways, and both can be used with arrays and strings):</p>

<ul>
<li><p><code>array.slice(index)</code> returns the object at <code>array[index]</code>, or <code>nil</code> if there is no object there to return.</p></li>
<li><p><code>array.slice(start, length)</code> returns a new array containing the elements of <code>array</code> starting at <code>start</code> and continuing for <code>length</code> elements (as shown in the code examples above). If there are no objects there, it returns <code>nil</code>.<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p></li>
<li><p><code>array.slice(range)</code> returns a new array containing the objects at <code>array[range]</code>, or <code>nil</code>.</p></li>
</ul>


<p>  For more on this and other Ruby Array methods, see the <a href="http://www.ruby-doc.org/core-2.1.3/Array.html#method-i-slice">documentation</a>.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>There are some special cases that return an empty array. See the <a href="http://www.ruby-doc.org/core-2.1.3/Array.html#method-i-slice">documentation</a>.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
</feed>
