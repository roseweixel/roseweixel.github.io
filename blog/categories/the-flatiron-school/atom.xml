<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: The Flatiron School | code.life]]></title>
  <link href="http://roseweixel.github.io/blog/categories/the-flatiron-school/atom.xml" rel="self"/>
  <link href="http://roseweixel.github.io/"/>
  <updated>2014-11-20T23:23:24-05:00</updated>
  <id>http://roseweixel.github.io/</id>
  <author>
    <name><![CDATA[Rose Weixel]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Awesome Programmer == Awesome Person]]></title>
    <link href="http://roseweixel.github.io/blog/2014/11/20/awesome-programmer-equals-equals-awesome-person/"/>
    <updated>2014-11-20T20:30:03-05:00</updated>
    <id>http://roseweixel.github.io/blog/2014/11/20/awesome-programmer-equals-equals-awesome-person</id>
    <content type="html"><![CDATA[<p>We&rsquo;re nearing the end of the amazing whirlwind that is week eight at <a href="http://www.flatironschool.com">The Flatiron School</a>. We&rsquo;ve bid farewell (at least for now) to lectures and labs, and have blasted off into project mode. No predetermined specs, no Ironboard green lights, just forty eager, fledgeling developers putting all of their ambition, grit, and new skills into building things.</p>

<p>In the midst of the whirlwind, <a href="http://obiefernandez.com/">Obie Fernandez</a>, author of <a href="http://www.amazon.com/Rails-Way-Addison-Wesley-Professional-Ruby/dp/0321944275">the &ldquo;bible&rdquo; for Rails development</a>, dropped by to chat with us today. It was inspiring to hear him talk about one of his latest endeavors, the <a href="http://www.andela.co/fellowship">Andela Fellowship</a>, which is a program whose mission is to train some of the brightest young people in Africa to be awesome developers and connect them with employers. Echoing the words of The Flatiron School&rsquo;s own Avi Flombaum, Obie told us that learning to be an awesome developer is not just about learning &ldquo;hard skills&rdquo;. It&rsquo;s about learning to be an awesome person. Furthermore, he said,</p>

<blockquote><p>&ldquo;Programming is a career that encourages awesomeness.&rdquo;</p></blockquote>

<p>Though it wasn&rsquo;t the first time I heard that message, it meant something more to me today than it did in week one, and the words sat quietly brewing in the back of my brain as I spent the evening coding with my teammates.</p>

<p>Does the act of learning to program make you a better person? I&rsquo;m not so sure of that, but I&rsquo;m sure that learning to be an awesome person makes you a better programmer. And while learning about nested hashes doesn&rsquo;t somehow magically make you an awesome person, I do believe that people who are continually striving and struggling to be great programmers will be nudged in the direction of awesomeness by the nature of the endeavor itself.</p>

<p>So, what is it about programming that encourages awesomeness?</p>

<ol>
<li><p>Communication and Empathy:</p>

<ul>
<li><p>No successful programmer works in isolation. I&rsquo;ve learned at The Flatiron School that while you might go faster alone you definitely go farther if you work together. Failure to listen and communicate effectively negatively affects the team, the workflow, and the product.</p></li>
<li><p>Code is for communication. It&rsquo;s not just a set of instructions for a computer. When it&rsquo;s done right, code tells a story that other developers can understand and build upon.</p></li>
</ul>
</li>
<li><p>Caring About The Small Things:</p>

<ul>
<li>In order for your code to work, you have to get the details right. Getting the details right requires patience, mindfulness, and taking pride in one&rsquo;s work.</li>
</ul>
</li>
<li><p>Going With The Flow:</p>

<ul>
<li>A program is never done. A good programmer is willing to let go and accept changes, be willing to start from scratch, and be open to going in new directions and taking new approaches.</li>
</ul>
</li>
<li><p>Grit:</p>

<ul>
<li>Starting to learn to program is hard. Keeping on learning to program while it&rsquo;s hard takes grit.</li>
</ul>
</li>
<li><p>Being a Lifelong Learner:</p>

<ul>
<li>Technology never stops evolving, and neither do awesome programmers. If you want to love your career in programming, you&rsquo;ve got to love learning first.</li>
</ul>
</li>
</ol>


<p>Before I end this post, let me be clear that by no means do I believe any of the above qualities are unique to the set of people known as &ldquo;programmers&rdquo;. In fact, anyone can learn to program. More importantly though, anyone can learn the skills it takes to be an awesome person. I&rsquo;m just really happy to find that learning both of these in parellel go so nicely hand in hand.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Join Tables in ActiveRecord: Complex Associations, Simple Code]]></title>
    <link href="http://roseweixel.github.io/blog/2014/10/22/join-tables-in-active-record/"/>
    <updated>2014-10-22T21:38:48-04:00</updated>
    <id>http://roseweixel.github.io/blog/2014/10/22/join-tables-in-active-record</id>
    <content type="html"><![CDATA[<p>Up until a few weeks ago, my entire coding toolbox consisted of a small sample of some built in Ruby methods. Two of these became blog post topics (<a href="http://roseweixel.github.io/blog/2014/10/08/looking-for-something-just-number-find-it/">#find</a> and <a href="http://roseweixel.github.io/blog/2014/10/07/cheese-dot-slice/">#slice</a>), and one&mdash;the <code>&lt;&lt;</code> method&mdash;became the central character of my first coding dream/nightmare, with reserved words <code>while</code> and <code>true</code> playing key supporting roles. I used these methods to write other pretty simple methods.</p>

<p>After just a few weeks at <a href="http://www.flatironschool.com">The Flatiron School</a>, I&rsquo;m quickly learning that building up complex programs, like web apps, can&rsquo;t (or maybe really just shouldn&rsquo;t) be accomplished by writing out method after method in one big file. You need the right structures and tools to create complex objects, persist them in a database, and express relationships between these objects. Using ActiveRecord, you get some really simple and powerful tools for all this that hide a huge amount of complexity away, allowing you focus on designing your app to do what you want it to do.</p>

<p>While ActiveRecord makes it easy to create models and associations, some of the concepts involved were hard for me to get my head around at first. One such concept was the join table. I ran up against a problem in need of a join table while working with my classmates on a lab involving modeling characters and actors.</p>

<p>In ActiveRecord speak, actors have many characters and a character belongs to an actor. Here, in all of its elegant simplicity, is how you&rsquo;d create the models that express this relationship:</p>

<pre><code class="ruby app/models/actor.rb">class Actor &lt; ActiveRecord::Base
  has_many :characters
end
</code></pre>

<pre><code class="ruby app/models/character.rb">class Character &lt; ActiveRecord::Base
  belongs_to :actor
end
</code></pre>

<p>Now all we need are two tables (actors and characters) to make this association work. The characters table, being on the <code>belongs_to</code> side of the relationship, must have a column for the foreign key, <code>actor_id</code>. In ActiveRecord, this can be accomplished in remarkably few lines of code:</p>

<pre><code class="ruby db/migrations/001_create_actors.rb">class CreateActors &lt; ActiveRecord::Migration
  def change
    create_table :actors do |t|
      # ActiveRecord provides an id (primary key) column by default, for free!
      t.string :name
    end
  end
end
</code></pre>

<pre><code class="ruby db/migrations/002_create_characters.rb">class CreateCharacters &lt; ActiveRecord::Migration
  def change
    create_table :characters do |t|
      t.string :name
      # Here is where the magic happens. ActiveRecord knows that this references the actors table.
      t.integer :actor_id
    end
  end
end
</code></pre>

<p>This is the basic pattern you&rsquo;d follow to model any <code>has_many</code> <code>belongs_to</code> relationship in ActiveRecord. What seems like &ldquo;magic&rdquo; here is made possible by ActiveRecord Ruby methods that either give our associated classes more methods that let them interact with each other, or wrap SQL statements and hide them away (in the case of migrations). But that is a topic for another post.</p>

<p>Back to actors and characters. As my classmates and I were creating these models, two big things came to the surface:</p>

<p>1) We could not recall any of Tom Cruise&rsquo;s many characters&#8217; names.</p>

<p>2) What happens when a character has more than one actor? One of my favorite characters would most certainly break our has many/belongs to association&mdash;The Doctor.</p>

<p><img class="center" src="/images/sad_doc_rain.jpeg" width="500" height="500" title="&lsquo;image&rsquo; &lsquo;images&rsquo;" ></p>

<p>How can we fit The Doctor into our current schema??? The more I thought about it, the more impossible it seemed. Here is an illustration:</p>

<p><img class="center" src="/images/actor_char_table.png" width="500" height="500" title="&lsquo;image&rsquo; &lsquo;images&rsquo;" ></p>

<p>The above is our simple model, before The Doctor comes along and breaks everything. Just to be sure I was grasping how NOT to try to include The Doctor and his many actors, here is how it might look:</p>

<p><img class="center" src="/images/the_doctor_broke_the_table.png" width="800" height="800" title="&lsquo;image&rsquo; &lsquo;images&rsquo;" ></p>

<p>Our actors table seems fine, but our characters table is definitely not okay, and we haven&rsquo;t even included the eight doctors from the first twenty-six seasons yet.</p>

<p>With our current setup, we have to change the entire schema every time we add another Doctor. This is very, very bad. A database was designed for adding lots of rows. Not so for columns.</p>

<p>In order to make things right, we need a different association: many-to-many. Actors have many characters, and a character has many actors. In order to set our database up for this association, we need a join table. First the visual:</p>

<p><img class="center" src="/images/revised_character_actor_with_join.png" width="650" height="650" title="&lsquo;image&rsquo; &lsquo;images&rsquo;" ></p>

<p>Now for the migration (assuming your actors table is still intact and you&rsquo;ve already removed all but the name column from characters):</p>

<pre><code class="ruby 004_create_actors_characters_join_table.rb">class CreateCharacterActorRelationships &lt; ActiveRecord::Migration
  def change
    create_table :character_actor_relationships do |t|
      t.integer :character_id
      t.integer :actor_id
    end
  end
end
</code></pre>

<p>We also need to change our actor and character models. In order for the association to work, we need to somehow connect our actors and characters table through the character_actor_relationships table. The association we need in our actor and character models is <code>has_many :through</code>:</p>

<pre><code class="ruby app/models/actor.rb">class Actor &lt; ActiveRecord::Base
  has_many :character_actor_relationships
  has_many :characters, through: :character_actor_relationships
end
</code></pre>

<pre><code class="ruby app/models/character.rb">class Character &lt; ActiveRecord::Base
  has_many :character_actor_relationships
  has_many :actors, through: :character_actor_relationships
end
</code></pre>

<p>Finally, we need a model for CharacterActorRelationship:</p>

<pre><code class="ruby app/models/character_actor_relationship.rb">class CharacterActorRelationship &lt; ActiveRecord::Base
  belongs_to :character
  belongs_to :actor
end
</code></pre>

<p>Now we have the right associations and the right database schema to add all of the Doctors that ever were and ever will be throughout all time.</p>

<p><img class="center" src="/images/first_doctor.jpeg" width="500" height="500" title="&lsquo;image&rsquo; &lsquo;images&rsquo;" ></p>
]]></content>
  </entry>
  
</feed>
