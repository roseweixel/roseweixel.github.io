<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: The Flatiron School | code.life]]></title>
  <link href="http://roseweixel.github.io/blog/categories/the-flatiron-school/atom.xml" rel="self"/>
  <link href="http://roseweixel.github.io/"/>
  <updated>2015-07-08T15:16:03-04:00</updated>
  <id>http://roseweixel.github.io/</id>
  <author>
    <name><![CDATA[Rose Weixel]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The Fog Creek Fellowship: A Bridge to Life After Flatiron, an Open Door for Women in Tech]]></title>
    <link href="http://roseweixel.github.io/blog/2015/03/04/the-fog-creek-fellowship-a-bridge-to-life-after-flatiron/"/>
    <updated>2015-03-04T20:44:39-05:00</updated>
    <id>http://roseweixel.github.io/blog/2015/03/04/the-fog-creek-fellowship-a-bridge-to-life-after-flatiron</id>
    <content type="html"><![CDATA[<p>After spending three months in a happy <a href="http://flatironschool.com/">Flatiron School</a> chrysalis transforming into a web developer, I graduated a little over two months ago feeling optimistic yet uncertain about the future. I was confident that Flatiron had equipped me to hit the ground ready to build, and had fostered in me a love and excitement for code that would keep me pushing forward no matter where I went next.</p>

<p>Then there was the uncertainty. After spending nine years, more than a quarter of my life, in the education field, I was about to embark on something totally unknown. Coming from a completely non-technical background, as most of my classmates also had, I wondered if I was a &ldquo;real&rdquo; developer and how I&rsquo;d fit in at a tech company.</p>

<p>Aside from the fact that I hadn&rsquo;t studied computer science and spent most of my life considering nearly every career path except one as a programmer, the knowledge that I&rsquo;d likely be the only (or one of the only) females in a team of developers at almost any company I ended up at made me wonder how I&rsquo;d feel at home in this new community.</p>

<p>I had almost forgotten about the <a href="http://fivethirtyeight.com/datalab/gender-balance-tech-new-york-beyond/">startling gender imbalance in tech</a> while I was at The Flatiron School. One thing that sets Flatiron apart from its competitors is that its gender ratio mirrors that of the natural world. In fact, my class was over 50% female, as is the current cohort of students. It&rsquo;s a place that felt instantly like home, where we all were just a bunch of humans who happened to be on a mission to learn how to code together. People have asked questions like &ldquo;how does Flatiron get all these women?&rdquo;. Although it may seem like an obvious thing to ask, maybe the question itself is indicative of part of the problem. Why not ask how the world of tech continues to be so skewed toward men?</p>

<p>These are tough questions to answer, but it&rsquo;s clear that The Flatiron School is doing a lot of things right. And, I&rsquo;m happy to say, some forward thinking companies in the world of tech are also stepping up to the challenge of facing and addressing the gender gap. Enter <a href="http://flatironschool.com/fogcreek/">The Fog Creek Fellowship</a>.</p>

<p>Thanks to a partnership with <a href="https://www.fogcreek.com/">Fog Creek</a>, <a href="https://trello.com/">Trello</a>, and <a href="http://stackexchange.com/">Stack Exchange</a>, nearly every one of my female classmates was able to get a jumpstart on their new coding careers with the mentorship of a senior developer who was willing to devote real time and interest in helping us through the transition. My mentor <a href="http://maxhorstmann.net/">Max Horstmann</a> exemplified this. When I got that exciting but nerve wracking first technical interview, he was there to do an in-depth whiteboarding session and provide truly constructive feedback. When I had questions about the difference between SQL and NoSQL, he was happy to explain it and discuss the pros and cons. In fact he and all the other mentors in the program were always happy to geek out about pretty much anything with me.</p>

<p>Perhaps most importantly, just like The Flatiron School teaches us to &ldquo;make no little plans,&rdquo; my mentor gave me the courage to dream big for my career, not just look for my next job. Should I feel entitled to love what I do for a living? Yes. Could my passion project become a startup one day? Totally possible. This was not just going to be a career change for me &ndash; this was a revolutionary mind shift.</p>

<p>Certainly, The Flatiron School and The Fog Creek Fellowship don&rsquo;t hold any magic answers to the daunting gender gap in tech. But the fact is, when we&rsquo;re faced with challenges that seem almost impossible to overcome, often the best thing to do is just to throw your hat over the wall and <em>do something</em>. At the end of one journey and the beginning of a much longer one, I&rsquo;m filled with gratitude and hope.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making Friends (With Code)]]></title>
    <link href="http://roseweixel.github.io/blog/2014/12/04/making-friends-with-code/"/>
    <updated>2014-12-04T23:01:41-05:00</updated>
    <id>http://roseweixel.github.io/blog/2014/12/04/making-friends-with-code</id>
    <content type="html"><![CDATA[<p>This post will not be about how I&rsquo;ve spent the last ten weeks at <a href="http://flatironschool.com/">The Flatiron School</a> making awesome friends while coding together, or about my process of becoming friends with code. Those are posts for another time. This one is about the kinds of friendships that are actually built with code, the kind you can persist in a database.</p>

<p>Over the course of working on my two most recent projects, I&rsquo;ve discovered that there is more than one way to make a friendship happen on the backend of a Rails app (or most likely any app). My first crack at making friendships was for a <a href="https://lacquer-love-and-lend.herokuapp.com/">nail polish sharing app</a> where friends can view each other&rsquo;s collections and ask to borrow from each other. I watched Treehouse&rsquo;s tutorial on <a href="http://teamtreehouse.com/library/building-social-features-in-ruby-on-rails">building social features in Ruby on Rails</a>, which is a good place to start if you&rsquo;ve never done something like this before. Although it helped me understand it somewhat, the way it was done in the tutorial still seemed pretty complicated to me. I decided to try to figure it out on my own so that I could break it down and understand it better.</p>

<p>Here are the basic back-end requirements for creating a friendship (clearly some buttons and forms on the front-end are needed, but those are implementation details, so I&rsquo;ll leave them out of this post):</p>

<ul>
<li><p>You have to teach your models that some Users have relationships with other Users (a self-referential association).</p></li>
<li><p>You have to store that relationship in the database so that both sides of the relationship have knowledge of it and access to it.</p></li>
<li><p>You have to have a way of representing and keeping track of the state of the relationship at any given time (requested, accepted, etc.)</p></li>
</ul>


<p>Here&rsquo;s how I did it in my first go-around:</p>

<p>1) I created a join table, <code>friendships</code>:</p>

<pre><code class="ruby">class CreateFriendships &lt; ActiveRecord::Migration
  def change
    create_table :friendships do |t|
      t.integer :user_id
      t.integer :friend_id
      t.timestamps
    end
    # it's a good idea to add an index for faster look-ups in the database
    add_index :friendships, [:user_id, :friend_id]
  end
end
</code></pre>

<p>2) In the model for Friendship, I taught it that Friends are really just other Users:</p>

<pre><code class="ruby">class Friendship &lt; ActiveRecord::Base
  belongs_to :user
  belongs_to :friend, class_name: 'User', foreign_key: 'friend_id'

  validate :is_not_duplicate, :on =&gt; :create

  def is_not_duplicate
    if !(Friendship.where(:friend_id =&gt; friend_id, :user_id =&gt; user_id).empty? &amp;&amp; Friendship.where(:user_id =&gt; friend_id, :friend_id =&gt; user_id).empty?)
      errors.add(:friendship, "This friendship already exists!")
    end
  end
end
</code></pre>

<p>As you can see from the above, I decided I didn&rsquo;t want to allow &ldquo;duplicates&rdquo; of friendships in the database, but as it turns out there are reasons why you might not want to do it this way. I&rsquo;ll go into that later.</p>

<p>3) I made the User model aware of the Friendship model:</p>

<pre><code class="ruby">class User &lt; ActiveRecord::Base
  has_many :friendships
  has_many :friends, through: :friendships

  validates :name, presence: true, uniqueness: true

  def accepted_friends
    accepted_friends = []
    Friendship.where(user_id: self.id, state: 'accepted').each do |friendship|
      accepted_friends &lt;&lt; User.find(friendship.friend_id)
    end
    Friendship.where(friend_id: self.id, state: 'accepted').each do |friendship|
      accepted_friends &lt;&lt; User.find(friendship.user_id)
    end
    accepted_friends
  end

  def requested_friends_awaiting_approval
    pending_friends = []
    Friendship.where(user_id: self.id, state: 'pending').each do |friendship|
      pending_friends &lt;&lt; User.find(friendship.friend_id)
    end
    pending_friends
  end

  def friendships_for_your_approval
    pending_friendships = []
    Friendship.where(friend_id: self.id, state: 'pending').each do |friendship|
      pending_friendships &lt;&lt; friendship
    end
    pending_friendships
  end

  def friends_for_your_approval
    pending_friends = []
    Friendship.where(friend_id: self.id, state: 'pending').each do |friendship|
      friend = User.find(friendship.user_id)
      pending_friends &lt;&lt; friend
    end
    pending_friends
  end

  def all_friends
    accepted_friends + requested_friends_awaiting_approval + friends_for_your_approval
  end

end
</code></pre>

<p>You&rsquo;ll notice that I wrote a whole bunch of methods to tell Users how to find their friends on both sides of the relationship. I wanted to give users custom notifications in the views depending on whether they had a pending request or a request awaiting their approval, which was part of the reason for this. But even if I hadn&rsquo;t wanted to do that, I would have at least needed some kind of setup like this that makes multiple hits to the database every time someone wants to see all of their friends.</p>

<p>4) Finally, <code>state</code> is a big part of this model. I set it up so a friendship could have a state of <code>pending</code> or <code>accepted</code> (similar methods would create other states, like <code>rejected</code>). This is where the friendships controller comes in. For the sake of brevity, I&rsquo;ll just describe the <code>create</code> and <code>update</code> methods:</p>

<pre><code class="ruby">class FriendshipsController &lt; ApplicationController

  def create
    @user = current_user
    if params[:friendship] &amp;&amp; params[:friendship].has_key?(:friend_id)
      @friend = User.find(params[:friendship][:friend_id])
      @friendship = Friendship.new(friend: @friend, user: @user, state: 'pending')
      @friendship.save
      flash[:notice] = "Your friendship with #{@friend.name} is pending."
      redirect_to(:back)
    else
      flash[:notice] = "Friend required"
      redirect_to root_path
    end
  end

  def update
    @friendship = Friendship.find(params[:id])
    @friendship.update(state: params[:state])
    redirect_to(:back)
  end

end
</code></pre>

<p>Since I&rsquo;ve made a column in the friendships table for <code>state</code>, I can set and update the value of that attribute so a Friendship can introspect on the state it is currently in (what if we could write a method for doing this in real life?).</p>

<p>I set the <code>state</code> of the friendship to <code>'pending'</code> whenever it first gets created. Then, when the User who was &ldquo;friended&rdquo; decides to hit the &lsquo;Accept&rsquo; button (or the &lsquo;Reject&rsquo; button as the case may be), the friendship can get updated accordingly.</p>

<p>So, although the implementation of friendships I ended up with in my first attempt has the functionality I wanted, but as I mentioned before, it&rsquo;s not the most efficient. While my reasoning was that it is not desirable to have two rows in the friendships join table for every relationship that gets created, this reasoning did not take into account the way databases work. Because I have to query twice (Who are the people I&rsquo;ve friended? Who are the people who have friended me?) every single time I want to access my friends, this is actually unneccesarily expensive. Since rows in a database are cheap, why worry about adding an extra row if it reduces the number of times you need to hit the database?</p>

<p>I got a second crack at this problem during my current project, an app for teachers that includes functionality for generating seating charts according to who works well together and who doesn&rsquo;t. Along with my teammates, we built Buddyships (and Enemyships, too!) in a more reciprocal way:</p>

<pre><code class="ruby">class Enemyship &lt; ActiveRecord::Base
  belongs_to :student
  belongs_to :enemy, class_name: 'Student', foreign_key: 'enemy_id'
  belongs_to :course_section

  after_create :inversify
  after_destroy :destroy_inverse

  validates_uniqueness_of :student, :scope =&gt; [:enemy, :course_section_id]
  validates_uniqueness_of :enemy, :scope =&gt; [:student, :course_section_id]

  validate :cant_be_own_enemy, :cant_be_buddies_and_enemies

  def inversify
    self.enemy.enemyships.create(:course_section_id =&gt; self.course_section_id, :enemy_id =&gt; self.student.id)
  end

  def destroy_inverse
    if inverse = self.enemy.enemyships.where(:enemy_id =&gt; self.student.id, :course_section_id =&gt; self.course_section_id).first
      inverse.destroy
    end
  end

  private
  def cant_be_own_enemy
    if student_id == enemy_id
      errors.add(:enemy_id, "you can't be your own enemy! :(")
    end
  end

  def cant_be_buddies_and_enemies
    if Buddyship.find_by(student_id: student_id, buddy_id: enemy_id, course_section_id: course_section_id)
      errors.add(:enemy_id, "you can't be both buddies and enemies for the same class! :(")
    end
  end

end
</code></pre>

<p>In this implementation, two rows in the join table are created for each relationship, using a method aptly called <code>inversify</code>.</p>

<p>Because of the reciprocal nature of the relationship created in this model, one database query (<code>student.enemyships</code>) is all it takes to find all potential Enemies. If you were only creating relationships, you&rsquo;d care about not writing to the database more than you needed to. But since, in general, we query for friendships way more frequently than we create them, we want to make sure the querying is as efficient as possible.</p>

<p>So, while one-way relationships are fine for a follower-followee type of relationship, if you want to create a reciprocal relationship in your next app, don&rsquo;t shy away from those extra rows in the database.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Awesome Programmer == Awesome Person]]></title>
    <link href="http://roseweixel.github.io/blog/2014/11/20/awesome-programmer-equals-equals-awesome-person/"/>
    <updated>2014-11-20T20:30:03-05:00</updated>
    <id>http://roseweixel.github.io/blog/2014/11/20/awesome-programmer-equals-equals-awesome-person</id>
    <content type="html"><![CDATA[<p>We&rsquo;re nearing the end of the amazing whirlwind that is week eight at <a href="http://www.flatironschool.com">The Flatiron School</a>. We&rsquo;ve bid farewell (at least for now) to lectures and labs, and have blasted off into project mode. No predetermined specs, no Ironboard green lights, just forty eager, fledgeling developers putting all of their ambition, grit, and new skills into building things.</p>

<p>In the midst of the whirlwind, <a href="http://obiefernandez.com/">Obie Fernandez</a>, author of <a href="http://www.amazon.com/Rails-Way-Addison-Wesley-Professional-Ruby/dp/0321944275">the &ldquo;bible&rdquo; for Rails development</a>, dropped by to chat with us today. It was inspiring to hear him talk about one of his latest endeavors, the <a href="http://www.andela.co/fellowship">Andela Fellowship</a>, which is a program whose mission is to train some of the brightest young people in Africa to be awesome developers and connect them with employers. Echoing the words of The Flatiron School&rsquo;s own Avi Flombaum, Obie told us that learning to be an awesome developer is not just about learning &ldquo;hard skills&rdquo;. It&rsquo;s about learning to be an awesome person. Furthermore, he said,</p>

<blockquote><p>&ldquo;Programming is a career that encourages awesomeness.&rdquo;</p></blockquote>

<p>Though it wasn&rsquo;t the first time I heard that message, it meant something more to me today than it did in week one, and the words sat quietly brewing in the back of my brain as I spent the evening coding with my teammates.</p>

<p>Does the act of learning to program make you a better person? I&rsquo;m not so sure of that, but I&rsquo;m sure that learning to be an awesome person makes you a better programmer. And while learning about nested hashes doesn&rsquo;t somehow magically make you an awesome person, I do believe that people who are continually striving and struggling to be great programmers will be nudged in the direction of awesomeness by the nature of the endeavor itself.</p>

<p>So, what is it about programming that encourages awesomeness?</p>

<ol>
<li><p>Communication and Empathy:</p>

<ul>
<li><p>No successful programmer works in isolation. I&rsquo;ve learned at The Flatiron School that while you might go faster alone you definitely go farther if you work together. Failure to listen and communicate effectively negatively affects the team, the workflow, and the product.</p></li>
<li><p>Code is for communication. It&rsquo;s not just a set of instructions for a computer. When it&rsquo;s done right, code tells a story that other developers can understand and build upon.
<br /></p></li>
</ul>
</li>
<li><p>Caring About The Small Things:</p>

<ul>
<li>In order for your code to work, you have to get the details right. Getting the details right requires patience, mindfulness, and taking pride in one&rsquo;s work.<br/>
<br /></li>
</ul>
</li>
<li><p>Going With The Flow:</p>

<ul>
<li>A program is never done. A good programmer is willing to let go and accept changes, be willing to start from scratch, and be open to going in new directions and taking new approaches.<br/>
<br/></li>
</ul>
</li>
<li><p>Grit:</p>

<ul>
<li>Starting to learn to program is hard. Keeping on learning to program while it&rsquo;s hard takes grit.<br/>
<br /></li>
</ul>
</li>
<li><p>Being a Lifelong Learner:</p>

<ul>
<li>Technology never stops evolving, and neither do awesome programmers. If you want to love your career in programming, you&rsquo;ve got to love learning first.</li>
</ul>
</li>
</ol>


<p>Before I end this post, let me be clear that by no means do I believe any of the above qualities are unique to the set of people known as &ldquo;programmers&rdquo;. In fact, anyone can learn to program. More importantly though, anyone can learn the skills it takes to be an awesome person. I&rsquo;m just really happy to find that learning both of these in parellel go so nicely hand in hand.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Join Tables in ActiveRecord: Complex Associations, Simple Code]]></title>
    <link href="http://roseweixel.github.io/blog/2014/10/22/join-tables-in-active-record/"/>
    <updated>2014-10-22T21:38:48-04:00</updated>
    <id>http://roseweixel.github.io/blog/2014/10/22/join-tables-in-active-record</id>
    <content type="html"><![CDATA[<p>Up until a few weeks ago, my entire coding toolbox consisted of a small sample of some built in Ruby methods. Two of these became blog post topics (<a href="http://roseweixel.github.io/blog/2014/10/08/looking-for-something-just-number-find-it/">#find</a> and <a href="http://roseweixel.github.io/blog/2014/10/07/cheese-dot-slice/">#slice</a>), and one&mdash;the <code>&lt;&lt;</code> method&mdash;became the central character of my first coding dream/nightmare, with reserved words <code>while</code> and <code>true</code> playing key supporting roles. I used these methods to write other pretty simple methods.</p>

<p>After just a few weeks at <a href="http://www.flatironschool.com">The Flatiron School</a>, I&rsquo;m quickly learning that building up complex programs, like web apps, can&rsquo;t (or maybe really just shouldn&rsquo;t) be accomplished by writing out method after method in one big file. You need the right structures and tools to create complex objects, persist them in a database, and express relationships between these objects. Using ActiveRecord, you get some really simple and powerful tools for all this that hide a huge amount of complexity away, allowing you focus on designing your app to do what you want it to do.</p>

<p>While ActiveRecord makes it easy to create models and associations, some of the concepts involved were hard for me to get my head around at first. One such concept was the join table. I ran up against a problem in need of a join table while working with my classmates on a lab involving modeling characters and actors.</p>

<p>In ActiveRecord speak, actors have many characters and a character belongs to an actor. Here, in all of its elegant simplicity, is how you&rsquo;d create the models that express this relationship:</p>

<pre><code class="ruby app/models/actor.rb">class Actor &lt; ActiveRecord::Base
  has_many :characters
end
</code></pre>

<pre><code class="ruby app/models/character.rb">class Character &lt; ActiveRecord::Base
  belongs_to :actor
end
</code></pre>

<p>Now all we need are two tables (actors and characters) to make this association work. The characters table, being on the <code>belongs_to</code> side of the relationship, must have a column for the foreign key, <code>actor_id</code>. In ActiveRecord, this can be accomplished in remarkably few lines of code:</p>

<pre><code class="ruby db/migrations/001_create_actors.rb">class CreateActors &lt; ActiveRecord::Migration
  def change
    create_table :actors do |t|
      # ActiveRecord provides an id (primary key) column by default, for free!
      t.string :name
    end
  end
end
</code></pre>

<pre><code class="ruby db/migrations/002_create_characters.rb">class CreateCharacters &lt; ActiveRecord::Migration
  def change
    create_table :characters do |t|
      t.string :name
      # Here is where the magic happens. ActiveRecord knows that this references the actors table.
      t.integer :actor_id
    end
  end
end
</code></pre>

<p>This is the basic pattern you&rsquo;d follow to model any <code>has_many</code> <code>belongs_to</code> relationship in ActiveRecord. What seems like &ldquo;magic&rdquo; here is made possible by ActiveRecord Ruby methods that either give our associated classes more methods that let them interact with each other, or wrap SQL statements and hide them away (in the case of migrations). But that is a topic for another post.</p>

<p>Back to actors and characters. As my classmates and I were creating these models, two big things came to the surface:</p>

<p>1) We could not recall any of Tom Cruise&rsquo;s many characters&#8217; names.</p>

<p>2) What happens when a character has more than one actor? One of my favorite characters would most certainly break our has many/belongs to association&mdash;The Doctor.</p>

<p><img class="center" src="/images/sad_doc_rain.jpeg" width="500" height="500" title="&lsquo;image&rsquo; &lsquo;images&rsquo;" ></p>

<p>How can we fit The Doctor into our current schema??? The more I thought about it, the more impossible it seemed. Here is an illustration:</p>

<p><img class="center" src="/images/actor_char_table.png" width="500" height="500" title="&lsquo;image&rsquo; &lsquo;images&rsquo;" ></p>

<p>The above is our simple model, before The Doctor comes along and breaks everything. Just to be sure I was grasping how NOT to try to include The Doctor and his many actors, here is how it might look:</p>

<p><img class="center" src="/images/the_doctor_broke_the_table.png" width="800" height="800" title="&lsquo;image&rsquo; &lsquo;images&rsquo;" ></p>

<p>Our actors table seems fine, but our characters table is definitely not okay, and we haven&rsquo;t even included the eight doctors from the first twenty-six seasons yet.</p>

<p>With our current setup, we have to change the entire schema every time we add another Doctor. This is very, very bad. A database was designed for adding lots of rows. Not so for columns.</p>

<p>In order to make things right, we need a different association: many-to-many. Actors have many characters, and a character has many actors. In order to set our database up for this association, we need a join table. First the visual:</p>

<p><img class="center" src="/images/revised_character_actor_with_join.png" width="650" height="650" title="&lsquo;image&rsquo; &lsquo;images&rsquo;" ></p>

<p>Now for the migration (assuming your actors table is still intact and you&rsquo;ve already removed all but the name column from characters):</p>

<pre><code class="ruby 004_create_actors_characters_join_table.rb">class CreateCharacterActorRelationships &lt; ActiveRecord::Migration
  def change
    create_table :character_actor_relationships do |t|
      t.integer :character_id
      t.integer :actor_id
    end
  end
end
</code></pre>

<p>We also need to change our actor and character models. In order for the association to work, we need to somehow connect our actors and characters table through the character_actor_relationships table. The association we need in our actor and character models is <code>has_many :through</code>:</p>

<pre><code class="ruby app/models/actor.rb">class Actor &lt; ActiveRecord::Base
  has_many :character_actor_relationships
  has_many :characters, through: :character_actor_relationships
end
</code></pre>

<pre><code class="ruby app/models/character.rb">class Character &lt; ActiveRecord::Base
  has_many :character_actor_relationships
  has_many :actors, through: :character_actor_relationships
end
</code></pre>

<p>Finally, we need a model for CharacterActorRelationship:</p>

<pre><code class="ruby app/models/character_actor_relationship.rb">class CharacterActorRelationship &lt; ActiveRecord::Base
  belongs_to :character
  belongs_to :actor
end
</code></pre>

<p>Now we have the right associations and the right database schema to add all of the Doctors that ever were and ever will be throughout all time.</p>

<p><img class="center" src="/images/first_doctor.jpeg" width="500" height="500" title="&lsquo;image&rsquo; &lsquo;images&rsquo;" ></p>
]]></content>
  </entry>
  
</feed>
